<?php

/**
 * @file
 * McNeese State University Functions module.
 */

/**
 * @defgroup mcneese_functions McNeese Functions
 * @{
 * Provides custom functions for drupal 7.
 */

/**
 * Generates and prints the registrar Spring/Summer/Fall schedule.
 *
 * This depends on:
 * - view: semester_calendars
 * - display: semester_calendar_block_list
 *
 * @param string $semesters
 *   The semester taxonomy ids.
 * @param string $dates
 *   The date ranges to to load.
 * @param string $min_date
 *   The min date on a per monthly basis.
 * @param string $max_date
 *   The max date on a per monthly basis.
 */
function mcneese_functions_embed_registrar_schedule_content($semesters, $dates, $min_date, $max_date) {
  $view_name = 'semester_calendars';
  $display_name = 'semester_calendar_block_list';

  $view = views_get_view($view_name);

  if (!is_object($view)) {
    return;
  }

  // load required includes (for RRULE processing).
  module_load_include('inc', 'date_api', 'date_api_ical');
  module_load_include('inc', 'date_repeat', 'date_repeat_calc');

  // force default timezone
  $original_timezone = date_default_timezone_get();
  date_default_timezone_set('UTC');

  // tids:
  $registrar_tid = 250;
  $holiday_tid = 292;
  $event_groups = $registrar_tid . '+' . $holiday_tid;
  $registrar = array();
  $holiday = array();


  $view->set_display($display_name);
  $view->set_arguments(array($semesters, $dates, $event_groups));
  $view->is_cacheable = FALSE;

  $view->execute();

  $min_date_first = strtotime('first day of this month ' . $min_date);
  $max_date_last = strtotime('last day of this month ' . $max_date);

  $min_datestamp = strtotime('-1 day', $min_date_first);
  $max_datestamp = strtotime('+1 day', $max_date_last);


  foreach ($view->result as $result) {
    $item = array();
    $item['nid'] = $result->nid;
    $item['title'] = $result->node_title;
    $item['note'] = '';
    $item['date'] = '';

    if (isset($result->field_field_event_note[0]['raw']['safe_value'])) {
      $item['note'] = $result->field_field_event_note[0]['raw']['safe_value'];
    }

    $ds1 = $result->field_field_event_datetime[0]['raw']['value'];
    $ds2 = $result->field_field_event_datetime[0]['raw']['value2'];
    $dsr = $result->field_field_event_datetime[0]['raw']['rrule'];

    $d1 = strtotime($ds1);
    $d2 = strtotime($ds2);

    $d = $d1;
    $first = NULL;
    $last = NULL;
    while ($d <= $d2) {
      // generate dates
      $date = '';

      // save day (timezone adjustments are necessary due to how they stored the data.)
      date_default_timezone_set('America/Chicago');
      $ds = date('Y-m-d', $d);
      $all_day = strtotime($ds . ' 00:00:00');

      if ($d > $min_datestamp && $d < $max_datestamp) {
        if (is_null($first)) {
          $first = $d;
        }

        $last = $d;

        if ($all_day == $d) {
          $item['date'] = date('F j', $d);
        }
        else {
          $item['date'] = date('F j - g:ia', $d);
        }


        // store the item.
        if ($result->taxonomy_term_data_field_data_field_event_group_tid == $holiday_tid) {
          if (!isset($holiday[$d])) {
            $holiday[$d] = array();
          }

          unset($registrar[$d][$result->nid]);
          $holiday[$d][$result->nid] = $item;
        }
        elseif (!isset($holiday[$d][$result->nid])) {
          if (!isset($registrar[$d])) {
            $registrar[$d] = array();
          }

          $registrar[$d][$result->nid] = $item;
        }
      }

      date_default_timezone_set('UTC');
      $d = strtotime('+1 day', $d);
    }
  }


  // Registrar Events
  $rows = array();
  ksort($registrar);
  foreach ($registrar as $datestamp => $date_items) {
    foreach ($date_items as $nid => $item) {
      $row = array();
      $row[0] = '<a href="/node/' . $nid . '">' . $item['title'] . ' ' . $item['note'] . '</a>';
      $row[1] = $item['date'];

      $rows[] = $row;
    }
  }

  $attributes = array();
  $attributes['class'] = array();
  $attributes['class'][] = 'registrar-semester_schedule';
  $attributes['class'][] = 'registrar-semester_schedule-registrar';
  $attributes['summary'] = "Listing of events for the specified semester.";

  $table = array();
  $table['caption'] = "Registrar";
  $table['header'] = array('Event', 'Date');
  $table['rows'] = $rows;
  $table['attributes'] = $attributes;

  if (!empty($rows)) {
    print(theme('table', $table));
    print("<br>");
  }


  // Holiday Events
  $rows = array();
  ksort($holiday);
  foreach ($holiday as $datestamp => $date_items) {
    foreach ($date_items as $nid => $item) {
      $row = array();
      $row[0] = '<a href="/node/' . $nid . '">' . $item['title'] . ' ' . $item['note'] . '</a>';
      $row[1] = $item['date'];

      $rows[] = $row;
    }
  }

  $attributes = array();
  $attributes['class'] = array();
  $attributes['class'][] = 'registrar-semester_schedule';
  $attributes['class'][] = 'registrar-semester_schedule-holiday';
  $attributes['summary'] = "Listing of events for the specified semester.";

  $table = array();
  $table['caption'] = "Holiday";
  $table['header'] = array('Event', 'Date');
  $table['rows'] = $rows;
  $table['attributes'] = $attributes;

  if (!empty($rows)) {
    print(theme('table', $table));
    print("<br>");
  }

  $view->destroy();

  // restore original timezone
  date_default_timezone_set($original_timezone);
}

/**
 * Loads and prints the Network Services traffic data.
 *
 * @param string $url_path
 *   Relative path on the server to the page to process.
 * @param string $cache_id
 *   (optional) a name to associate with the cache.
 *   Assign as NULL to turn off caching.
 * @param string $cache_expire
 *   (optional) How long till the cache will expire using DateTime format.
 *   This defaults to '+10 minutes'.
 */
function mcneese_functions_embed_network_services_traffic($url_path, $cache_id = NULL, $cache_expire = '+10 minutes') {
  $markup = '';
  $save_to_cache = FALSE;

  if (!is_null($cache_id)) {
    $markup = &drupal_static($cache_id, '');
    $save_to_cache = TRUE;

    if ($cache = cache_get($cache_id, 'cache_page')){
      $markup = $cache->data;
      $save_to_cache = FALSE;
    }
  }

  $server_name = 'ns.mcneese.edu';
  $error_detected = FALSE;

  if (empty($markup)) {
    $webpage = cf_http_get_webpage($server_name, $url_path . '/index.html');

    if ($webpage['read'] === TRUE && $webpage['http_error']['error_code'] == 0 && $webpage['socket_error']['code'] == 0){
      $document = cf_http_split_response($webpage['document']);
      $body = $document['dom']->get_body();
      cf_http_adjust_urls($document['dom'], $server_name, $url_path);

      // strip out H1 tags.
      $document['dom']->remove_elements('h1', TRUE, FALSE);

      // reduce all other header tags.
      cf_http_reduce_html_headers($document['dom']);

      // it is known that Dave Rand <dlr@bungi.com> and Tobias Oetiker <tobi@oetiker.ch> email link do not use a mailto, so fix them.
      $a_tags = $body->getElementsByTagName('a');
      foreach ($a_tags as $a_tag) {
        if ($a_tag->hasAttribute('href')) {
          $href_value = $a_tag->getAttribute('href');
          if ($href_value == 'http://' . $server_name . $url_path . '/dlr@bungi.com') {
            $a_tag->setAttribute('href', 'mailto:dlr@bungi.com');
          }
          elseif ($href_value == 'http://' . $server_name . $url_path . '/tobi+mrtglink@oetiker.ch') {
            $a_tag->setAttribute('href', 'mailto:tobi+mrtglink@petiker.ch');
          }
        }
      }

      // walkthrough all tables and make the accessible.
      $tables = $body->getElementsByTagName('table');

      foreach ($tables as $table) {
        $caption = $document['dom']->get_dom()->createElement('caption');
        $thead = null;
        $tbodys = $table->getElementsByTagName('tbody');

        if ($tbodys->length == 0) {
          $tbody = $document['dom']->get_dom()->createElement('tbody');
        }
        else {
          $tbody = $table->removeChild($tbodys->item(0));
        }

        $total = $table->childNodes->length;
        $count = 0;
        for (; $count < $total; $count++) {
          $child = $table->removeChild($table->childNodes->item(0));
          if ($child->nodeName == 'tr') {
            $tbody->appendChild($child);
          }
        }

        $parent = $table->parentNode;
        $parent_parent = $parent->parentNode;

        if ($parent->hasAttribute('id')) {
          $id = $parent->getAttribute('id');

          if ($id == 'sysdetails') {
            $caption_text = $document['dom']->get_dom()->createTextNode("System Details");
            $caption->appendChild($caption_text);

            for ($i = 0; $i < $tbody->childNodes->length; $i++) {
              $item = $tbody->childNodes->item($i);
              if ($item->tagName == 'tr' && $item->childNodes->length > 0) {
                $child = $item->childNodes->item(0);

                if (is_object($child)) {
                  $child->setAttribute('scope', 'row');
                  $document['dom']->change_element($child, 'th');
                }
              }
            }

            $table->setAttribute('summary', "A listing of system information.");
          }
          elseif ($id == 'legend') {
            $caption_text = $document['dom']->get_dom()->createTextNode("Legend");
            $caption->appendChild($caption_text);

            $table->setAttribute('summary', "Legend for the graphs on this page.");

            $table->appendChild($document['dom']->get_dom()->createElement('br'));
            $table->appendChild($document['dom']->get_dom()->createElement('hr'));
            $table->appendChild($document['dom']->get_dom()->createElement('br'));
          }
        }
        else {
          $thead = $document['dom']->get_dom()->createElement('thead');
          $thead_tr = $document['dom']->get_dom()->createElement('tr');
          $thead->appendChild($thead_tr);

          $parent_parent->insertBefore($document['dom']->get_dom()->createElement('br'), $parent);
          $parent_parent->insertBefore($document['dom']->get_dom()->createElement('hr'), $parent);
          $parent_parent->insertBefore($document['dom']->get_dom()->createElement('br'), $parent);
          $caption_found = FALSE;

          $headers = $parent->getElementsByTagName('h2');
          if ($headers->length > 0) {
            $header = $headers->item(0)->cloneNode(TRUE);
          }
          else {
            $headers = $parent->getElementsByTagName('h3');
            if ($headers->length > 0) {
              $header = $headers->item(0)->cloneNode(TRUE);
            }
          }

          foreach ($header->childNodes as $child) {
            if ($child instanceOf DOMText) {
              $caption->appendChild($child);
              $caption->setAttribute('class', 'element-invisible');
              $caption_found = TRUE;
              break;
            }
          }

          if (!$caption_found) {
            $caption_text = $document['dom']->get_dom()->createTextNode("Graph");
            $caption->appendChild($caption_text);
            $caption->setAttribute('class', 'element-invisible');
          }

          for ($i = 0; $i < $tbody->childNodes->length; $i++) {
            $item = $tbody->childNodes->item($i);
            if ($item->tagName == 'tr' && $item->childNodes->length > 0) {
              if ($i == 0) {
                while ($item->childNodes->length > 0) {
                  $parent = $item->childNodes->item(0)->parentNode;
                  $child = $parent->removeChild($item->childNodes->item(0));

                  if ($child instanceOf DOMElement) {
                    $thead_tr->appendChild($child);
                    $document['dom']->change_element($child, 'th');
                  }
                }

                $parent = $item->parentNode;
                $parent->removeChild($item);
              }
              else {
                $child = $item->childNodes->item(0);

                if (is_object($child)) {
                  $child->setAttribute('scope', 'row');
                  $document['dom']->change_element($child, 'th');
                }
              }
            }
          }

          $table->setAttribute('summary', "This table represents the summary data presented in the preceding graph.");
        }

        $table->appendChild($caption);
        if (!is_null($thead)) $table->appendChild($thead);
        $table->appendChild($tbody);
      }

      $markup = $document['dom']->get_markup();
    }
    else {
      $markup = "An error occurred while loading the page." . '<br>';
      $error_detected = TRUE;
      $save_to_cache = FALSE;

      watchdog('ns_mcneese_edu-cache', "Failed to connect to ns.mcneese.edu, http error array = :http_error_array, socket error array = :socket_error_array", array(':http_error_array' => print_r($webpage['http_error'], TRUE), ':socket_error_array' => print_r($webpage['socket_error'], TRUE)), WATCHDOG_ERROR);

      if (isset($webpage['http_error']['error_code']) && $webpage['http_error']['error_code'] != 0){
        $markup .= "Error Code = " . check_plain($webpage['http_error']['error_code']) . '<br>';
      }
    }

    if ($save_to_cache && !$error_detected){
      $reset_cache_interval = new DateTime($cache_expire);
      cache_set($cache_id, $markup, 'cache_page', $reset_cache_interval->getTimestamp());
    }
  }

  print($markup);
}

/**
 * Loads and prints the NTAS widget from dhs.gov
 *
 * @param string $cache_id
 *   (optional) a name to associate with the cache.
 *   Assign as NULL to turn off caching.
 * @param string $cache_expire
 *   (optional) How long till the cache will expire using DateTime format.
 *   This defaults to '+1 minutes'.
 */
function mcneese_functions_embed_ntas_widget($cache_id = NULL, $cache_expire = '+1 minutes') {
  $markup = '';
  $save_to_cache = FALSE;

  if (!is_null($cache_id)) {
    $markup = &drupal_static($cache_id, '');
    $save_to_cache = TRUE;

    if ($cache = cache_get($cache_id, 'cache_page')){
      $markup = $cache->data;
      $save_to_cache = FALSE;
    }
  }

  $server_name = 'www.dhs.gov';
  $url_path = '/ntas';
  $port = 80;
  $error_detected = FALSE;

  global $is_https;

  if (empty($markup)) {
    $webpage = cf_http_get_webpage($server_name, $url_path, $port);

    if ($webpage['read'] === TRUE && $webpage['http_error']['error_code'] == 0 && $webpage['socket_error']['code'] == 0){
      $document = cf_http_split_response($webpage['document']);
      $body = $document['dom']->get_body();
      cf_http_adjust_urls($document['dom'], $server_name, $url_path);

      // strip out H1 tags.
      $document['dom']->remove_elements('h1', TRUE, FALSE);

      // strip out title, link, and meta tags
      $document['dom']->remove_elements('title', TRUE, FALSE);
      $document['dom']->remove_elements('link', TRUE, FALSE);
      $document['dom']->remove_elements('meta', TRUE, FALSE);

      // reduce all other header tags.
      cf_http_reduce_html_headers($document['dom']);

      if ($is_https) {
        $a_tags = $body->getElementsByTagName('a');
        foreach ($a_tags as $a_tag) {
          if ($a_tag->hasAttribute('href')) {
            $a_href = preg_replace('@http://@i', 'https://', $a_tag->getAttribute('href'));
            $a_tag->setAttribute('href', $a_href);
          }
        }

        $img_tags = $body->getElementsByTagName('img');
        foreach ($img_tags as $img_tag) {
          if ($img_tag->hasAttribute('src')) {
            $img_src = preg_replace('@http://@i', 'https://', $img_tag->getAttribute('src'));
            $img_tag->setAttribute('src', $img_src);
          }
        }
      }

      $markup = $document['dom']->get_markup();
    }
    else {
      $markup = "An error occurred while loading the NTAS widget. <a href='https://www.dhs.gov/ntas/'>Try visiting the widget directly</a>." . '<br>';
      $error_detected = TRUE;
      $save_to_cache = FALSE;

      watchdog('ntas_widget', "Failed to connect to ntas widget, http error array = :http_error_array, socket error array = :socket_error_array", array(':http_error_array' => print_r($webpage['http_error'], TRUE), ':socket_error_array' => print_r($webpage['socket_error'], TRUE)), WATCHDOG_ERROR);

      if (isset($webpage['http_error']['error_code']) && $webpage['http_error']['error_code'] != 0){
        $markup .= "Error Code = " . check_plain($webpage['http_error']['error_code']) . '<br>';
      }
    }

    if ($save_to_cache && !$error_detected){
      $reset_cache_interval = new DateTime($cache_expire);
      cache_set($cache_id, $markup, 'cache_page', $reset_cache_interval->getTimestamp());
    }
  }

  print($markup);
}

/**
 * Generates and prints job opportunity listings.
 *
 * This depends on:
 * - mcneese_management_template_load_node_data
 *
 * @param array $opportunity
 *   An array of all opportunity taxonomy ids to process.
 */
function mcneese_functions_embed_job_opportunity_listing($opportunity) {
  if (!function_exists('mcneese_management_template_load_node_data')) {
    return FALSE;
  }

  if (!cf_is_integer($opportunity)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('opportunity');
    }
    return FALSE;
  }

  $all = array();
  try {
    $query = db_select('mcneese_management_template_node', 'mmtn');
    $query->innerJoin('node', 'n', 'mmtn.node_id = n.nid');
    $query->innerJoin('field_data_field_group', 'fdfg', 'mmtn.node_id = fdfg.entity_id and fdfg.entity_type = \'node\'');
    $query->fields('mmtn');
    $query->fields('n', array('title'));
    $query->condition('field_group_tid', $opportunity);
    $query->condition('n.status', 1);
    $query->orderBy('n.title', 'ASC');

    $executed = $query->execute();
    $all = $executed->fetchAll();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    return FALSE;
  }

  if (empty($all)) {
    return FALSE;
  }
  else {
    print('<ul>' . "\n");
    foreach ($all as $job) {
      print('<li>' . "\n");
      print('<a href="' . base_path() . 'node/' . $job->node_id . '">' . $job->title . '</a>');
      print(' - ');

      $data = unserialize($job->data);
      if (isset($data['positions'][0])) {
        if ($data['positions'][0] > 1) {
          print($data['positions'][0] . " positions");
        }
        else {
          print("1 position");
        }
      }
      else {
        print("no positions available");
      }

      print('</li>' . "\n");
    }
    print('</ul>' . "\n");
  }

  return TRUE;
}

/**
 * Generates and prints the A to Z index.
 *
 * This is far faster and cleaner than using the views module view.
 *
 * @param string $type
 *   One of: 'content', 'group', or 'webform'.
 * @param string $filter
 *   (optional) A string representing the title to filter by.
 *   This is expected to be the first letter (thus the A to Z).
 * @param int $page
 *   (optional) The pager position.
 * @param int $limit
 *   (optional) The total number of rows to load.
 * @param int $pager_id
 *   (optional) The id to use for the pager.
 *
 * @return string|bool
 *   The generated string or FALSE on error.
 */
function mcneese_functions_build_a_to_z_listing_content($type, $filter = NULL, $page = 0, $limit = 15, $pager_id = 0) {
  if ($type != 'content' && $type != 'group' && $type != 'webform') {
    cf_error::invalid_string('type');
    return FALSE;
  }

  if (!cf_is_integer($page)) {
    cf_error::invalid_integer('page');
    return FALSE;
  }

  if (!is_null($filter) && !is_string($filter)) {
    cf_error::invalid_string('filter');
    return FALSE;
  }

  if (!cf_is_integer($limit)) {
    cf_error::invalid_integer('limit');
    return FALSE;
  }

  if ($page < 0) $page = 0;
  if ($limit < 0) $limit = 0;

  $start = $page * $limit;

  try {
    $query = db_select('node', 'n');
    $query->innerJoin('workbench_moderation_node_history', 'wmnh', 'wmnh.nid = n.nid AND wmnh.vid = n.vid');
    $query->innerJoin('field_data_field_group', 'fdfg', 'n.nid = fdfg.entity_id and fdfg.entity_type = \'node\' AND fdfg.deleted = 0');
    $query->innerJoin('taxonomy_term_data', 'ttd', 'fdfg.field_group_tid = ttd.tid');

    $query->condition('wmnh.published', 1);
    $query->condition('fdfg.field_group_tid', 428, '<>'); // do not include the "Index" group.
    $query->condition('n.status', 1);

    if ($type == 'content') {
      $query->condition('n.type', array('document', 'event', 'ie_policy', 'page', 'poster', 'side_panel', 'webform'), 'IN');
    }
    elseif ($type == 'group') {
      $query->innerJoin('field_data_field_group_representative', 'fdfgr', 'n.nid = fdfgr.entity_id and fdfgr.entity_type = \'node\'');
      $query->condition('fdfgr.field_group_representative_value', 1);
    }
    elseif ($type == 'webform') {
      $query->condition('n.type', 'webform');
    }

    if (!is_null($filter) && strlen($filter) > 0) {
      $query->condition('n.title', db_like($filter) . '%', 'ILIKE');
    }

    $count_query = clone($query);
    $count_query->addExpression('count(n.nid)');
    $total = $count_query->execute()->fetchField();

    $query->addField('n', 'nid', 'node_id');
    $query->addField('n', 'vid', 'revision_id');
    $query->addField('n', 'title', 'title');
    $query->addField('fdfg', 'field_group_tid', 'field_group_tid');
    $query->addField('ttd', 'name', 'field_group_name');

    $query->range($start, $limit);
    $query->orderBy('n.title', 'ASC');

    $executed = $query->execute();
    $all = $executed->fetchAll();

    $output = '<div id="mcneese-a_to_z_listing-' . $type . '" class="a_to_z_listing-wrapper a_to_z_listing-wrapper-' . $type . '">' . "\n";

    if (empty($all)) {
      if ($type == 'webform') {
        $output .= "No web forms were found.\n";
      }

      $output .= '</div>' . "\n";
      return $output;
    }

    $output .= '<ul class="a_to_z_listing-list a_to_z_listing-list-' . $type . '">' . "\n";

    if ($type == 'content') {
      foreach ($all as $item) {
        $output .= '<li class="a_to_z_listing-item group-' . $item->field_group_tid . '">' . "\n";
        $output .= '<a href="/node/' . $item->node_id . '" class="item-title">' . $item->title . '</a>';
        $output .= '<div class="item-group">' . $item->field_group_name . '</div>';

        // The dates are fetched individually here instead of using a join to avoid having > 1 row per unique id.
        $subquery = db_select('field_data_field_event_datetime', 'fdfed');
        $subquery->condition('fdfed.entity_id', $item->node_id);
        $subquery->condition('fdfed.revision_id', $item->revision_id);
        $subquery->condition('fdfed.entity_type', 'node');
        $subquery->addField('fdfed', 'field_event_datetime_value', 'field_event_datetime_from');
        $subquery->addField('fdfed', 'field_event_datetime_value2', 'field_event_datetime_to');
        $subquery->orderBy('fdfed.field_event_datetime_value', 'ASC');

        $dates = $subquery->execute()->fetchAll();
        if (!empty($dates[0]->field_event_datetime_from)) {
          $from_stamp = strtotime($dates[0]->field_event_datetime_from);
          $date = date('F j, Y', $from_stamp);
          $from = date('H:ia', $from_stamp);

          if (!empty($dates[0]->field_event_datetime_to)) {
            $to_stamp = strtotime($dates[0]->field_event_datetime_to);
            $to = date('H:ia', $to_stamp);

            if ($from_stamp < $to_stamp) {
              $output .= '<div class="item-event_datetime">' . $date . ' ' . $from . ' to ' . $to . '</div>';
            }
            else {
              $output .= '<div class="item-event_datetime">' . $date . '</div>';
            }
          }
          else {
            $output .= '<div class="item-event_datetime">' . $date . '</div>';
          }
        }

        $output .= '</li>' . "\n";
      }
    }
    else {
      foreach ($all as $item) {
        $output .= '<li class="a_to_z_listing-item group-' . $item->field_group_tid . ' margin-bottom-5">' . "\n";
        $output .= '<a href="/node/' . $item->node_id . '" class="item-title">' . $item->title . '</a>';
        $output .= '<div class="item-group">' . $item->field_group_name . '</div>';
        $output .= '</li>' . "\n";
      }
    }

    $output .= '</ul>' . "\n";
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    return FALSE;
  }

  pager_default_initialize($total, $limit, $pager_id);
  $output .= theme('pager');

  $output .= '</div>' . "\n";

  return $output;
}

/**
 * @} End of '@defgroup mcneese_functions McNeese Functions'.
 */
