<?php

/**
 * @file
 * Defines McNeese facilities use ical functions.
 */

/**
 * @addtogroup mfcs
 * @{
 */

/**
 * Given a request id, generate an array for building ical.
 *
 * This simply changed the format to one supported by
 * mfcs_ical_generate().
 *
 * @param int $request_id
 *   The request id.
 *
 * @return array|bool
 *   Returns the generated array or FALSE on error.
 *
 * @see: mfcs_ical_generate()
 */
function mfcs_ical_generate_array_from_id($request_id) {
  $request = mfcs_load_request_by_id($request_id);

  if (empty($request)) {
    cf_error::invalid_integer('request_id');
    return FALSE;
  }

  mfcs_include(MFCS_INCLUDE_LIST_OPTIONS);

  $request_location_options = mfcs_get_request_location_list_options(NULL, FALSE, TRUE);
  $request_building_options = mfcs_get_request_building_list_options(NULL, NULL, FALSE, TRUE);
  $request_room_options = mfcs_get_request_room_list_options(NULL, NULL, FALSE, TRUE);

  // rebuild the request object into the expected array format.
  $requests = array();

  $request_custom = new StdClass();
  $request_custom->id = (int) $request['mer']['id'][0]->value;
  $request_custom->created = (int) $request['mer']['created'][0]->value;
  $request_custom->updated = (int) $request['mer']['updated'][0]->value;
  $request_custom->revision = (int) $request['mer']['revision'][0]->value;

  $request_custom->user_id = (int) $request['mer']['user_id'][0]->value;

  $request_custom->status = (int) $request['top']['status'][0]->value;
  $request_custom->step = (int) $request['top']['step'][0]->value;

  $request_custom->classification = (int) $request['request_coordinator']['classification'][0]->value;

  $request_custom->location = (int) $request['top']['location'][0]->value;
  $request_custom->location_name = $request_location_options[$request_custom->location];

  $request_custom->building = (int) $request['top']['building'][0]->value;
  $request_custom->building_name = $request_building_options[$request_custom->building];

  $request_custom->room = (int) $request['top']['room'][0]->value;
  $request_custom->room_name = $request_room_options[$request_custom->room];

  $request_custom->title = $request['information']['title'][0]->value;
  $request_custom->type = (int) $request['information']['type'][0]->value;

  $request_custom->date = array();
  $request_custom->time_start = array();
  $request_custom->time_stop = array();
  $request_custom->category = array();
  foreach ($request['dates']['date'] as $key => $value) {
    $request_custom->date[$key] = (int) $value->value;

    $request_custom->cancelled[$key] = FALSE;
    if ($value->cancelled == 1) {
      $request_custom->cancelled[$key] = TRUE;
    }

    $request_custom->time_start[$key] = NULL;
    if (isset($request['dates']['time_start'][$key]) && property_exists($request['dates']['time_start'][$key], 'value') && !is_null($request['dates']['time_start'][$key]->value)) {
      $request_custom->time_start[$key] = (int) $request['dates']['time_start'][$key]->value;
    }

    $request_custom->time_stop[$key] = NULL;
    if (isset($request['dates']['time_stop'][$key]) && property_exists($request['dates']['time_stop'][$key], 'value') && !is_null($request['dates']['time_stop'][$key]->value)) {
      $request_custom->time_stop[$key] = (int) $request['dates']['time_stop'][$key]->value;
    }

    $request_custom->category[$key] = NULL;
    if (isset($request['dates']['category'][$key]) && property_exists($request['dates']['category'][$key], 'value') && !is_null($request['dates']['category'][$key]->value)) {
      $request_custom->category[$key] = (int) $request['dates']['category'][$key]->value;
    }
  }

  $request_custom->request_coordinator_name = $request['request_coordinator']['name'][0]->value;
  $request_custom->request_coordinator_email = $request['request_coordinator']['email'][0]->value;

  $requests[$request_id] = $request_custom;

  unset($request_custom);

  return $requests;
}

/**
 * Generates an iCal content.
 *
 * @param array $requests
 *   An array of requests generated by mfcs_request_load_listing().
 *   This expects certain fields to be loaded.
 * @param int $start
 *   (optional) A unix timestamp representing a current date to load.
 *   A >= is performed on this value when $date_to is an integer.
 * @param int $stop
 *   (optional) A unix timestamp representing a current date to load.
 *   A < is performed on this value.
 *
 * @return array|bool
 *   An array containing:
 *   - content: a string containing the ical string.
 *   - length: the 8-byte length of the ical string.
 *   FALSE is returned on error.
 *
 * @see: mfcs_request_load_listing()
 */
function mfcs_ical_generate($requests, $start = NULL, $stop = NULL) {
  if (!is_array($requests)) {
    cf_error::invalid_array('requests');
    return FALSE;
  }

  if (!is_null($start) && !cf_is_integer($start)) {
    cf_error::invalid_integer('start');
    return FALSE;
  }

  if (!is_null($stop) && !cf_is_integer($stop)) {
    cf_error::invalid_integer('stop');
    return FALSE;
  }

  global $base_url;
  global $conf;

  $fcs_site_url = variable_get('fcs_site_url', 'fcs.mcneese.edu');
  $fcs_name = variable_get('fcs_name', 'McNeese Facilities Use System');

  $date_format = 'Ymd\THis\Z';
  $date_format_all_day = 'Ymd';
  $date_day_format = 'l, F jS, Y';
  $date_time_format = MFCS_DATE_FORMAT_TIME;

  $date_timezone_string = date('T');

  $ical_eol = "\r\n";

  $ical = array();
  mfcs_ical_populate_array($ical, 'BEGIN:VCALENDAR');
  mfcs_ical_populate_array($ical, 'VERSION:2.0');
  mfcs_ical_populate_array($ical, 'PRODID:' . $fcs_name);

  // see: https://tools.ietf.org/html/rfc5545#section-3.7.2
  // see: https://tools.ietf.org/html/rfc5546#section-3.2
  // use method 'publish' to prevent calendar tools from treating this as an invitation.
  mfcs_ical_populate_array($ical, 'METHOD:PUBLISH');

  $original_timezone = date_default_timezone_get();

  mfcs_include(MFCS_INCLUDE_LIST_OPTIONS);

  $request_type_options = mfcs_get_request_type_list_options();
  $request_classification_options = mfcs_get_request_classification_list_options();
  $dates_categories_options = mfcs_get_dates_category_list_options();
  $location_options = mfcs_get_request_location_list_options(NULL, FALSE, TRUE);
  $room_options = mfcs_get_request_room_list_options(NULL, NULL, FALSE, TRUE);
  $building_options = mfcs_get_request_building_list_options(NULL, NULL, FALSE, TRUE);

  foreach ($requests as $request) {
    if (empty($request->date)) {
      continue;
    }

    $request_type = '';
    $request_classification = '';
    $request_categories = array();

    if (isset($request->type) && isset($request_type_options[$request->type])) {
      $request_type = $request_type_options[$request->type];
      $request_categories[] = $request_type;
    }

    if (isset($request->classification) && isset($request_classification_options[$request->classification])) {
      $request_classification = $request_classification_options[$request->classification];

      // see: https://tools.ietf.org/html/rfc5545#section-3.8.1.2
      $request_categories[] = mfcs_ical_sanitize_text($request_classification);
    }


    $request_revision = 0;
    if (property_exists($request, 'revision')) {
      $request_revision = $request->revision;
    }

    $request_url = $base_url . '/requests/view-0/' . $request->id;
    $request_zone = $building_options[$request->building] . ' ' . $room_options[$request->room];

    $request_description_begin = '';

    if ($request->status === MFCS_REQUEST_STATUS_CLOSED_ACCEPTED_CANCELLED) {
      $request_description_begin .= 'This reservation is cancelled.' . "\n\n";
    }

    $request_description_begin .= 'The reserved location is: ' . "\n";
    $request_description_begin .= '  - ' . $building_options[$request->building] . ' ' . $room_options[$request->room] . "\n";

    $request_description_end = "\n\n";
    $request_description_end = 'The Request ID is: ' . $request->id . ".\n";
    $request_description_end = "\n";
    $request_description_end .= 'You may view the request at: '  . $request_url. ".\n";
    $request_description_end .= "\n";

    $request_dates_setup_begin = 'The ' . $dates_categories_options[MFCS_REQUEST_DATES_CATEGORY_SETUP] . ' takes place on the following dates and times:' . "\n";
    $request_dates_setup_end = "\n";

    $request_dates_actual_begin = 'This location is reserved for the ' . $dates_categories_options[MFCS_REQUEST_DATES_CATEGORY_ACTUAL] . ' takes place on the following dates and times:' . "\n";
    $request_dates_actual_end = "\n";

    $request_dates_cleanup_begin = 'This location is reserved for the ' . $dates_categories_options[MFCS_REQUEST_DATES_CATEGORY_CLEANUP] . ' takes place on the following dates and times:' . "\n";
    $request_dates_cleanup_end = "\n";

    $request_description_markup_begin = '<html>';
    $request_description_markup_begin .= '<body>';

    if ($request->status === MFCS_REQUEST_STATUS_CLOSED_ACCEPTED_CANCELLED) {
      $request_description_markup_begin .= '<strong>This reservation is cancelled</strong>.' . "<br><br>";
    }

    $request_description_markup_begin .= 'The reserved location is: ' . '<br>';
    $request_description_markup_begin .= '<ul>';
    $request_description_markup_begin .= '  <li>' . $building_options[$request->building] . ' ' . $room_options[$request->room] . "</li>";
    $request_description_markup_begin .= '</ul>';

    $request_description_markup_end = '';
    $request_description_markup_end .= '<br>';
    $request_description_markup_end .= '<em>The Request ID is: ' . $request->id . ".</em><br>";
    $request_description_markup_end .= '<br>';
    $request_description_markup_end .= 'You may view the request at: <a href="' . $request_url . '">' . $request_url . "</a>.<br>";
    $request_description_markup_end .= '</body>';
    $request_description_markup_end .= '</html>';

    $request_dates_setup_markup_begin = 'The <strong>' . $dates_categories_options[MFCS_REQUEST_DATES_CATEGORY_SETUP] . '</strong> takes place on the following dates and times:';
    $request_dates_setup_markup_begin .= '<ul>';
    $request_dates_setup_markup_end = '';
    $request_dates_setup_markup_end .= '</ul>';

    $request_dates_actual_markup_begin = 'The <strong>' . $dates_categories_options[MFCS_REQUEST_DATES_CATEGORY_ACTUAL] . '</strong> takes place on the following dates and times:';
    $request_dates_actual_markup_begin .= '<ul>';
    $request_dates_actual_markup_end = '';
    $request_dates_actual_markup_end .= '</ul>';

    $request_dates_cleanup_markup_begin = 'The <strong>' . $dates_categories_options[MFCS_REQUEST_DATES_CATEGORY_CLEANUP] . '</strong> takes place on the following dates and times:';
    $request_dates_cleanup_markup_begin .= '<ul>';
    $request_dates_cleanup_markup_end = '';
    $request_dates_cleanup_markup_end .= '</ul>';


    // preprocess the dates.
    $dates_setup_event_text = '';
    $dates_setup_event_markup = '';
    $dates_actual_event_text = '';
    $dates_actual_event_markup = '';
    $dates_cleanup_event_text = '';
    $dates_cleanup_event_markup = '';

    $ical_dates = array();
    foreach ($request->date as $delta => $date) {
      // the category field is required and must be valid.
      if (!array_key_exists($delta, $request->category) || is_null($request->category[$delta]) || !array_key_exists($request->category[$delta], $dates_categories_options)) {
        continue;
      }

      $ical_date = array();
      if (array_key_exists($delta, $request->time_start) && !is_null($request->time_start[$delta]) && array_key_exists($delta, $request->time_stop) && !is_null($request->time_stop[$delta])) {
        $ical_date['all_day'] = FALSE;
        $ical_date['date_start'] = $request->time_start[$delta];
        $ical_date['date_stop'] = $request->time_stop[$delta];
        $ical_date['text'] = date($date_day_format, $date) . ' from ' . date($date_time_format, $ical_date['date_start']) . ' to ' . date($date_time_format, $ical_date['date_stop']) . ' ' . $date_timezone_string;

        // see: https://tools.ietf.org/html/rfc5545#section-3.8.2
        date_default_timezone_set('UTC');
        $ical_date['start'] = 'DTSTART:' . date($date_format, $ical_date['date_start']);
        $ical_date['stop'] = 'DTEND:' . date($date_format, $ical_date['date_stop']);
        date_default_timezone_set($original_timezone);
      }
      else {
        $ical_date['all_day'] = TRUE;
        $ical_date['date_start'] = strtotime('today', $date);
        $ical_date['date_stop'] = strtotime('tomorrow', $ical_date['date_start']);
        $ical_date['text'] = date($date_day_format, $date);

        // see: https://tools.ietf.org/html/rfc5545#section-3.8.2
        date_default_timezone_set('UTC');
        $ical_date['start'] = 'DTSTART;VALUE=DATE:' . date($date_format_all_day, $ical_date['date_start']);
        $ical_date['stop'] = 'DTEND;VALUE=DATE:' . date($date_format_all_day, $ical_date['date_stop']);
        date_default_timezone_set($original_timezone);
      }

      $ical_date['cancelled'] = $request->cancelled[$delta];

      if ($request->category[$delta] == MFCS_REQUEST_DATES_CATEGORY_SETUP) {
        $dates_setup_event_text .= '  - ' . $ical_date['text'] . "\n";
        $dates_setup_event_markup .= '<li>' . $ical_date['text'] . '</li>';
      }
      elseif ($request->category[$delta] == MFCS_REQUEST_DATES_CATEGORY_ACTUAL) {
        $dates_actual_event_text .= '  - ' . $ical_date['text'] . "\n";
        $dates_actual_event_markup .= '<li>' . $ical_date['text'] . '</li>';
      }
      elseif ($request->category[$delta] == MFCS_REQUEST_DATES_CATEGORY_CLEANUP) {
        $dates_cleanup_event_text .= '  - ' . $ical_date['text'] . "\n";
        $dates_cleanup_event_markup .= '<li>' . $ical_date['text'] . '</li>';
      }

      $ical_dates[$delta][$date] = $ical_date;
      unset($ical_date);
    }

    // The ical dates() will be in UTC format.
    date_default_timezone_set('UTC');

    // process the dates, each date will have its own VEVENT because the VEVENT does not support non-repeating multiple dates!
    // @todo: should I implement a hack to simulate multiple dates by using repeating dates using RRULE?
    foreach ($ical_dates as $delta => $ical_date_at_delta) {
      foreach ($ical_date_at_delta as $date => $ical_date) {
        // do not create ical events for dates outside our scope.
        // these dates are loaded by the listing so that the dates can be presented in the body of a given ical event.
        if (!is_null($start) && $date < $start) {
          continue;
        }

        if (!is_null($stop) && $date >= $stop) {
          continue;
        }

        mfcs_ical_populate_array($ical, 'BEGIN:VEVENT');
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('UID:request-' . $request->id . '-' . $date . '-' . $delta . '@' . $fcs_site_url));

        // DTSTAMP represents the last time the vcal data was changed.
        // This should only happend when the request gets modified, so it will be the same as the last modified date.
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('DTSTAMP:' . date($date_format, $request->updated)));
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap($ical_date['start']));
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap($ical_date['stop']));
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('CREATED:' . date($date_format, $request->created)));
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('LAST-MODIFIED:' . date($date_format, $request->updated)));
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('LOCATION:' . mfcs_ical_sanitize_text($request_zone)));
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('GEO:' . mfcs_ical_geo_coordinates($request->building, $request->room)));


        // see: https://tools.ietf.org/html/rfc5545#section-3.3.13
        // see: https://tools.ietf.org/html/rfc5545#section-3.8.4.6
        // warning: Standard states "When a property parameter value is a URI value type, the URI MUST be specified as a quoted-string value.", but adding quotes will cause validation failure.
        //          Furthermore, later in the documentation, their own examples for the URL type does not use double quotes.
        //          The standard is therefore inconsistent with itself.
        //          Double quotes will not be used at this time.
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('URL;VALUE=URI:' . $request_url));
        #mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('URL:' . $base_url . '/requests/ical-0/' . $request->id));

        // see: https://tools.ietf.org/html/rfc5545#section-3.8.4.3
        $requester = user_load($request->user_id);
        $requester_user_name = $requester->name;
        if (isset($requester->field_user_first_name['und'][0]['value']) && isset($requester->field_user_last_name['und'][0]['value'])) {
          $requester_user_name = mfcs_ical_sanitize_text($requester->field_user_first_name['und'][0]['value']) . ' ' . mfcs_ical_sanitize_text($requester->field_user_last_name['und'][0]['value']);
        }
        $requester_text = $requester_user_name;
        if (!empty($requester->mail)) {
          $requester_text = 'mailto:' . mfcs_ical_sanitize_text($requester->mail);
        }
        $organizer_sent_by = NULL;
        if (!empty($conf['fcs_email'])) {
          $organizer_sent_by = ';SENT-BY="mailto:' . $conf['fcs_email'] . '"';
        }
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('ORGANIZER' . $organizer_sent_by . ';CN=' . mfcs_ical_sanitize_text($requester_user_name) . ':' . $requester_text));

        if (!empty($request_categories)) {
          mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('CATEGORIES:' . implode(', ', $request_categories)));
        }

        // see: https://tools.ietf.org/html/rfc5545#section-3.8.4.2
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('CONTACT:' . mfcs_ical_sanitize_text($request->request_coordinator_name . ', ' . $request->request_coordinator_email)));

        // see: https://tools.ietf.org/html/rfc5545#section-3.8.1.12
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('SUMMARY:' . mfcs_ical_sanitize_text($request->title)));
        unset($summary);

        $request_description = $request_description_begin;

        $request_description .= $request_dates_actual_begin;
        $request_description .= $dates_actual_event_text;
        $request_description .= $request_dates_actual_end;

        if (!empty($dates_setup_text)) {
          $request_description .= $request_dates_setup_begin;
          $request_description .= $dates_setup_event_text;
          $request_description .= $request_dates_setup_end;
        }

        if (!empty($dates_cleanup_text)) {
          $request_description .= $request_dates_cleanup_begin;
          $request_description .= $dates_cleanup_event_text;
          $request_description .= $request_dates_cleanup_end;
        }

        $request_description .= $request_description_end;

        // see: https://tools.ietf.org/html/rfc5545#section-3.3.11
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('DESCRIPTION:' . mfcs_ical_sanitize_text($request_description)));

        $request_description_markup = $request_description_markup_begin;

        $request_description_markup .= $request_dates_actual_markup_begin;
        $request_description_markup .= $dates_actual_event_markup;
        $request_description_markup .= $request_dates_actual_markup_end;

        if (!empty($dates_setup_event_markup)) {
          $request_description_markup .= $request_dates_setup_markup_begin;
          $request_description_markup .= $dates_setup_event_markup;
          $request_description_markup .= $request_dates_setup_markup_end;
        }

        if (!empty($dates_cleanup_event_markup)) {
          $request_description_markup .= $request_dates_cleanup_markup_begin;
          $request_description_markup .= $dates_cleanup_event_markup;
          $request_description_markup .= $request_dates_cleanup_markup_end;
        }

        $request_description_markup .= $request_description_markup_end;

        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('X-ALT_DESC;FMTTYPE=text/html:' . mfcs_ical_sanitize_text($request_description_markup)));

        // SEQUENCE represents the revision number of the vevent.
        // make the sequence represent the requests revision number.
        mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('SEQUENCE:' . $request_revision));

        // 'STATUS:' with values like: 'TENTATIVE', 'CONFIRMED', 'CANCELLED' can be used if loading current users calendar.
        // see: https://tools.ietf.org/html/rfc5545#section-3.8.1.11
        if ($request->status === MFCS_REQUEST_STATUS_CLOSED_ACCEPTED_CANCELLED || $ical_date['cancelled']) {
          mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('STATUS:' . 'CANCELLED'));
        }
        else {
          mfcs_ical_populate_array($ical, mfcs_ical_wordwrap('STATUS:' . 'CONFIRMED'));
        }

        // 'RESOURCES:' could be added here to designate things like projectors and microphones needed, etc..
        // see: https://tools.ietf.org/html/rfc5545#section-3.8.1.10

        // Can be set to either PUBLIC or PRIVATE, requests are generally public.
        mfcs_ical_populate_array($ical, 'CLASS:PUBLIC');

        // the following are fields added by Zimbra, so add these to make things more compatible with non-standard products.
        mfcs_ical_populate_array($ical, 'X-MICROSOFT-CDO-INTENDEDSTATUS:BUSY');
        if ($ical_date['all_day']) {
          mfcs_ical_populate_array($ical, 'X-MICROSOFT-CDO-ALLDAYEVENT:TRUE');
        }
        else {
          mfcs_ical_populate_array($ical, 'X-MICROSOFT-CDO-ALLDAYEVENT:FALSE');
        }

        // this is mentioned on wikipedia as a non-standard all-day flag.
        if ($ical_date['all_day']) {
          mfcs_ical_populate_array($ical, 'X-FUNAMBOL-ALLDAY:1');
        }

        // Tells systems that this should be visible on busy searches.
        // see: https://tools.ietf.org/html/rfc5545#section-3.8.2.7
        mfcs_ical_populate_array($ical, 'TRANSP:OPAQUE');

        mfcs_ical_populate_array($ical, 'END:VEVENT');
      }
    }

    // restore original timezone so that the non-ical dates can be calculated properly.
    date_default_timezone_set($original_timezone);
  }

  mfcs_ical_populate_array($ical, 'END:VCALENDAR');

  // as a failsafe, make sure the original timezone gets set.
  date_default_timezone_set($original_timezone);

  // return the resulting string as an array and expect the client to process the results.
  return $ical;
}

/**
 * The given string will be counted and appended to the ical array.
 *
 * Previously, return implode($ical_eol, $ical) . $ical_eol was used to generate the ical.
 * This turned out to be an enormous resource hog.
 *
 * @param array $ical
 *   The array to append the string to.
 * @param string $string
 *   The string to append.
 *
 * @param bool
 *   TRUE on success, FALSE otherwise.
 */
function mfcs_ical_populate_array(&$ical, $string) {
  if (!is_array($ical)) {
    cf_error::invalid_array('ical');
    return FALSE;
  }

  if (!is_string($string)) {
    cf_error::invalid_string('string');
    return FALSE;
  }

  if (!array_key_exists('length', $ical)) {
    $ical['length'] = 0;
  }

  if (!array_key_exists('content', $ical)) {
    $ical['content'] = '';
  }

  $ical['length'] += strlen($string) + 2;
  $ical['content'][] = $string . "\r\n";
  return TRUE;
}

/**
 * Replacement to php's wordwrap() that actuall respects the spaces.
 *
 * The PHP function will lose spaces after the truncate location before
 * starting the next line. This causes content that gets put back togethor
 * to be missing a space.
 *
 * For example 'Hello World' if the wrap was on 5 characters such, then php
 * Would produce 'Hello\nWorld' instead of the expected 'Hello\n World'.
 * When the string gets re-attached, it ends up being: 'HelloWorld'.
 *
 * @param string $string
 *   The string to wrap.
 *
 * @param string|bool
 *   The wrapped string or FALSE on error.
 */
function mfcs_ical_wordwrap($string) {
  if (!is_string($string)) {
    cf_error::invalid_string('string');
    return FALSE;
  }

  $array = str_split($string, 75);

  if (!is_array($array)) {
    return FALSE;
  }

  return implode("\r\n ", $array);
}

/**
 * Sanitizes the ical string based on the 'text' rules.
 *
 * text = *(TSAFE-CHAR / ":" / DQUOTE / ESCAPED-CHAR)
 * ESCAPED_CHAR = ("\\" / "\;" / "\," / "\N" / "\n")
 *
 * @see: https://tools.ietf.org/html/rfc5545#section-3.11
 */
function mfcs_ical_sanitize_text($string) {
  $delimited = preg_replace('/(\\\|,|;)/', '\\\\\1', $string);
  $delimited = preg_replace("/\n/", '\n', $delimited);

  return $delimited;
}

/**
 * A static/hardcoded function for generating geo coordinates.
 *
 * This is hardcoded as a quick and temporary solution.
 *
 * This will be updated as necessary, the first iteration will just focus on the buildings.
 *
 * @param int $building
 *   The building code.
 * @param int $room
 *   The room code.
 */
function mfcs_ical_geo_coordinates($building, $room) {
  // default to coordinates that are in general the center of mcneese university campus.
  $latitude = 30.180565;
  $longitude = -93.216738;

  if ($building == 1) {
    // band building
    $latitude = 30.183013;
    $longitude = -93.217221;
  }
  elseif ($building == 2) {
    // burton business center
    $latitude = 30.181112;
    $longitude = -93.216588;
  }
  elseif ($building == 3) {
    // bulber auditorium
    $latitude = 30.181770;
    $longitude = -93.217253;
  }
  elseif ($building == 4) {
    // burton hall
    $latitude = 30.177350;
    $longitude = -93.217952;
  }
  elseif ($building == 5) {
    // burton memorial coliseum
    $latitude = 30.137096;
    $longitude = -93.211616;
  }
  elseif ($building == 6) {
    // dolan memorial athletic complex
    $latitude = 30.174471;
    $longitude = -93.210316;
  }
  elseif ($building == 7) {
    // h c drew hall
    $latitude = 30.178189;
    $longitude = -93.215443;
  }
  elseif ($building == 8) {
    // farrar hall
    $latitude = 30.180732;
    $longitude = -93.215687;
  }
  elseif ($building == 9) {
    // frasch hall
    $latitude = 30.179195;
    $longitude = -93.217759;
    // the annex is: 30.179603, -93.217512
  }
  elseif ($building == 10) {
    // gayle hall
    $latitude = 30.177624;
    $longitude = -93.219179;
  }
  elseif ($building == 11) {
    // memorial gymnasium
    $latitude = 30.181263;
    $longitude = -93.215506;
  }
  elseif ($building == 12) {
    // holbrook student union
    $latitude = 30.179212;
    $longitude = -93.216329;
  }
  elseif ($building == 13) {
    // juliet hardtner hall
    $latitude = 30.182781;
    $longitude = -93.214442;
  }
  elseif ($building == 14) {
    // kaufman hall
    $latitude = 30.180504;
    $longitude = -93.217858;
  }
  elseif ($building == 15) {
    // kirkman hall
    $latitude = 30.178094;
    $longitude = -93.216151;
  }
  elseif ($building == 16) {
    // outdoor venues
    $latitude = 30.173755;
    $longitude = -93.211994;
  }
  elseif ($building == 17) {
    // recreation complex
    $latitude = 30.181770;
    $longitude = -93.215327;
  }
  elseif ($building == 18) {
    // swla econ & enterpreneurial center
    $latitude = 30.180173;
    $longitude = -93.220213;
  }
  elseif ($building == 19) {
    // shearman fine arts center
    $latitude = 30.182280;
    $longitude = -93.217318;
  }
  elseif ($building == 20) {
    // shearman fine arts addition
    $latitude = 30.182709;
    $longitude = -93.217927;
  }
  elseif ($building == 21) {
    // stream alumni center
    $latitude = 30.175705;
    $longitude = -93.213576;
  }
  elseif ($building == 22) {
    // student union annex
    $latitude = 30.179758;
    $longitude = -93.216768;
  }
  elseif ($building == 23) {
    // mcneese farm (coordinates are a guess)
    $latitude = 30.183934;
    $longitude = -93.172316;
  }
  elseif ($building == 24) {
    // special use for FCS
  }
  elseif ($building == 25) {
    // gayle hall annex
    $latitude = 30.177885;
    $longitude = -93.21961;
  }
  elseif ($building == 26) {
    // calendar
  }
  elseif ($building == 27) {
    // bookstore
    $latitude = 30.179392;
    $longitude = -93.217071;
  }
  elseif ($building == 28) {
    // holiday
  }

  return '' . $latitude . ';' . $longitude;
}

/**
 * @} End of '@addtogroup mfcs'.
 */
