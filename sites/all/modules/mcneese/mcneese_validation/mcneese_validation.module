<?php

/**
 * @file
 * McNeese State University Validation module.
 */

/**
 * @defgroup mcneese_validation McNeese Validation
 * @{
 * Provides validation functionality and changes to drupal 7.
 */


/**
 * Implements hook_permission().
 */
function mcneese_validation_permission() {
  $permissions = array();

  $permissions['mcneese validation page'] = array(
    'title' => t("Access McNeese Validation Page"),
    'description' => t("Grants permissions to view mcneese validation page."),
  );

  return $permissions;
}

/**
 * Implements hook_action_info().
 */
function mcneese_validation_action_info() {
  return array(
    'mcneese_validation_validate_action' => array(
      'type' => 'node',
      'label' => t("Validate Content"),
      'configurable' => FALSE,
      'triggers' => array('node_presave', 'node_insert', 'node_update'),
    ),
    'mcneese_validation_delete_action' => array(
      'type' => 'node',
      'label' => t("Delete validation statistics for content"),
      'configurable' => FALSE,
      'triggers' => array('node_presave', 'node_insert', 'node_update'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mcneese_validation_menu() {
  $items = array();

  $items['node/%node/validation'] = array(
    'title' => "Validation",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_validation_tab_page', 1),
    'access callback' => 'mcneese_validation_access_validation_tab',
    'access arguments' => array(1),
    'file' => 'validation_tab.inc',
    'file path' => drupal_get_path('module', 'mcneese_validation') . '/pages',
    'weight' => 8,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['node/%node/validation/%/revision'] = array(
    'title' => "Accessibility",
    'load arguments' => array(3, 3),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_validation_tab_page', 1, 3),
    'access callback' => 'mcneese_validation_access_validation_tab',
    'access arguments' => array(1),
    'file' => 'validation_tab.inc',
    'file path' => drupal_get_path('module', 'mcneese_validation') . '/pages',
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function mcneese_validation_admin_paths() {
  $paths = array();

  $paths['node/*/validation'] = TRUE;
  $paths['node/*/validation/*/revision'] = TRUE;

  return $paths;
}

/**
 * Implements hook_node_delete().
 */
function mcneese_validation_node_delete($node) {
  if (!is_object($node)) {
    cf_error::invalid_object('node');

    return;
  }

  #mcneese_validation_delete_node_data($node->nid, NULL);
}

/**
 * Implements hook_theme().
 */
function mcneese_validation_theme($existing, $type, $theme, $path) {
  $themes = array();

  $themes['mcneese_validation_information'] = array(
    'template' => 'mcneese_validation_information',
    'variables' => array(
      'node' => NULL,
    ),
    'path' => drupal_get_path('module', 'mcneese_validation') . '/themes',
  );

  return $themes;
}

/**
 * Template preprocess function for mcneese_validation_information.tpl.php
 */
function template_preprocess_node_accessibility_information(&$variables) {
  $variables['workbench_moderation'] = FALSE;
  $variables['published'] = t("No");

  drupal_add_css(drupal_get_path('module', 'node_accessibility') . '/includes/node_accessibility_information.css');

  if (!isset($variables['node']) || !is_object($variables['node'])) {
    cf_error::invalid_object('node');

    return;
  }

  if ($variables['node']->status) {
    $variables['published'] = t("Yes");
  }

  if (module_exists('workbench_moderation') && property_exists($variables['node'], 'workbench_moderation')) {
    $variables['workbench_moderation'] = TRUE;
    $variables['live'] = t("No");
    $variables['current'] = t("No");

    if (isset($variables['node']->workbench_moderation['current']) && is_object($variables['node']->workbench_moderation['current'])) {
      if ($variables['node']->workbench_moderation['current']->vid == $variables['node']->vid) {
        $variables['current'] = t("Yes");
      }
    }

    if (isset($variables['node']->workbench_moderation['published']) && is_object($variables['node']->workbench_moderation['published'])) {
      if ($variables['node']->workbench_moderation['published']->vid == $variables['node']->vid) {
        $variables['live'] = t("Yes");
      }
    }
  }
}

/**
 * Checks if user can access the validation tab.
 *
 * @param object $node
 *   A node object whose access is to be returned.
 *
 * @return bool
 *   TRUE if user can make conversions using this type, FALSE otherwise.
 */
function mcneese_validation_access_validation_tab($node) {
  $access = FALSE;

  if (!is_object($node)) {
    cf_error::invalid_object('node');

    return $access;
  }

  if (node_access('view', $node)) {
    $access = user_access('access node accessibility tab');

    if ($access && mcneese_validation_is_enabled($node->type)) {
      $access = TRUE;
    }
    else {
      $access = FALSE;
    }
  }

  return $access;
}

/**
 * Implements hook_form_FORM_ID_alter() for the node type form.
 */
function mcneese_validation_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (empty($form['#node_type']->type)) {
    return;
  }

  $default_enabled = variable_get('mcneese_validation_' . $form['#node_type']->type, FALSE);

  $form['mcneese_content']['mcneese_validation'] = array(
    '#type' => 'select',
    '#title' => t("McNeese Validation"),
    '#default_value' => $default_enabled,
    '#options' => array(
      FALSE => t("Disabled"),
      TRUE => t("Enabled"),
    ),
    '#description' => t("Choose if validation should be enabled for this node."),
  );

  $form['#submit'][] = 'mcneese_validation_node_type_form_submit';
}

/**
 * Handles submitting the validation content specific node type settings.
 *
 * @param array $form
 *   A form array
 * @param array $form_state
 *   A form state
 */
function mcneese_validation_node_type_form_submit($form, &$form_state) {
  if (empty($form_state['values']['type'])) {
    cf_error::empty_string('form_state[values][type]');
  }

  variable_set('mcneese_validation_' . $form_state['values']['type'], $form_state['values']['mcneese_content']['mcneese_validation']);
}

/**
 * Implements hook_node_operations().
 */
function mcneese_validation_node_operations() {
  $operations = array(
    'mcneese_validation_operation_validate' => array(
      'label' => t("Validate Selected Content"),
      'callback' => 'mcneese_validation_operation_validate',
    ),
  );

  return $operations;
}

/**
 * Perform validation on any number of nodes.
 *
 * Only nodes that have validation enabled will be validated in this way.
 * All other nodes are silently ignored.
 *
 * @param array $nids
 *   An array of node ids
 */
function mcneese_validation_operation_validate($nids) {
  $nodes = node_load_multiple($nids);
  $settings = array();
  $result = TRUE;

  foreach ($nodes as $key => $node) {
    if (!is_object($node)) continue;

    if (!isset($settings[$node->type])) {
      $settings[$node->type] = variable_get('mcneese_validation_' . $node->type, FALSE);
    }

    if (!$settings[$node->type]) continue;

    $results = mcneese_validation_perform_validation(array($node));
    $result = empty($results['problems']) ? TRUE : FALSE;
    $saved = mcneese_validation_save_validation(array($results));
  }

  if ($result) {
    drupal_set_message(t("The validation has been performed."));
  }
  else {
    drupal_set_message(t("Unable to perform the validation, something went wrong."), 'error');
  }
}

/**
 * Performs validation on the given nodes and stores the results.
 *
 * @param array $nodes_or_nids
 *   An array of node objects or node ids.
 * @param array $vids
 *   (optional) The an array vids to use during validation, with the following
 *   structure:
 *   - nid: an array of vids With the array key being the node id.
 *     - example: $vids = array('1' => array('2', '3', '4')) such '1' is the
 *     node id and 2, 3, and 4 are the vids for node 1.
 *
 * @return array
 *   An array of test results with the following keys:
 *   - errors: An array containing errors that occured during processing.
 *   - warnings: An array containing warnings that occured during processing.
 *   - passes: An array of nodes that passed validation.
 *   - failures: An array of nodes that failed validation.
 */
function mcneese_validation_perform_validation($nodes_or_nids, $vids = array()) {
  $results = array();
  $results['errors'] = array();
  $results['warnings'] = array();
  $results['passes'] = array();
  $results['failures'] = array();

  if (!is_array($nodes_or_nids)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('node_or_nids');
    }

    return $results;
  }

  if (!is_array($vids)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('vids');
    }

    return $results;
  }

  if (count($nodes_or_nids) == 0) {
    return $results;
  }

  foreach ($nodes_or_nids as &$node_or_nid) {
    if (is_object($node_or_nid)) {
      $node = $node_or_nid;
      $vid = $node->vid;
    }
    else {
      $vid = isset($vid[$node_or_nid]) ? $vid[$node_or_nid] : NULL;
      $node = node_load($node_or_nid, $vid);

      if (!is_object($node)) {
        if (empty($vid)) {
          $results['errors'][] = t("Failed to load node @nid.", array('@nid' => $node_or_nid));
        }
        else {
          $results['errors'][] = t("Failed to load node @nid, revision @vid.", array('@nid' => $node_or_nid, '@vid' => $vid));
        }

        continue;
      }

      $result = mcneese_validation_validate_action($node);

      if (!empty($result['errors'])) {
        $results['errors'] = array_merge($results['errors'], $result['errors']);
      }

      if (!empty($result['warnings'])) {
        $results['warnings'] = array_merge($results['warnings'], $result['warnings']);
      }

      if (!empty($result['passes'])) {
        $results['passes'] = array_merge($results['passes'], $result['passes']);
      }

      if (!empty($result['failures'])) {
        $results['failures'] = array_merge($results['failures'], $result['failures']);
      }
    }
  }

  return $results;
}

/**
 * Performs validation on the given node.
 *
 * @param object $node
 *   The node object to validate.
 *
 * @return array
 *   An array of test results with the following keys:
 *   - errors: An array containing errors that occured during processing.
 *   - warnings: An array containing warnings that occured during processing.
 *   - passes: An array of nodes that passed validation.
 *   - failures: An array of nodes that failed validation.
 */
function mcneese_validation_validate_action($node) {
  $results = array();
  $results['errors'] = array();
  $results['warnings'] = array();
  $results['passes'] = array();
  $results['failures'] = array();


  // process all fields associated with node.
  $fields = field_language('node', $node);

  foreach ($fields as $field => $language) {
    $info = field_info_field($field);

    // for now only process markup text fields (which does not include 'text').
    if (!($info['type'] == 'text_with_summary' || $info['type'] == 'text_long')) continue;
    if (!property_exists($node, $field)) continue;

    foreach ($node->{$field}[$language] as $row => $cell) {
      // skip formats that are known to be text-only.
      if ($cell['format'] == 'plain_text' || $cell['format'] == 'text_only') continue;


      // handle php code separately.
      if ($cell['format'] == 'php_code') {

      }
      else {
      }
    }


    $markup = '';
    $markup_results = mcneese_validation_validate_markup($markup);
    $results['errors'] = array_merge($results['errors'], $markup_results['errors']);
    $results['warnings'] = array_merge($results['warnings'], $markup_results['warnings']);
    $results['passes'] = array_merge($results['passes'], $markup_results['passes']);
    $results['failures'] = array_merge($results['failures'], $markup_results['failures']);
  }


  return $results;
}


/**
 * Performs validation on the given HTML markup.
 *
 * @param string $markup
 *   The html markup text to validate.
 *
 * @return array
 *   An array of test results with the following keys:
 *   - errors: An array containing errors that occured during processing.
 *   - warnings: An array containing warnings that occured during processing.
 *   - passes: An array of nodes that passed validation.
 *   - failures: An array of nodes that failed validation.
 */
function mcneese_validation_validate_markup($markup) {
  $results = array();
  $results['errors'] = array();
  $results['warnings'] = array();
  $results['passes'] = array();
  $results['failures'] = array();


  return $results;
}

/**
 * @} End of '@defgroup mcneese_validation McNeese Validation'.
 */
