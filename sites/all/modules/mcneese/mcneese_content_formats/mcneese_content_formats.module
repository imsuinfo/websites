<?php

/**
 * @file
 * McNeese State University Content Formats module.
 */

/**
 * @defgroup mcneese_content McNeese Content Formats
 * @{
 * Provides content formatting functionality and changes to drupal 7.
 */

/**
 * Implements hook_mcneese_content_permission_alter().
 */
function mcneese_content_formats_mcneese_content_permission_alter(&$permissions) {
  if (!is_array($permissions)) $permissions = array();

  $permissions['bypass deny abused codes'] = array(
    'title' => t("Bypass Deny Abused Codes"),
    'description' => t("Grants permissions to bypass the removal of abused codes for text formats in which the deny abused codes filter is enabled."),
  );

  $permissions['bypass allowed tags'] = array(
    'title' => t("Bypass Allowed Tags"),
    'description' => t("Grants permissions to bypass the restriction of saving content with unauthorized tags."),
  );
}

/**
 * Implements hook_mcneese_content_node_type_form_alter().
 */
function mcneese_content_formats_mcneese_content_node_type_form_alter(&$form, &$form_state, &$form_id) {
  if (empty($form_id)) return;

  $deny_abused_codes_default = variable_get('mcneese_content_formats_deny_abused_codes_' . $form['#node_type']->type, FALSE);
  $allowed_tags_default = variable_get('mcneese_content_formats_allowed_tags_' . $form['#node_type']->type, 'a abbr address area article aside audio base base bdi bdo blockquote br button canvas caption cite code col colgroup command datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure form h1 h2 h3 h4 h5 h6 header hr iframe img input ins kbd keygen label legend li link map mark menu meter nav noscript object ol optgroup option output p param pre progress q rp rt ruby s samp section select small source span strong sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr');
  $fix_links_default = variable_get('mcneese_content_formats_fix_links_' . $form['#node_type']->type, FALSE);
  $fix_markup_default = variable_get('mcneese_content_formats_fix_markup_' . $form['#node_type']->type, FALSE);

  $form['mcneese_content']['deny_abused_codes'] = array(
    '#type' => 'checkbox',
    '#title' => t("Deny Abused Codes"),
    '#default_value' => $deny_abused_codes_default,
    '#description' => t("This enables the denial of certain html codes that have been identified as commonly abused or mis-used by end-user."),
  );

  $form['mcneese_content']['allowed_tags'] = array(
    '#type' => 'textfield',
    '#title' => t("Allowed Tags"),
    '#maxlength' => 4096,
    '#default_value' => $allowed_tags_default,
    '#description' => t("This prevents saving content with tags that are not in this list. Set this to nothing to disable this functionality."),
  );

  $form['mcneese_content']['fix_links'] = array(
    '#type' => 'checkbox',
    '#title' => t("Fix Links"),
    '#default_value' => $fix_links_default,
    '#description' => t("This enables the correction of the mis-use of url links. This also updates older and no longer valid links to use the newer method. This currently only fixes a and img links."),
  );

  $form['mcneese_content']['fix_markup'] = array(
    '#type' => 'checkbox',
    '#title' => t("Fix Markup (declobber)"),
    '#default_value' => $fix_markup_default,
    '#description' => t("This enables the correction of the mis-use or non-proper HTML. In general, this partially cleans up some of the mess that comes from a copy and pasted word document (or similar)."),
  );
}

/**
 * Implements hook_mcneese_content_node_type_form_submit_alter().
 */
function mcneese_content_formats_mcneese_content_node_type_form_submit_alter($form, &$form_state) {
  if (!isset($form['#node_type']) && !is_object($form['#node_type'])) return;

  cf_settings_register('mcneese_content_formats_deny_abused_codes_' . $form['#node_type']->type, 'drupal_variables', 'mcneese_content_formats', TRUE);
  cf_settings_register('mcneese_content_formats_allowed_tags_' . $form['#node_type']->type, 'drupal_variables', 'mcneese_content_formats', TRUE);
  cf_settings_register('mcneese_content_formats_fix_links_' . $form['#node_type']->type, 'drupal_variables', 'mcneese_content_formats', TRUE);
  cf_settings_register('mcneese_content_formats_fix_markup_' . $form['#node_type']->type, 'drupal_variables', 'mcneese_content_formats', TRUE);

  if (isset($form_state['values']['mcneese_content']['deny_abused_codes']) && $form_state['values']['mcneese_content']['deny_abused_codes']) {
    variable_set('mcneese_content_formats_deny_abused_codes_' . $form['#node_type']->type, TRUE);
  }
  else {
    variable_set('mcneese_content_formats_deny_abused_codes_' . $form['#node_type']->type, FALSE);
  }

  if (isset($form_state['values']['mcneese_content']['allowed_tags'])) {
    variable_set('mcneese_content_formats_allowed_tags_' . $form['#node_type']->type, $form_state['values']['mcneese_content']['allowed_tags']);
  }
  else {
    variable_set('mcneese_content_formats_allowed_tags_' . $form['#node_type']->type, '');
  }

  if (isset($form_state['values']['mcneese_content']['fix_links']) && $form_state['values']['mcneese_content']['fix_links']) {
    variable_set('fix_links_' . $form['#node_type']->type, TRUE);
  }
  else {
    variable_set('mcneese_content_formats_fix_links_' . $form['#node_type']->type, FALSE);
  }

  if (isset($form_state['values']['mcneese_content']['fix_markup']) && $form_state['values']['mcneese_content']['fix_markup']) {
    variable_set('fix_markup_' . $form['#node_type']->type, TRUE);
  }
  else {
    variable_set('mcneese_content_formats_fix_markup_' . $form['#node_type']->type, FALSE);
  }
}

/**
 * Implements hook_node_validate().
 */
function mcneese_content_formats_node_validate($node) {
  $allowed_tags = variable_get('mcneese_content_formats_allowed_tags_' . $node->type, '');

  if (!empty($allowed_tags) && !user_access('bypass allowed tags')) {
    // at this time, this only focuses on the body tag for simplicity.
    // use the filter module text format to completely remove all instances of unallowed tags.
    // this is provided to make users aware of the problem.
    if (property_exists($node, 'body') && is_array($node->body)) {
      $allowed = explode(' ', $allowed_tags);

      foreach ($node->body as $language => &$language_value) {
        foreach ($language_value as $index => &$index_value) {
          if (!empty($index_value['summary'])) {
           // process things after the filter is generated.
            $markup = check_markup($index_value['summary'], $index_value['format']);

            $dom = new DOMDocument();
            @$dom->loadHTML('<!DOCTYPE html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>' . $markup . '</body></html>');

            if ($dom->hasChildNodes()) {
              $tags = array();
              $bodys = $dom->getElementsByTagName('body');
              if ($bodys->length > 0) {
                $body = $bodys->item(0);
                $tags = $body->getElementsByTagName('*');
              }

              foreach ($tags as $tag) {
                if (!in_array($tag->tagName, $allowed)) {
                  form_set_error('body', t('The HTML tag :tag is not allowed.', array(':tag' => $tag->tagName)));
                  watchdog('mcneese_content_formats', 'The HTML tag :tag is not allowed.', array(':tag' => $tag->tagName), WATCHDOG_ERROR);
                }
              }
            }

            unset($dom);
          }

          if (!empty($index_value['value'])) {
           // process things after the filter is generated.
            $markup = check_markup($index_value['value'], $index_value['format']);
            $dom = new DOMDocument();
            @$dom->loadHTML('<!DOCTYPE html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>' . $markup . '</body></html>');

            if ($dom->hasChildNodes()) {
              $tags = array();
              $bodys = $dom->getElementsByTagName('body');
              if ($bodys->length > 0) {
                $body = $bodys->item(0);
                $tags = $body->getElementsByTagName('*');
              }

              foreach ($tags as $tag) {
                if (!in_array($tag->tagName, $allowed)) {
                  form_set_error('body', t('The HTML tag :tag is not allowed.', array(':tag' => $tag->tagName)));
                  watchdog('mcneese_content_formats', 'The HTML tag :tag is not allowed.', array(':tag' => $tag->tagName), WATCHDOG_ERROR);
                }
              }
            }

            unset($dom);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function mcneese_content_formats_node_presave($node) {
  $deny_abused_codes_value = variable_get('mcneese_content_formats_deny_abused_codes_' . $node->type, FALSE);

  $deny_abused_codes = $deny_abused_codes_value && !user_access('bypass deny abused codes');
  $fix_links = variable_get('mcneese_content_formats_fix_links_' . $node->type, FALSE);
  $fix_markup = variable_get('mcneese_content_formats_fix_markup_' . $node->type, FALSE);

  $abused_codes = array();
  $abused_codes['&#34;'] = '"';
  $abused_codes['&#38;'] = '&amp;';
  $abused_codes['&#39;'] = '\'';
  $abused_codes['&#60;'] = '&lt;';
  $abused_codes['&#62;'] = '&gt;';
  $abused_codes['&quot;'] = '"';
  $abused_codes['&ndash;'] = '-';
  $abused_codes['&mdash;'] = '-';
  $abused_codes['&lsquo;'] = '\'';
  $abused_codes['&rsquo;'] = '\'';
  $abused_codes['&ldquo;'] = '"';
  $abused_codes['&rdquo;'] = '"';

  $node_variables = array_keys(get_object_vars($node));

  // at this time 'deny abused codes' is only applied to the body field (and its summary).
  // this does not pay attention to text formats.
  // if such flexibility is needed, then it will be added on a per-text-field basis.
  if (property_exists($node, 'body') && is_array($node->body)) {
    foreach ($node->body as $language => &$language_value) {
      foreach ($language_value as $index => &$index_value) {
        if (!empty($index_value['summary'])) {
          if ($deny_abused_codes) mcneese_content_formats_deny_abused_codes($abused_codes, $index_value['summary']);
          if ($fix_links) mcneese_content_formats_fix_links($index_value['summary']);
          if ($fix_markup) mcneese_content_formats_fix_markup($index_value['summary']);
        }

        if (!empty($index_value['value'])) {
          if ($deny_abused_codes) mcneese_content_formats_deny_abused_codes($abused_codes, $index_value['value']);
          if ($fix_links) mcneese_content_formats_fix_links($index_value['value']);
          if ($fix_markup) mcneese_content_formats_fix_markup($index_value['value']);
        }
      }
    }
  }
}

/**
 * Strip out used code from index.
 *
 * @param array $abused_code
 *   An array of codes and their replacements.
 * @param string $value
 *   The text to alter.
 */
function mcneese_content_formats_deny_abused_codes($abused_codes, &$value) {
  foreach ($abused_codes as $code => $replacement) {
    $replaced = preg_replace('|' . $code . '|i', $replacement, $value);

    if ($replaced !== FALSE) {
      $value = $replaced;
    }
  }
}

/**
 * Make changes to url links.
 *
 * @param string $value
 *   The text to alter.
 */
function mcneese_content_formats_fix_links(&$value) {
  $dom = new DOMDocument();
  $dom->preserveWhiteSpace = TRUE;
  $dom->formatOutput = TRUE;
  @$dom->loadHTML('<!DOCTYPE html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>' . $value . '</body></html>');
  $altered = FALSE;

  if ($dom->hasChildNodes()) {
    $a_links = array();
    $img_links = array();
    $bodys = $dom->getElementsByTagName('body');

    if ($bodys->length > 0) {
      $body = $bodys->item(0);
      $a_links = $body->getElementsByTagName('a');
      $img_links = $body->getElementsByTagName('img');
    }

    foreach ($a_links as $a_link) {
      if ($a_link->hasAttribute('href')) {
        $processed = mcneese_content_formats_get_correct_links($a_link->getAttribute('href'));

        if ($processed !== FALSE) {
          $a_link->setAttribute('href', $processed);
          $altered = TRUE;
        }
      }
    }

    foreach ($img_links as $img_link) {
      if ($img_link->hasAttribute('src')) {
        $processed = mcneese_content_formats_get_correct_links($img_link->getAttribute('src'));

        if ($processed !== FALSE) {
          $img_link->setAttribute('src', $processed);
          $altered = TRUE;
        }
      }
    }
  }

  if ($altered) {
    $value = $dom->saveHTML($body);

    // Remove the <body> and </body> parts
    $value = preg_replace('@(^<body>|</body>$)@i', '', $value);
  }
}

/**
 * Make changes to markup.
 *
 * @param string $value
 *   The text to alter.
 */
function mcneese_content_formats_fix_markup(&$value) {
  $dom = new DOMDocument();
  $dom->preserveWhiteSpace = TRUE;
  $dom->formatOutput = TRUE;
  @$dom->loadHTML('<!DOCTYPE html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head><body>' . $value . '</body></html>');
  $altered = FALSE;

  if (!$dom->hasChildNodes()) {
    return;
  }

  $a_links = array();
  $img_links = array();
  $bodys = $dom->getElementsByTagName('body');

  if ($bodys->length == 0) {
    return;
  }

  $body = $bodys->item(0);
  $b_tags = $body->getElementsByTagName('b');
  $i_tags = $body->getElementsByTagName('i');
  $strike_tags = $body->getElementsByTagName('strike');

  // replace b tags with strong
  foreach ($b_tags as $tag) {
    $parent = $tag->parentNode;
    $new_tag = $dom->createElement('strong');

    if ($tag->hasAttributes()) {
      foreach ($tag->attributes as $attribute) {
        $new_tag->setAttribute($attribute->name, $attribute->value);
      }
    }

    if ($tag->hasChildNodes()) {
      foreach ($tag->childNodes as $child) {
        $new_tag->appendChild($child);
        #$new_tag->appendChild($child->cloneNode(true));
      }
    }

    $parent->replaceChild($new_tag, $tag);
    $altered = TRUE;
  }

  // replace i tags with em
  foreach ($i_tags as $tag) {
    $parent = $tag->parentNode;
    $new_tag = $dom->createElement('em');

    if ($tag->hasAttributes()) {
      foreach ($tag->attributes as $attribute) {
        $new_tag->setAttribute($attribute->name, $attribute->value);
      }
    }

    if ($tag->hasChildNodes()) {
      foreach ($tag->childNodes as $child) {
        $new_tag->appendChild($child->cloneNode(TRUE));
      }
    }

    $parent->replaceChild($new_tag, $tag);
    $altered = TRUE;
  }

  // replace strike tags with del
  foreach ($strike_tags as $tag) {
    $parent = $tag->parentNode;
    $new_tag = $dom->createElement('del');

    if ($tag->hasAttributes()) {
      foreach ($tag->attributes as $attribute) {
        $new_tag->setAttribute($attribute->name, $attribute->value);
      }
    }

    if ($tag->hasChildNodes()) {
      foreach ($tag->childNodes as $child) {
        $new_tag->appendChild($child->cloneNode(TRUE));
      }
    }

    $parent->replaceChild($new_tag, $tag);
    $altered = TRUE;
  }

  // remove all unsupported tags, but preserve their content.
  foreach (array('font', 'basefont', 'big', 'center', 'dir', 'frame', 'noframes', 'tt') as $tag_name) {
    $unsupported_tags = $body->getElementsByTagName($tag_name);
    while ($unsupported_tags->length > 0) {
      foreach ($unsupported_tags as $tag) {
        mcneese_content_formats_remove_tag($tag);
        $altered = TRUE;
      }

      $unsupported_tags = $body->getElementsByTagName($tag_name);
    }
  }

  // remove span tags with lang=".." attribute, but preserve their content.
  $span_tags = $body->getElementsByTagName('span');
  foreach ($span_tags as $tag) {
    if ($tag->hasAttribute('lang')) {
      mcneese_content_formats_remove_tag($tag);
      $altered = TRUE;
    }
  }

  // remove common invalid attributes
  $all_tags = $body->getElementsByTagName('*');
  foreach ($all_tags as $tag) {
    // problems with paragraphs.
    if ($tag->tagName == 'p') {
      if ($tag->hasAttribute('style')) {
        $tag->removeAttribute('style');
        $altered = TRUE;
      }
    }

    // replace name with id (deprecate name tag).
    if ($tag->hasAttribute('name')) {
      $name_value = $tag->getAttribute('name');
      $tag->removeAttribute('name');
      $tag->setAttribute('id', $name_value);
      $altered = TRUE;
    }

    // strip out unsupported attributes.
    $unsupported = array();
    $unsupported[] = 'lang';
    $unsupported[] = 'align';
    $unsupported[] = 'valign';
    $unsupported[] = 'abbr';
    $unsupported[] = 'axis';
    $unsupported[] = 'bgcolor';
    $unsupported[] = 'char';
    $unsupported[] = 'charoff';
    $unsupported[] = 'nowrap';
    $unsupported[] = 'charset';
    foreach ($unsupported as $attr_name) {
      if ($tag->hasAttribute($attr_name)) {
        $tag->removeAttribute($attr_name);
        $altered = TRUE;
      }
    }

    // strip out attributes no longer supported in html 5 for specific tags.
    if ($tag->tagName == 'td') {
      $unsupported = array();
      $unsupported[] = 'height';
      $unsupported[] = 'scope';
      $unsupported[] = 'width';
      foreach ($unsupported as $attr_name) {
        if ($tag->hasAttribute($attr_name)) {
          $tag->removeAttribute($attr_name);
          $altered = TRUE;
        }
      }
    }


    // replace empty tags that are generally created to implement a line break
    if ($tag->tagName == 'p' || $tag->tagName == 'div' || $tag->tagName == 'h1' || $tag->tagName == 'h2' || $tag->tagName == 'h3' || $tag->tagName == 'h4' || $tag->tagName == 'h5' || $tag->tagName == 'h6') {
      if (!$tag->hasChildNodes()) {
        $parent = $tag->parentNode;
        $new_tag = $dom->createElement('br');
        $parent->replaceChild($new_tag, $tag);
        $altered = TRUE;
      }
    }

    // remove spans that have no attributes.
    if ($tag->tagName == 'span') {
      if (!$tag->hasAttributes()) {
        mcneese_content_formats_remove_tag($tag);
        $altered = TRUE;
      }
    }
  }


  if ($altered) {
    $value = $dom->saveHTML($body);

    // Remove the <body> and </body> parts
    $value = preg_replace('@(^<body>|</body>$)@i', '', $value);
  }
}

/**
 * Removes the tag and attaches its children to its parent.
 *
 * @param DOMNode $tag
 *   Tag to operate on.
 */
function mcneese_content_formats_remove_tag(DOMNode $tag) {
  if ($tag->hasChildNodes()) {
    $parent = $tag->parentNode;
    $children = array();

    foreach ($tag->childNodes as $child) {
      $children[] = $child;
    }

    foreach ($children as $child) {
      $removed_child = $tag->removeChild($child);

      if (is_object($removed_child)) {
        $parent->insertBefore($removed_child, $tag);
      }
    }
  }

  $parent->removeChild($tag);
}

/**
 * Interprets link and tries to replace it with proper link if applicable.
 *
 * @param string $url
 *   The url link to process.
 *
 * @return string|bool
 *   The updated url link or FALSE otherwise.
 */
function mcneese_content_formats_get_correct_links($url) {
  global $base_path;
  global $base_root;
  global $base_url;

  $default_redirect = variable_get('redirect_default_status_code', 301);
  $base = parse_url($base_url);
  $parsed = parse_url($url);
  $altered = FALSE;

  // only process known schemes
  if (!empty($parsed['scheme']) && !in_array($parsed['scheme'], array('http', 'https'))) {
    return FALSE;
  }

  // if either host or scheme is defined, then both must be defined.
  if (!empty($parsed['scheme']) && empty($parsed['host']) || empty($parsed['scheme']) && !empty($parsed['host'])) {
    return FALSE;
  }

  // if path is empty, then there is nothing to do.
  if (empty($parsed['host']) && empty($parsed['path'])) {
    return FALSE;
  }

  // fix local paths that use absolute links.
  if (!empty($parsed['host']) && $base['host'] == $parsed['host']) {
    if (empty($parsed['path'])) {
      unset($parsed['scheme']);
      unset($parsed['host']);
      $parsed['path'] = $base_path;
      $altered = TRUE;
    }
    elseif (preg_match('@^' . $base_path . '@i', $parsed['path'])) {
      unset($parsed['scheme']);
      unset($parsed['host']);
      $altered = TRUE;
    }
  }

  if (empty($parsed['scheme'])) {
    if (preg_match('@^' . $base_path . '@i', $parsed['path'])) {
      $path = rawurldecode(preg_replace('@^' . $base_path . '@i', '', $parsed['path']));

      // check to see if a url redirection exists for the given path.
      if (function_exists('redirect_url')) {
        $redirect = redirect_load_by_source($path);

        if (is_object($redirect)) {
          // only operate on 'found' and 'permanent' redirects.
          if ((empty($redirect->status_code) && ($default_redirect == 301 || $default_redirect == 302)) || $redirect->status_code == 301 || $redirect->status_code == 302) {
            $path = $redirect->redirect;
            $altered = TRUE;
          }
        }
      }

      // check to see what drupal returns for the given path.
      $source = drupal_lookup_path('source', $path);

      if (!empty($source)) {
        $path = $source;
        $altered = TRUE;
      }

      $parsed['path'] = $base_path . $path;
    }
  }

  // recombine url
  if ($altered) {
    $new_url = $parsed['path'];

    if (isset($parsed['query'])) {
      $new_url .= $parsed['query'];
    }

    if (isset($parsed['fragment'])) {
      $new_url .= $parsed['fragment'];
    }

    return $new_url;
  }

  return FALSE;
}

/**
 * @} End of '@defgroup mcneese_content_formats McNeese Content Formats'.
 */
