<?php

/**
 * @file
 * McNeese State University Content Management module.
 */

/**
 * @defgroup mcneese_management Content Management
 * @{
 * Provides control panel interface functionality for drupal 7.
 */


/**
 * Implements hook_init().
 */
function mcneese_management_init() {

  if (!empty($_GET['q'])) {
    mcneese_management_perform_redirect($_GET['q']);
  }
}

/**
 * Implements hook_permission().
 */
function mcneese_management_permission() {
  $permissions = array();

  $permissions['mcneese management emergency'] = array(
    'title' => t("Manage Emergency Content"),
    'description' => t("Grants permissions to manage emergency content."),
  );

  $permissions['mcneese management group leader'] = array(
    'title' => t("Manage Group Leaders"),
    'description' => t("Grants permissions to manage group leaders."),
  );

  $permissions['mcneese management reassign user'] = array(
    'title' => t("Re-assign Users Content"),
    'description' => t("Grants permissions to re-assign content assigned to one user to another user."),
  );

  $permissions['mcneese management redirects'] = array(
    'title' => t("Manage Redirects"),
    'description' => t("Grants permissions to manage special redirects."),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mcneese_management_menu() {
  $items = array();

  $items['admin/content/management/emergency'] = array(
    'title' => "Emergency",
    'description' => "View emergency status and manage emergency settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_emergency_settings_page'),
    'file' => 'mcneese_management_emergency_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management emergency'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/emergency/autocomplete_nid'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_nid',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management emergency'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/management/group_leader'] = array(
    'title' => "Group Leader",
    'description' => "View and manage group leader settings.",
    'page callback' => 'mcneese_management_group_leader_settings_page',
    'file' => 'mcneese_management_group_leader_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/group_leader/assign/%'] = array(
    'title' => "Group Leader",
    'description' => "Assign a group leader for some group.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_group_leader_operation_form', 5),
    'file' => 'mcneese_management_group_leader_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
  );

  $items['admin/content/management/group_leader/wiki_export'] = array(
    'title' => "Group Leader - Wiki Export",
    'description' => "Generates a FOSWiki formatted version of the group leader list.",
    'page callback' => 'mcneese_management_group_leader_wiki_export',
    'file' => 'mcneese_management_group_leader_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
  );

  $items['admin/content/management/group_leader/ajax/autocomplete/group_leader'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_user',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
  );

  $items['admin/content/management/reassign_user'] = array(
    'title' => "Re-Assign User",
    'description' => "Assign content associated with a particular user to another user.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_reassign_user_form', 5),
    'file' => 'mcneese_management_reassign_user_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management reassign user'),
  );

  $items['admin/content/management/reassign_user/ajax/autocomplete/reassign_user'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_user',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management reassign user'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/management/redirects'] = array(
    'title' => "Redirects",
    'description' => "View and manage special redirects for remote sites. This is not the standard redirect functionality and does not replace it.",
    'page callback' => 'mcneese_management_redirects_settings_page',
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/redirects/add'] = array(
    'title' => '',
    'description' => "Add a redirect.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_redirects_update_form', NULL),
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
  );

  $items['admin/content/management/redirects/update/%'] = array(
    'title' => '',
    'description' => "Change settings for a specific redirect.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_redirects_update_form', 5),
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
  );

  $items['admin/content/management/redirects/delete/%'] = array(
    'title' => '',
    'description' => "Delete a specific redirect.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_redirects_delete_form', 5),
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
  );

  return $items;
}

/**
 * Implements hook_node_presave().
 */
function mcneese_management_node_presave($node) {
  // assign the node uid as the group leader whenever field_group is available.
  if (property_exists($node, 'field_group')) {
    $access_id = $node->field_group['und'][0]['tid'];

    if (!empty($access_id)) {
      $leaders = variable_get('mcneese_management_group_leaders', array());

      if (isset($leaders[$access_id])) {
        $node->uid = $leaders[$access_id];
      }
      else {
        $fallback_uid = variable_get('mcneese_management_group_leader_unassigned', 1);
        $node->uid = $fallback_uid;
      }
    }
  }
}

/**
 * Generates the JS array for workbench node id autocomplete fields.
 *
 * This pulls the first 15 results that match the specified string.
 *
 * @param string $string
 *   A string to match node titles against.
 * @return array
 *   An array of string matches.
 */
function mcneese_management_autocomplete_nid($string) {
  if (!is_string($string)) {
    cf_error::not_string('string');

    return array();
  }

  $matches = array();
  $results = db_query_range('SELECT nid, title FROM {node} WHERE LOWER(title) LIKE LOWER(:string) ORDER BY title', 0, 9, array(':string' => $string . '%'));

  foreach ($results as $node) {
    $matches[$node->nid] = check_plain($node->title);
  }

  if (module_exists('devel')) {
    $GLOBALS['devel_shutdown'] = FALSE;
  }

  if (count($matches) < 9) {
    $results = db_query_range('SELECT nid, title FROM {node} WHERE LOWER(title) LIKE LOWER(:string) ORDER BY title', 0, 9 - count($matches), array(':string' => '%' . $string . '%'));

    foreach ($results as $node) {
      $matches[$node->nid] = check_plain($node->title);
    }
  }

  drupal_json_output($matches);
}

/**
 * Get the status of the emergency mode.
 *
 * @return bool
 *   TRUE when in emergency mode, FALSE otherwise.
 */
function mcneese_management_get_emergency_mode() {
  return variable_get('emergency_mode', FALSE);
}

/**
 * Get the node id of the emergency node.
 *
 * @return int
 *   The emergency node id.
 */
function mcneese_management_get_emergency_node() {
  return variable_get('emergency_node', 0);
}

/**
 * Set the status of the emergency mode.
 *
 * @param bool $emergency_mode
 *   TRUE to enable emergency mode, FALSE to disable.
 */
function mcneese_management_set_emergency_mode($emergency_mode) {
  if (is_bool($emergency_mode)) {
    $mode = $emergency_mode;
  }
  else if ($emergency_mode) {
    $mode = TRUE;
  }
  else {
    $mode = FALSE;
  }

  if ($mode == TRUE && !mcneese_management_get_emergency_node() > 0) {
    // cannot set emergency mode to TRUE if there is no emergency node defined.
    return;
  }

  $maintenance_mode = variable_get('maintenance_mode', FALSE);

  if ($mode == TRUE || $maintenance_mode != FALSE) {
    variable_set('maintenance_mode', $mode);
  }

  variable_set('emergency_mode', $mode);

  // caches must be flushed on mode change for the change to be noticed.
  _drupal_flush_css_js();
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  cache_clear_all(NULL, 'cache_block');
  cache_clear_all(NULL, 'cache_page');
  cache_clear_all(NULL, 'cache_menu');
}

/**
 * Set the node id of the emergency node.
 *
 * @param int $node_id
 *   The emergency node id.
 */
function mcneese_management_set_emergency_node($node_id) {
  variable_set('emergency_node', $node_id);
}

/**
 * Checks to see if the group leader dependencies are met.
 *
 * @return string|null
 *   When all dependencies are met, NULL is returned.
 *   A non-null string is returned when the dependencies have not been met.
 *   This string is the message explaining the reason for dependency failure.
 */
function mcneese_management_check_group_leader_dependencies() {
  if (!function_exists('workbench_access_get_access_tree') || !function_exists('workbench_menu_get_menus')) {
    return t("Group Leader settings are for sites that use the Workbench Access and the Workbench Menu modules. Enable Workbench Access module (taxonomy) and Workbench Menu module to utilize this functionality");
  }

  $access = workbench_access_get_access_tree();
  $active = workbench_access_get_active_tree();
  if (!$active) {
    return workbench_access_configuration_needed_message();
  }

  if ($active['access_scheme']['access_type'] != 'taxonomy') {
    return t("Group Leader settings require the Workbench Access to be using a taxonomy based access scheme.");
  }

  return NULL;
}

/**
 * Provide ajax autocomplete for users.
 */
function mcneese_management_autocomplete_user($username = '') {
  $matches = array();

  if (!is_string($username)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('username');
    }

    drupal_json_output($matches);
    return;
  }

  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'name'));
  $query->condition('u.name', db_like($username) . '%', 'ILIKE');
  $query->range(0, 10);
  $query->orderby('u.name');

  $results = (array) $query->execute()->fetchAll();
  foreach ($results as $result) {
    $value = $result->name . ' [uid:' . $result->uid. ']';
    $matches[$value] = check_plain($value);
  }

  $matched = count($matches);

  if ($matched < 9) {
    $query = db_select('users', 'u');
    $query->fields('u', array('uid', 'name'));
    $query->condition('u.name', '%' . db_like($username) . '%', 'ILIKE');
    $query->range(0, 10 - $matched);
    $query->orderby('u.name');

    $results = (array) $query->execute()->fetchAll();
    foreach ($results as $result) {
      $value = $result->name . ' [uid:' . $result->uid. ']';
      $matches[$value] = check_plain($value);
    }
  }

  drupal_json_output($matches);
}

/**
 * Assigns all content that belongs to a given goup to a specific user.
 *
 * @param int $access_id
 *   The numeric (taxonomy) access id of the group to update.
 * @param int $user_id
 *   The user id of the user to assign content to.
 *
 * @param bool
 *   Returns TRUE on success assignment of the user and FALSE otherwise.
 */
function mcneese_management_assign_group_leader($access_id, $user_id) {
  $dependency = mcneese_management_check_group_leader_dependencies();
  if (!is_null($dependency)) {
    return FALSE;
  }

  if (!cf_is_integer($access_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('access_id');
    }

    return FALSE;
  }


  // load all nodes that are assigned to a particular group.
  $query = db_select('workbench_access_node', 'wan');
  $query->fields('wan', array('nid'));
  $query->condition('access_id', $access_id);

  $executed = $query->execute();

  $nids = array();
  foreach ($executed as $result) {
    $nids[] = $result->nid;
  }

  // nothing to update.
  if (empty($nids)) {
    return TRUE;
  }

  return mcneese_management_assign_node_user($nids, $user_id);
}

/**
 * Assigns all specified nodes to the given user id.
 *
 * @param array $nids
 *   An array of node ids to have the new user id associated with.
 * @param int $user_id
 *   The user id of the user to assign content to.
 *
 * @param bool
 *   Returns TRUE on successfull assignment of the user and FALSE otherwise.
 */
function mcneese_management_assign_node_user($nids, $user_id) {
  if (!is_array($nids) || empty($nids)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('nids');
    }

    return FALSE;
  }

  if (!cf_is_integer($user_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('user_id');
    }

    return FALSE;
  }

  // check to see if the user exists.
  $query = db_select('users', 'u');
  $query->fields('u');
  $query->condition('u.uid', $user_id);
  $query->countQuery();

  $result = $query->execute()->fetchField();
  if ($result === FALSE) {
    return FALSE;
  }


  // apply changes
  $transaction = db_transaction();

  try {
    // now perform the operation.
    $query = db_update('node');
    $query->condition('nid', $nids, 'IN');
    $query->fields(array('uid' => $user_id));
    $query->execute();

    // enforce transaction execution
    unset($transaction);
  }
  catch (Exception $e) {
    $transaction->rollback();

    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  watchdog('mcneese', 'Reassigned the following nodes to the user @uid: @nids', array('@uid' => $user_id, '@nids' => print_r($nids, TRUE)), WATCHDOG_NOTICE);

  return TRUE;
}

/**
 * Loads all node ids assigned to a given user.
 *
 * @param int $user_id
 *   The user id of the user to assign content to.
 *
 * @param array
 *   Returns an array of node ids on success and FALSE otherwise.
 */
function mcneese_management_load_assigned_nids($user_id) {
  if (!cf_is_integer($user_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('user_id');
    }

    return FALSE;
  }

  // check to see if the user exists.
  $query = db_select('users', 'u');
  $query->fields('u');
  $query->condition('u.uid', $user_id);
  $query->countQuery();

  $result = $query->execute()->fetchField();
  if ($result === FALSE) {
    return FALSE;
  }


  // apply changes
  $nids = array();

  try {
    // now perform the operation.
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('uid', $user_id);
    $executed = $query->execute();

    foreach ($executed as $result) {
     $nids[] = $result->nid;
    }
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  return $nids;
}

/**
 * Try to perform a redirect for the specified path.
 *
 * @param string $local_path
 *   The local url path to redirect from.
 */
function mcneese_management_perform_redirect($local_path) {
  $redirect = NULL;

  try {
    // now perform the operation.
    $query = db_select('mcneese_management_redirects', 'mmr');
    $query->fields('mmr');
    $query->condition('status', 0, '>');
    $query->condition('source', db_like($local_path), 'ILIKE');

    $executed = $query->execute();
    $redirect = $executed->fetchAssoc();
  }
  catch (Exception $e) {
    $transaction->rollback();

    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  if (empty($redirect)) return;

  global $user;

  if ($user->uid > 0) {
    if ($redirect['logged_in'] == 0) {
      return;
    }
    elseif ($redirect['logged_in'] == 1) {
      drupal_set_title("Redirection Disabled for Logged in User.");
      drupal_deliver_page($redirect['failsafe_message']);
      drupal_exit();
    }
  }

  if ($redirect['status'] == 3) {
    drupal_set_title("Unable to Redirect");
    drupal_deliver_page($redirect['alert_message']);
    drupal_exit();
  }
  elseif ($redirect['status'] == 2) {
    drupal_set_title("Destination Under Maintenance");
    drupal_deliver_page($redirect['maintenance_message']);
    drupal_exit();
    drupal_exit();
  }

  if (headers_sent()) {
    drupal_set_title("Redirection Failed");
    drupal_deliver_page($redirect['failsafe_message']);
    drupal_exit();
  }

  // perform redirect using 302 (found).
  header('Location: ' . $redirect['destination'], TRUE, 302);
  drupal_exit($redirect['destination']);
}


/**
 * @} End of '@defgroup mcneese_management Content Management'.
 */
