<?php

/**
 * @file
 * McNeese State University Content Management module.
 */

/**
 * @defgroup mcneese_management Content Management
 * @{
 * Provides control panel interface functionality for drupal 7.
 */


/**
 * Implements hook_init().
 */
function mcneese_management_init() {

  if (!empty($_GET['q'])) {
    mcneese_management_perform_redirect($_GET['q']);
  }
}

/**
 * Implements hook_permission().
 */
function mcneese_management_permission() {
  $permissions = array();

  $permissions['mcneese management emergency'] = array(
    'title' => t("Manage Emergency Content"),
    'description' => t("Grants permissions to manage emergency content."),
  );

  $permissions['mcneese management group leader'] = array(
    'title' => t("Manage Group Leaders"),
    'description' => t("Grants permissions to manage group leaders."),
  );

  $permissions['mcneese management reassign user'] = array(
    'title' => t("Re-assign Users Content"),
    'description' => t("Grants permissions to re-assign content assigned to one user to another user."),
  );

  $permissions['mcneese management redirects'] = array(
    'title' => t("Manage Redirects"),
    'description' => t("Grants permissions to manage special redirects."),
  );

  $permissions['mcneese management templates'] = array(
    'title' => t("Manage Templates"),
    'description' => t("Grants permissions to access the manage templates content."),
  );

  $permissions['mcneese management templates manage'] = array(
    'title' => t("Manage Templates - Management"),
    'description' => t("Grants permissions to create, edit, or delete templates."),
  );

  $permissions['mcneese management templates use'] = array(
    'title' => t("Manage Templates - Use"),
    'description' => t("Grants permissions to use templates for creating content."),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function mcneese_management_menu() {
  $items = array();

  $items['admin/content/management/emergency'] = array(
    'title' => "Emergency",
    'description' => "View emergency status and manage emergency settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_emergency_settings_page'),
    'file' => 'mcneese_management_emergency_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management emergency'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/emergency/autocomplete_nid'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_nid',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management emergency'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/management/group_leader'] = array(
    'title' => "Group Leader",
    'description' => "View and manage group leader settings.",
    'page callback' => 'mcneese_management_group_leader_settings_page',
    'file' => 'mcneese_management_group_leader_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/group_leader/assign/%'] = array(
    'title' => "Group Leader",
    'description' => "Assign a group leader for some group.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_group_leader_operation_form', 5),
    'file' => 'mcneese_management_group_leader_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
  );

  $items['admin/content/management/group_leader/wiki_export'] = array(
    'title' => "Group Leader - Wiki Export",
    'description' => "Generates a FOSWiki formatted version of the group leader list.",
    'page callback' => 'mcneese_management_group_leader_wiki_export',
    'file' => 'mcneese_management_group_leader_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
  );

  $items['admin/content/management/group_leader/ajax/autocomplete/group_leader'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_user',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management group leader'),
  );

  $items['admin/content/management/reassign_user'] = array(
    'title' => "Re-Assign User",
    'description' => "Assign content associated with a particular user to another user.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_reassign_user_form', 5),
    'file' => 'mcneese_management_reassign_user_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management reassign user'),
  );

  $items['admin/content/management/reassign_user/ajax/autocomplete/reassign_user'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_user',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management reassign user'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/content/management/redirects'] = array(
    'title' => "Redirects",
    'description' => "View and manage special redirects for remote sites. This is not the standard redirect functionality and does not replace it.",
    'page callback' => 'mcneese_management_redirects_settings_page',
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/redirects/add'] = array(
    'title' => '',
    'description' => "Add a redirect.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_redirects_update_form', NULL),
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
  );

  $items['admin/content/management/redirects/update/%'] = array(
    'title' => '',
    'description' => "Change settings for a specific redirect.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_redirects_update_form', 5),
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
  );

  $items['admin/content/management/redirects/delete/%'] = array(
    'title' => '',
    'description' => "Delete a specific redirect.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_redirects_delete_form', 5),
    'file' => 'mcneese_management_redirects_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management redirects'),
  );

  $items['admin/content/management/template'] = array(
    'title' => "Templates",
    'description' => "Templates provide quick and simple ways to create content.",
    'page callback' => 'mcneese_management_templates_page',
    'file' => 'mcneese_management_templates_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/template/use'] = array(
    'title' => "Available Templates",
    'description' => "Template usage overview page.",
    'page callback' => 'mcneese_management_templates_use_page',
    'file' => 'mcneese_management_templates_use_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates use'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/template/use/list/%'] = array(
    'title' => "List Nodes",
    'description' => "List all nodes using a given template",
    'page callback' => 'mcneese_management_templates_use_list_page',
    'page arguments' => array(6),
    'file' => 'mcneese_management_templates_use_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates use'),
  );

  $items['admin/content/management/template/use/add/%'] = array(
    'title' => "Use Template",
    'description' => "Create a new template usage.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_use_add_form', 6),
    'file' => 'mcneese_management_templates_use_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates use'),
  );

  $items['node/add/%/template/%'] = array(
    'title' => "Use Template",
    'description' => "Create a new template usage.",
    'file' => 'mcneese_management_templates_use_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_use_add_form', 4, 2),
    'access callback' => 'mcneese_management_template_use_node_access',
    'access arguments' => array('create', 2, 4),
  );

  $items['node/%node/template'] = array(
    'title' => "Template",
    'description' => "Edit an existing used template.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_use_edit_form', 1),
    'file' => 'mcneese_management_templates_use_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'mcneese_management_template_use_node_access',
    'access arguments' => array('update', 1),
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/content/management/template/manage'] = array(
    'title' => "Manage Templates",
    'description' => "Management page for created, editing, and deleting templates.",
    'page callback' => 'mcneese_management_templates_manage_page',
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/template/manage/add'] = array(
    'title' => "Create Template",
    'description' => "Create a new template.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_manage_edit_form'),
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
  );

  $items['admin/content/management/template/manage/edit/%'] = array(
    'title' => "Edit Template",
    'description' => "Edit an existing template.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_manage_edit_form', 6),
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
  );

  $items['admin/content/management/template/manage/delete/%'] = array(
    'title' => "Delete Template",
    'description' => "Delete an existing template.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_manage_delete_form', 6),
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
  );

  $items['admin/content/management/template/manage/user/%'] = array(
    'title' => "Manage Template Users",
    'description' => "Management user access for a given template.",
    'page callback' => 'mcneese_management_templates_manage_user_page',
    'page arguments' => array(6),
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
    'tab_parent' => 'admin/content/management',
  );

  $items['admin/content/management/template/manage/user/add/%'] = array(
    'title' => "Grant User Access to Template",
    'description' => "Allows a specified user to use a given template.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_manage_user_add_form', 7),
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
  );

  $items['admin/content/management/template/manage/user/delete/%/%'] = array(
    'title' => "Delete Granted User Access to Template",
    'description' => "Remove a users granted access to a given template..",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcneese_management_templates_manage_user_delete_form', 7, 8),
    'file' => 'mcneese_management_templates_manage_page.inc',
    'file path' => drupal_get_path('module', 'mcneese_management') . '/pages',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
  );

  $items['admin/content/management/template/ajax/autocomplete/user'] = array(
    'title' => '',
    'page callback' => 'mcneese_management_autocomplete_user',
    'access callback' => 'user_access',
    'access arguments' => array('mcneese management templates manage'),
  );

  return $items;
}

/**
 * Implements hook_node_load().
 */
function mcneese_management_node_load($nodes, $types) {
  if (!is_array($nodes)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('nodes', $nodes);
    }
    return;
  }

  $all_nodes = array();
  foreach($nodes as $key => $node){
    $all_nodes[$node->nid] = &$nodes[$key];
  }


  if (empty($all_nodes)) return;

  $all = mcneese_management_template_load_node_data(array_keys($all_nodes));

  foreach ($all as $association) {
    $all_nodes[$association->node_id]->mcneese_management_template = array(
      'id' => $association->template_id,
      'data' => unserialize($association->data),
    );
  }
}

/**
 * Implements hook_node_presave().
 */
function mcneese_management_node_presave($node) {
  // assign the node uid as the group leader whenever field_group is available.
  if (property_exists($node, 'field_group')) {
    $access_id = NULL;
    if (isset($node->field_group['und'][0]['tid'])) {
      $tid = trim($node->field_group['und'][0]['tid']);
      if (cf_is_integer($tid)) {
        $access_id = $tid;
      }
    }

    if (!empty($access_id)) {
      $leaders = variable_get('mcneese_management_group_leaders', array());

      if (isset($leaders[$access_id])) {
        $node->uid = $leaders[$access_id];
      }
      else {
        $fallback_uid = variable_get('mcneese_management_group_leader_unassigned', 1);
        $node->uid = $fallback_uid;
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function mcneese_management_node_insert($node) {
  // When saving the node, if the mcneese_template property exists, then save the node id in the template database.
  if (property_exists($node, 'mcneese_management_template')) {
    if (cf_is_integer($node->mcneese_management_template['id'])) {
      $fields = array();
      $fields['template_id'] = $node->mcneese_management_template['id'];
      $fields['node_id'] = $node->nid;
      $fields['data'] = serialize($node->mcneese_management_template['data']);
      $update = FALSE;

      try {
        $query = db_select('mcneese_management_template_node', 'mmtn');
        $query->fields('mmtn');
        $query->condition('node_id', $node->nid);
        $query->countQuery();

        $result = $query->execute()->fetchField();

        if ($result > 0) {
          $update = TRUE;
        }
      }
      catch (Exception $e) {
        if (class_exists('cf_error')) {
          cf_error::on_query_execution($e);
        }

        throw $e;
      }

      $transaction = db_transaction();

      try {
        if ($update) {
          $query = db_update('mcneese_management_template_node');
          $query->condition('node_id', $node->nid);
          $query->fields($fields);
          $query->execute();
        }
        else {
          $query = db_insert('mcneese_management_template_node');
          $query->fields($fields);
          $query->execute();
        }
      }
      catch (Exception $e) {
        $transaction->rollback();
        cf_error::on_query_execution($e);

        throw $e;
      }
    }
    else {
      if (class_exists('cf_error')) {
        cf_error::invalid_numeric('node->mcneese_management_template[id]');
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function mcneese_management_node_update($node) {
  return mcneese_management_node_insert($node);
}

/**
 * Implements hook_node_delete().
 */
function mcneese_management_node_delete($node) {
  if (!is_object($node)){
    if (class_exists('cf_error')) {
      cf_error::invalid_object('node');
    }
    return;
  }

  try {
    $query = db_delete('mcneese_management_template_node');
    $query->condition('node_id', $node->nid);
    $query->execute();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }
}

/**
 * Implements hook_user_delete().
 */
function mcneese_management_user_delete($user) {
  if (!is_object($user)){
    if (class_exists('cf_error')) {
      cf_error::invalid_object('user');
    }
    return;
  }

  try {
    $query = db_delete('mcneese_management_template_user');
    $query->condition('user_id', $user->uid);
    $query->execute();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }
}

/**
 * Generates the JS array for workbench node id autocomplete fields.
 *
 * This pulls the first 15 results that match the specified string.
 *
 * @param string $string
 *   A string to match node titles against.
 * @return array
 *   An array of string matches.
 */
function mcneese_management_autocomplete_nid($string) {
  if (!is_string($string)) {
    cf_error::not_string('string');

    return array();
  }

  $matches = array();
  $results = db_query_range('SELECT nid, title FROM {node} WHERE LOWER(title) LIKE LOWER(:string) ORDER BY title', 0, 9, array(':string' => $string . '%'));

  foreach ($results as $node) {
    $matches[$node->nid] = check_plain($node->title);
  }

  if (module_exists('devel')) {
    $GLOBALS['devel_shutdown'] = FALSE;
  }

  if (count($matches) < 9) {
    $results = db_query_range('SELECT nid, title FROM {node} WHERE LOWER(title) LIKE LOWER(:string) ORDER BY title', 0, 9 - count($matches), array(':string' => '%' . $string . '%'));

    foreach ($results as $node) {
      $matches[$node->nid] = check_plain($node->title);
    }
  }

  drupal_json_output($matches);
}

/**
 * Get the status of the emergency mode.
 *
 * @return bool
 *   TRUE when in emergency mode, FALSE otherwise.
 */
function mcneese_management_get_emergency_mode() {
  return variable_get('emergency_mode', FALSE);
}

/**
 * Get the node id of the emergency node.
 *
 * @return int
 *   The emergency node id.
 */
function mcneese_management_get_emergency_node() {
  return variable_get('emergency_node', 0);
}

/**
 * Set the status of the emergency mode.
 *
 * @param bool $emergency_mode
 *   TRUE to enable emergency mode, FALSE to disable.
 */
function mcneese_management_set_emergency_mode($emergency_mode) {
  if (is_bool($emergency_mode)) {
    $mode = $emergency_mode;
  }
  else if ($emergency_mode) {
    $mode = TRUE;
  }
  else {
    $mode = FALSE;
  }

  if ($mode == TRUE && !mcneese_management_get_emergency_node() > 0) {
    // cannot set emergency mode to TRUE if there is no emergency node defined.
    return;
  }

  $maintenance_mode = variable_get('maintenance_mode', FALSE);

  if ($mode == TRUE || $maintenance_mode != FALSE) {
    variable_set('maintenance_mode', $mode);
  }

  variable_set('emergency_mode', $mode);

  // caches must be flushed on mode change for the change to be noticed.
  _drupal_flush_css_js();
  drupal_clear_css_cache();
  drupal_clear_js_cache();
  cache_clear_all(NULL, 'cache_block');
  cache_clear_all(NULL, 'cache_page');
  cache_clear_all(NULL, 'cache_menu');
}

/**
 * Set the node id of the emergency node.
 *
 * @param int $node_id
 *   The emergency node id.
 */
function mcneese_management_set_emergency_node($node_id) {
  variable_set('emergency_node', $node_id);
}

/**
 * Checks to see if the group leader dependencies are met.
 *
 * @return string|null
 *   When all dependencies are met, NULL is returned.
 *   A non-null string is returned when the dependencies have not been met.
 *   This string is the message explaining the reason for dependency failure.
 */
function mcneese_management_check_group_leader_dependencies() {
  if (!function_exists('workbench_access_get_access_tree') || !function_exists('workbench_menu_get_menus')) {
    return t("Group Leader settings are for sites that use the Workbench Access and the Workbench Menu modules. Enable Workbench Access module (taxonomy) and Workbench Menu module to utilize this functionality");
  }

  $access = workbench_access_get_access_tree();
  $active = workbench_access_get_active_tree();
  if (!$active) {
    return workbench_access_configuration_needed_message();
  }

  if ($active['access_scheme']['access_type'] != 'taxonomy') {
    return t("Group Leader settings require the Workbench Access to be using a taxonomy based access scheme.");
  }

  return NULL;
}

/**
 * Provide ajax autocomplete for users.
 */
function mcneese_management_autocomplete_user($username = '') {
  $matches = array();

  if (!is_string($username)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_string('username');
    }

    drupal_json_output($matches);
    return;
  }

  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'name'));
  $query->condition('u.name', db_like($username) . '%', 'ILIKE');
  $query->range(0, 10);
  $query->orderby('u.name');

  $results = (array) $query->execute()->fetchAll();
  foreach ($results as $result) {
    $value = $result->name . ' [uid:' . $result->uid. ']';
    $matches[$value] = check_plain($value);
  }

  $matched = count($matches);

  if ($matched < 9) {
    $query = db_select('users', 'u');
    $query->fields('u', array('uid', 'name'));
    $query->condition('u.name', '%' . db_like($username) . '%', 'ILIKE');
    $query->range(0, 10 - $matched);
    $query->orderby('u.name');

    $results = (array) $query->execute()->fetchAll();
    foreach ($results as $result) {
      $value = $result->name . ' [uid:' . $result->uid. ']';
      $matches[$value] = check_plain($value);
    }
  }

  drupal_json_output($matches);
}

/**
 * Assigns all content that belongs to a given goup to a specific user.
 *
 * @param int $access_id
 *   The numeric (taxonomy) access id of the group to update.
 * @param int $user_id
 *   The user id of the user to assign content to.
 *
 * @param bool
 *   Returns TRUE on success assignment of the user and FALSE otherwise.
 */
function mcneese_management_assign_group_leader($access_id, $user_id) {
  $dependency = mcneese_management_check_group_leader_dependencies();
  if (!is_null($dependency)) {
    return FALSE;
  }

  if (!cf_is_integer($access_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('access_id');
    }

    return FALSE;
  }


  // load all nodes that are assigned to a particular group.
  $query = db_select('workbench_access_node', 'wan');
  $query->fields('wan', array('nid'));
  $query->condition('access_id', $access_id);

  $executed = $query->execute();

  $nids = array();
  foreach ($executed as $result) {
    $nids[] = $result->nid;
  }

  // nothing to update.
  if (empty($nids)) {
    return TRUE;
  }

  return mcneese_management_assign_node_user($nids, $user_id);
}

/**
 * Assigns all specified nodes to the given user id.
 *
 * @param array $nids
 *   An array of node ids to have the new user id associated with.
 * @param int $user_id
 *   The user id of the user to assign content to.
 *
 * @param bool
 *   Returns TRUE on successfull assignment of the user and FALSE otherwise.
 */
function mcneese_management_assign_node_user($nids, $user_id) {
  if (!is_array($nids) || empty($nids)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('nids');
    }

    return FALSE;
  }

  if (!cf_is_integer($user_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('user_id');
    }

    return FALSE;
  }

  // check to see if the user exists.
  $query = db_select('users', 'u');
  $query->fields('u');
  $query->condition('u.uid', $user_id);
  $query->countQuery();

  $result = $query->execute()->fetchField();
  if ($result === FALSE) {
    return FALSE;
  }


  // apply changes
  $transaction = db_transaction();

  try {
    // now perform the operation.
    $query = db_update('node');
    $query->condition('nid', $nids, 'IN');
    $query->fields(array('uid' => $user_id));
    $query->execute();

    // enforce transaction execution
    unset($transaction);
  }
  catch (Exception $e) {
    $transaction->rollback();

    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  watchdog('mcneese', 'Reassigned the following nodes to the user @uid: @nids', array('@uid' => $user_id, '@nids' => print_r($nids, TRUE)), WATCHDOG_NOTICE);

  return TRUE;
}

/**
 * Loads all node ids assigned to a given user.
 *
 * @param int $user_id
 *   The user id of the user to assign content to.
 *
 * @param array
 *   Returns an array of node ids on success and FALSE otherwise.
 */
function mcneese_management_load_assigned_nids($user_id) {
  if (!cf_is_integer($user_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('user_id');
    }

    return FALSE;
  }

  // check to see if the user exists.
  $query = db_select('users', 'u');
  $query->fields('u');
  $query->condition('u.uid', $user_id);
  $query->countQuery();

  $result = $query->execute()->fetchField();
  if ($result === FALSE) {
    return FALSE;
  }


  // apply changes
  $nids = array();

  try {
    // now perform the operation.
    $query = db_select('node', 'n');
    $query->fields('n', array('nid'));
    $query->condition('uid', $user_id);
    $executed = $query->execute();

    foreach ($executed as $result) {
     $nids[] = $result->nid;
    }
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  return $nids;
}

/**
 * Try to perform a redirect for the specified path.
 *
 * @param string $local_path
 *   The local url path to redirect from.
 */
function mcneese_management_perform_redirect($local_path) {
  $redirect = NULL;

  try {
    // now perform the operation.
    $query = db_select('mcneese_management_redirects', 'mmr');
    $query->fields('mmr');
    $query->condition('status', 0, '>');
    $query->condition('source', db_like($local_path), 'ILIKE');

    $executed = $query->execute();
    $redirect = $executed->fetchAssoc();
  }
  catch (Exception $e) {
    $transaction->rollback();

    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  if (empty($redirect)) return;

  $alert = unserialize($redirect['alert_message']);
  $maintenance = unserialize($redirect['maintenance_message']);
  $failsafe = unserialize($redirect['failsafe_message']);

  $user = cf_current_user();

  if ($user->uid > 0) {
    if ($redirect['logged_in'] == 0) {
      return;
    }
    elseif ($redirect['logged_in'] == 1) {
      drupal_set_title("Redirection Disabled for Logged in User.");
      drupal_deliver_page(check_markup($failsafe['value'], $failsafe['format']));
      drupal_exit();
    }
  }

  if ($redirect['status'] == 3) {
    drupal_set_title("Unable to Redirect");
    drupal_deliver_page(check_markup($alert['value'], $alert['format']));
    drupal_exit();
  }
  elseif ($redirect['status'] == 2) {
    drupal_set_title("Destination Under Maintenance");
    drupal_deliver_page(check_markup($maintenance['value'], $maintenance['format']));
    drupal_exit();
    drupal_exit();
  }

  if (headers_sent()) {
    drupal_set_title("Redirection Failed");
    drupal_deliver_page(check_markup($failsafe['value'], $failsafe['format']));
    drupal_exit();
  }

  // perform redirect using 302 (found).
  header('Location: ' . $redirect['destination'], TRUE, 302);
  drupal_exit($redirect['destination']);
}

/**
 * Loads the requested template.
 *
 * @param int $template_id
 *   The numeric id representing the template.
 *
 * @return object|bool
 *   The requested template object.
 *   FALSE is returned on failure.
 */
function mcneese_management_template_load_template($template_id) {
  if (!cf_is_integer($template_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('template_id');
    }

    return FALSE;
  }

  try {
    $query = db_select('mcneese_management_template', 'mmt');
    $query->fields('mmt');
    $query->condition('id', $template_id);

    $result = $query->execute()->fetchObject();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  if (!is_object($result)) {
    return FALSE;
  }

  $result->data = unserialize($result->data);

  return $result;
}

/**
 * Returns user access for using a templates for a given content type.
 *
 * @param string $op
 *   Select the operation to check, such as 'create', 'update', 'delete'.
 * @param string $node
 *   This is either the content type or a node object.
 * @param null|int $template_id
 *   The numeric id of the template to validate against.
 *   This is required for 'create' operations but is not needed for 'update'
 *   or 'delete' operations.
 * @param string $user_id
 *   (optional) user id of the user to perform access check against.
 *   When unspecified, this will use the current user.
 *
 * @see node_access()
 */
function mcneese_management_template_use_node_access($op, $node, $template_id = NULL, $user_id = NULL) {
  if (!is_null($user_id) && !cf_is_integer($user_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('user_id');
    }

    return FALSE;
  }

  if (is_null($user_id)) {
    $user = cf_current_user();
  }
  else {
    $user = user_load($user_id);
  }

  if (!is_object($user)) {
    return FALSE;
  }

  if (!user_access('mcneese management templates use')) {
    return FALSE;
  }

  if ($op == 'create') {
    if (!mcneese_management_template_user_access($user->uid, $template_id)) {
      return FALSE;
    }
  }
  else {
    if (!is_object($node)) return FALSE;
    if (!property_exists($node, 'mcneese_management_template')) return FALSE;

    try {
      $query = db_select('mcneese_management_template_user', 'mmtu');
      $query->fields('mmtu', array('template_id'));
      $query->condition('template_id', $node->mcneese_management_template['id']);
      $query->condition('user_id', $user->uid);
      $query->countQuery();

      $result = $query->execute()->fetchField();

      if ($result == 0) return FALSE;
    }
    catch (Exception $e) {
      if (class_exists('cf_error')) {
        cf_error::on_query_execution($e);
      }
      return FALSE;
    }
  }

  return node_access($op, $node, $user);
}

/**
 * Gets the access status of the user for a specific template.
 *
 * @param int $user_id
 *   The numeric id of the user to validate with.
 * @param int $template_id
 *   The numeric id of the template to validate against.
 */
function mcneese_management_template_user_access($user_id, $template_id) {
  if (!cf_is_integer($user_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('user_id');
    }

    return FALSE;
  }

  if (!cf_is_integer($template_id)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_numeric('template_id');
    }

    return FALSE;
  }

  $user = user_load($user_id);

  if (!is_object($user)) {
    return FALSE;
  }

  try {
    $query = db_select('mcneese_management_template_user', 'mmtu');
    $query->fields('mmtu', array('user_id'));
    $query->condition('template_id', $template_id);
    $query->condition('user_id', $user_id);
    $query->countQuery();

    $result = $query->execute()->fetchField();

    if ($result > 0) {
      return TRUE;
    }
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }
  }

  return FALSE;
}

/**
 * Builds the form specified by a given template.
 *
 * This determines what the template input fields are.
 * This is used for both new and existing nodes.
 *
 * @param array $form
 *   The form settings.
 *
 * @return array|bool
 *   An array populated in accordance to the drupal form api.
 *   FALSE is returned on failure.
 */
function mcneese_management_template_build_form(&$form) {
  if (!is_array($form)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form');
    }

    return;
  }

  $form['settings']['template'] = array();
  $form['settings']['template']['#tree'] = TRUE;
  $form['settings']['template']['fields'] = array('#tree' => TRUE);
  $form['settings']['template']['targets'] = array('#tree' => TRUE);

  $form['dom'] = array(
    '#type' => 'value',
    '#value' => new cf_dom(TRUE, TRUE, TRUE, $form['template']['#value']->data['template']),
  );

  $form['body'] = array(
    '#type' => 'value',
    '#value' => $form['dom']['#value']->get_body(),
  );

  $form['defaults'] = array(
    '#type' => 'value',
    '#value' => array(),
  );

  if (is_null($form['body']['#value'])) {
    return array();
  }

  $weight = 0;
  $ti_tags = $form['body']['#value']->getElementsByTagName('ti');
  $available_ti_tags = array();

  if ($ti_tags->length == 0) {
    return array();
  }

  if (isset($form['node']['#value']->mcneese_management_template['data'])) {
    $node_template_data = &$form['node']['#value']->mcneese_management_template['data'];
  }
  else {
    $node_template_data = array();
  }

  $ti_tag = $ti_tags->item(0);
  unset($ti_tags);

  if ($ti_tag->hasChildNodes()) {
    foreach ($ti_tag->childNodes as $ti_tag) {
      if (!property_exists($ti_tag, 'tagName') || empty($ti_tag->tagName)) {
        continue;
      }

      if (!preg_match('/^ti_/i', $ti_tag->tagName)) {
        continue;
      }

      if (!$ti_tag->hasAttribute('type')) {
        continue;
      }

      $available_ti_tags[$ti_tag->tagName] = $ti_tag;
      $ti_tag->setAttribute('weight', $weight);
      $weight++;
    }
  }
  unset($ti_tag);

  $tit_tags = $form['body']['#value']->getElementsByTagName('tit');
  if (!empty($available_ti_tags) && $tit_tags->length > 0) {
    foreach($tit_tags as $tit_tag) {
      if (!property_exists($tit_tag, 'tagName') || empty($tit_tag->tagName)) continue;
      if (!$tit_tag->hasAttribute('field')) continue;

      $field_name = $tit_tag->getAttribute('field');
      if (empty($field_name)) continue;

      $field_type = 'normal';
      if ($tit_tag->hasAttribute('type')) {
        $field_type = $tit_tag->getAttribute('type');
      }

      $field_format = '';
      if ($tit_tag->hasAttribute('format')) {
        $field_format = $tit_tag->getAttribute('format');
      }

      $wrap_with_span = FALSE;
      if ($field_type == 'textarea') {
        $wrap_with_span = TRUE;
      }

      $targets = array_reverse(explode('][', $field_name));
      $target_name = array_pop($targets);

      if (property_exists($form['node']['#value'], $target_name)) {
        $current = &$form['node']['#value']->$target_name;
        $current_name = $target_name;

        while (!empty($targets)) {
          $current_name = array_pop($targets);
          $current = &$current[$current_name];
        }

        foreach ($available_ti_tags as $ati_name => $ati_tag) {
          $found_tags = $tit_tag->getElementsByTagName($ati_name);

          // internally stored values always override any values stored directly onto node fields
          $assign_default = TRUE;
          if (isset($node_template_data[$ati_tag->tagName])) {
            if (is_array($node_template_data[$ati_tag->tagName]) && isset($node_template_data[$ati_tag->tagName]['value'])) {
              $ati_tag->setAttribute('default_value', $node_template_data[$ati_tag->tagName]['value']);
              $assign_default = FALSE;
            }
            else {
              $ati_tag->setAttribute('default_value', $node_template_data[$ati_tag->tagName]);
              $assign_default = FALSE;
            }
          }

          if ($found_tags->length > 0) {
            if ($wrap_with_span) {
              $new_dom = new cf_dom(TRUE, TRUE, TRUE, $current);
              $new_body = $new_dom->get_body();
              $current_tags = $new_body->getElementsByTagName('span');

              if ($current_tags->length > 0) {
                $matched = FALSE;
                foreach ($current_tags as $current_tag) {
                  if (!$current_tag->hasAttribute('class')) continue;
                  $current_tag_class = $current_tag->getAttribute('class');

                  if ($assign_default && preg_match('/\b' . $ati_name . '\b/i', $current_tag_class) > 0) {
                    $matched = TRUE;

                    if ($current_tag->hasChildNodes()) {
                      $default_value = '';
                      foreach ($current_tag->childNodes as $current_tag_child) {
                        $default_value .= $new_dom->get_dom()->saveHTML($current_tag_child);
                      }
                      $ati_tag->setAttribute('default_value', $default_value);
                    }
                    else {
                      $ati_tag->setAttribute('default_value', '');
                    }

                    break;
                  }
                }

                if ($matched) {
                  $form['settings']['template']['fields'][$ati_name] = mcneese_management_template_build_tag($form, $form['dom']['#value'], $ati_tag);
                }
              }
            }
            else {
              if ($assign_default) {
                $ati_tag->setAttribute('default_value', $current);
              }
              $form['settings']['template']['fields'][$ati_name] = mcneese_management_template_build_tag($form, $form['dom']['#value'], $ati_tag);
            }
          }
        }
      }

      foreach ($available_ti_tags as $ati_name => $ati_tag) {
        if (!isset($form['settings']['template']['fields'][$ati_name])) {
          $form['settings']['template']['fields'][$ati_name] = mcneese_management_template_build_tag($form, $form['dom']['#value'], $ati_tag);
        }
      }
    }
  }
}

/**
 * Translate tag dom entries into drupal form input fields.
 *
 * This is used for generating the template form input fields.
 *
 * @param array $form
 *   The form information.
 * @param cf_dom $dom
 *   The dom object containing the passed tag.
 * @param DOMElement $tag
 *   The HTML DOM tag to convert into a drupal form field.
 *
 * @return array
 *   The generated form field or an empty array on error.
 */
function mcneese_management_template_build_tag($form, $dom, $tag) {
  if (!is_array($form)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form');
    }

    return array();
  }

  if (!($dom instanceOf cf_dom)) {
    return array();
  }

  if (!($tag instanceOf DOMNode)) {
    return array();
  }

  // first deal with reserved attributes.
  $field = array();
  if ($tag->hasAttribute('type')) {
    $field['#type'] = $tag->getAttribute('type');
  }

  // 'type' attribute is required.
  if (empty($field['#type'])) {
    return array();
  }


  // process supported types.
  $supported_types = array();
  $supported_types[] = 'select';
  $supported_types[] = 'textarea';
  $supported_types[] = 'textfield';
  $supported_types[] = 'text_format';
  $supported_types[] = 'checkbox';

  # special case / reserved types
  $supported_types[] = 'field_group';

  if (!in_array($field['#type'], $supported_types)) {
    return array();
  }


  // process supported attributes.
  $supported_attributes = array();
  $supported_attributes[] = 'cols';
  $supported_attributes[] = 'default_value';
  $supported_attributes[] = 'empty_value';
  $supported_attributes[] = 'empty_option';
  $supported_attributes[] = 'maxlength';
  $supported_attributes[] = 'options'; // has to be serialized!
  $supported_attributes[] = 'prefix';
  $supported_attributes[] = 'required';
  $supported_attributes[] = 'resizable';
  $supported_attributes[] = 'rows';
  $supported_attributes[] = 'size';
  $supported_attributes[] = 'suffix';
  $supported_attributes[] = 'title';
  $supported_attributes[] = 'title_display';
  $supported_attributes[] = 'weight';
  $supported_attributes[] = 'wysiwyg';
  $supported_attributes[] = 'preserve';

  $boolean_attributes = array();
  $boolean_attributes[] = 'required';
  $boolean_attributes[] = 'resizable';
  $boolean_attributes[] = 'wysiwyg';
  $boolean_attributes[] = 'preserve';

  foreach ($supported_attributes as $attribute) {
    if (!$tag->hasAttribute($attribute)) continue;

    // handle attributes that must be serialized.
    if ($attribute == 'options') {
      $field['#' . $attribute] = unserialize($tag->getAttribute($attribute));
    }
    elseif (in_array($attribute, $boolean_attributes)) {
      $field['#' . $attribute] = (bool) $tag->getAttribute($attribute);
    }
    else {
      $field['#' . $attribute] = $tag->getAttribute($attribute);
    }
  }

  $field['#description'] = $tag->nodeValue;

  // provide this as a way to ensure the original type is not lost for special field types.
  $field['#ti_field_type'] = $field['#type'];


  // process special cases / reserved
  if ($field['#type'] == 'field_group') {
    $field['#field_name'] = $tag->tagName;
    $field['#entity_type'] = 'taxonomy_term_reference';
    $field['#maxlength'] = 1024;
    $field['#language'] = 'und';
    $field['#element_validate'] = array();

    if ($tag->hasAttribute('default_value')) {
      $default_value = $tag->getAttribute('default_value');
      $term = taxonomy_term_load($default_value);
      $field['#default_value'] = $term->name . ' [tid: ' . $term->tid . ']';
    }

    if (empty($field['#description'])) {
      $field['#description'] = "Select the proper editorial group for this content. Multiple groups may be selected.";
      $field['#description'] .= " See " . '<a href="' . url('admin/workbench/sections') . '">' . "My Sections" . '</a>' . " for a list of possible values.";
    }

    $default_group = NULL;
    if (!isset($field['#default_value']) && isset($form['user']['#value'])) {
      if (property_exists($form['user']['#value'], 'field_user_default_group') && !empty($form['user']['#value']->field_user_default_group)) {
        $term = taxonomy_term_load($form['user']['#value']->field_user_default_group);
        $field['#default_value'] = $term->name . ' [tid: ' . $term->tid . ']';
      }
      elseif (property_exists($form['user']['#value'], 'workbench_access')) {
        if (count($form['user']['#value']->workbench_access) == 1) {
          $keys = array_keys($form['user']['#value']->workbench_access);
          $term = taxonomy_term_load(reset($keys));
          $field['#default_value'] = $term->name . ' [tid: ' . $term->tid . ']';
        }
      }
    }

    if (function_exists('term_ref_autocomplete_field_widget_form')) {
      $field['#type'] = 'term_ref_autocomplete_field';
      $field['#autocomplete_path'] = 'term_ref_autocomplete/autocomplete/field_group';
      $field['#element_validate'][] = 'term_ref_autocomplete_taxonomy_autocomplete_validate';
    }
    else {
      $field['#type'] = 'textfield';
      $field['#autocomplete_path'] = 'workbench_access/taxonomy_autocomplete/field_group/' . $form['node']['#value']->type;
      $field['#element_validate'][] = 'taxonomy_autocomplete_validate';
      $field['#element_validate'][] = 'workbench_access_autocomplete_validate';
    }
  }

  return $field;
}

/**
 * Populates and Validates the form state.
 *
 * This is explicitly designed to be called inside of a
 * hook_form_validate9) function.
 *
 * @param array $form
 *   The form settings.
 * @param array $form_state
 *   The form state.
 *
 * @return array|bool
 *   An array populated in accordance to the drupal form api.
 *   FALSE is returned on failure.
 */
function mcneese_management_template_process_form_state($form, &$form_state) {
  if (!is_array($form)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form');
    }

    return;
  }

  if (!is_array($form_state)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form_state');
    }

    return;
  }

  if (!isset($form['node']['#value']) || !is_object($form['node']['#value'])) {
    return;
  }

  if (!isset($form['body']['#value']) || !is_object($form['body']['#value'])) {
    return;
  }

  $form['settings']['template']['built'] = array();
  $form_state['node'] = $form['node']['#value'];
  $form_state['unused'] = array();

  $template_fields = array();
  $template_values = &$form_state['values']['settings']['template']['fields'];

  $overwritten_fields = array();

  foreach ($form['settings']['template']['fields'] as $ti_name => &$ti_field) {
    $first_char = substr($ti_name, 0, 1);
    if ($first_char == '#') continue;

    $template_fields[$ti_name] = $ti_field;
    $form_state['unused'][$ti_name] = $template_values[$ti_name];
  }

  $tit_tags = $form['body']['#value']->getElementsByTagName('tit');
  if ($tit_tags->length > 0) {
    foreach($tit_tags as $tit_tag) {
      if (!property_exists($tit_tag, 'tagName') || empty($tit_tag->tagName)) continue;
      if (!$tit_tag->hasAttribute('field')) continue;

      $field_name = $tit_tag->getAttribute('field');
      if (empty($field_name)) continue;

      $field_type = 'normal';
      if ($tit_tag->hasAttribute('type')) {
        $field_type = $tit_tag->getAttribute('type');
      }

      $field_format = '';
      if ($tit_tag->hasAttribute('format')) {
        $field_format = $tit_tag->getAttribute('format');
      }

      $wrap_with_span = FALSE;
      if ($field_type == 'textarea') {
        $wrap_with_span = TRUE;
      }

      $targets = array_reverse(explode('][', $field_name));
      $target_name = array_pop($targets);


      // replace all template input fields with their respective content.
      foreach ($template_fields as $ti_name => &$ti_field) {
        $value = '';

        $tags_in_use = $tit_tag->getElementsByTagName($ti_name);
        if ($tags_in_use->length > 0 && !(isset($template_fields[$ti_name]['#preserve']) && $template_fields[$ti_name]['#preserve']) ) {
          unset($form_state['unused'][$ti_name]);
        }
        unset($tags_in_use);

        // handle special case tags.
        if (isset($ti_field['#ti_field_type']) && $ti_field['#ti_field_type'] == 'field_group') {
          if (cf_is_integer($template_values[$ti_name])) {
            $value = $template_values[$ti_name];
          }
          else {
            $matched = array();
            $matches = preg_match('/\[tid:\s*(\d+)\]/i', $template_values[$ti_name], $matched);

            if ($matches) {
              $value = $matched[1];
            }
          }
        }
        elseif (is_array($template_values[$ti_name]) && isset($template_values[$ti_name]['value'])) {
          $value = $template_values[$ti_name]['value'];
        }
        elseif (is_string($template_values[$ti_name])) {
          $value = $template_values[$ti_name];
        }
        elseif (is_integer($template_values[$ti_name])) {
          $value = $template_values[$ti_name];
        }
        else {
          form_set_error('', "Unsupported value for " . check_plain($ti_name) . ". Report this error to the webmaster: " . check_plain(print_r($template_values[$ti_name], TRUE)));
        }

        $tif_tags = $tit_tag->getElementsByTagName('tif');
        foreach ($tif_tags as $tif_tag) {
          if (mcneese_management_template_process_template_if($form, $form_state, $tif_tag, $template_fields, $template_values)) {
            $form['dom']['#value']->remove_element($tif_tag);
          }
          else {
            $parent = $tif_tag->parentNode;
            $parent->removeChild($tif_tag);
          }
        }

        $ti_tags = $tit_tag->getElementsByTagName($ti_name);
        foreach ($ti_tags as $ti_tag) {
          $parent = $ti_tag->parentNode;

          if (isset($ti_field['#wysiwyg']) && $ti_field['#wysiwyg'] || isset($ti_field['#markup']) && $ti_field['#markup']) {
            if ($wrap_with_span) {
              $new_dom = new cf_dom(TRUE, TRUE, TRUE, '<span class="' . $ti_name . '">' . $value . '</span>');
            }
            else {
              $new_dom = new cf_dom(TRUE, TRUE, TRUE, $value);
            }

            $new_tag = $form['dom']['#value']->get_dom()->importNode($new_dom->get_body(), TRUE);
            $parent->insertBefore($new_tag, $ti_tag);
          }
          else {
            if ($wrap_with_span) {
              $span = $form['dom']['#value']->get_dom()->createElement('span', $value); 
              $span->setAttribute('class', $ti_name);
              $parent->insertBefore($span, $ti_tag);
            }
            else {
              $text = new DOMText();
              $text->appendData($value);
              $parent->insertBefore($text, $ti_tag);
            }
          }

          $parent->removeChild($ti_tag);
        }
      }


      // handle special case template input target tags
      $generated = NULL;
      if ($tit_tag->hasAttribute('type')) {
        $tag_type = $tit_tag->getAttribute('type');

        if ($tag_type == 'array') {
          $generated = array();
          if ($tit_tag->hasChildNodes()) {
            foreach ($tit_tag->childNodes as $child_tag) {
              if (!property_exists($child_tag, 'tagName') || $child_tag->tagName != 'tiv' || !$child_tag->hasAttribute('key')) {
                continue;
              }

              $key_type = NULL;
              if ($child_tag->hasAttribute('key_type')) {
                $key_type = $child_tag->getAttribute('key_type');

                if ($key_type != 'int') {
                  $key_type = NULL;
                }
              }

              if ($key_type == 'int') {
                $key = (int) $child_tag->getAttribute('key');
              }
              else {
                $key = (string) $child_tag->getAttribute('key');
              }
              $value = '';

              if ($child_tag->hasChildNodes()) {
                foreach ($child_tag->childNodes as $tiv_tag) {
                  $value .= $form['dom']['#value']->get_dom()->saveHTML($tiv_tag);
                }
              }
              $generated[$key] = $value;
            }
          }
        }
      }


      // load the markup value
      if (is_null($generated)) {
        if ($tit_tag->hasChildNodes()) {
          foreach ($tit_tag->childNodes as $child_tag) {
            $generated .= $form['dom']['#value']->get_dom()->saveHTML($child_tag);
          }
        }
      }


      // prepare the field value
      if (!isset($overwritten_fields[$target_name])) {
        $form_state['node']->$target_name = NULL;

        // override the existing stored settings, but do not override changes from this template.
        $overwritten_fields[$target_name] = TRUE;
      }
      $current = &$form_state['node']->$target_name;

      if (empty($targets)) {
        $current = $generated;
      }

      while (!empty($targets)) {
        $current_name = array_pop($targets);

        if (empty($targets)) {
          $current[$current_name] = $generated;

          if ($field_type == 'textfield') {
            $current = array();
            $current['format'] = $field_format;
            $current['safe_value'] = NULL;
          }
          elseif ($field_type == 'textarea') {
            $current['summary'] = NULL;
            $current['format'] = $field_format;

            // requuire format and enforce a default if not specified.
            if (empty($current['format'])) {
              $current['format'] = 'full_html';
            }
          }
          elseif ($field_type == 'date') {
            $current['timezone'] = NULL;
            $current['timezone_db'] = NULL;
            $current['date_type'] = NULL;
            // @todo: date fields are not yet fully implemented.
          }
        }
        else {
          if (!isset($current[$current_name])) {
            $current[$current_name] = NULL;
          }

          $current = &$current[$current_name];
        }
      }
    }
  }
}

/**
 * Populates and Validates the form state.
 *
 * This is explicitly designed to be called inside of a
 * hook_form_validate9) function.
 *
 * @param array $form
 *   The form settings.
 * @param array $form_state
 *   The form state.
 * @param DOMElement $tif_Tag
 *   The element that is assumed to be a tif.
 * @param array $template_fields
 *   A collection of all of the template fields available.
 * @param array $template_values
 *   A collection of all of the template values for each available field.
 *
 * @return bool
 *   FALSE on failure or TRUE/FALSE depending on the results of the tif
 *   condition test.
 */
function mcneese_management_template_process_template_if($form, &$form_state, $tif_tag, $template_fields, $template_values) {
  if (!is_array($form)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form');
    }

    return FALSE;
  }

  if (!is_array($form_state)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('form_state');
    }

    return FALSE;
  }

  if (!is_object($tif_tag)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_object('tif_tag');
    }

    return FALSE;
  }

  if (!is_array($template_fields)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('template_fields');
    }

    return FALSE;
  }

  if (!is_array($template_values)) {
    if (class_exists('cf_error')) {
      cf_error::invalid_array('template_values');
    }

    return FALSE;
  }

  if ($tif_tag->hasAttribute('target')) {
    $target = $tif_tag->getAttribute('target');
  }
  else {
    return FALSE;
  }

  if ($tif_tag->hasAttribute('type')) {
    $type = $tif_tag->getAttribute('type');
  }
  else {
    return FALSE;
  }

  $right_value = NULL;
  if (is_array($template_values[$target]) && isset($template_values[$target]['value'])) {
    $right_value = $template_values[$target]['value'];
  }
  else {
    $right_value = $template_values[$target];
  }

  $left_value = NULL;
  if ($tif_tag->hasAttribute('value')) {
    $left_value = $tif_tag->getAttribute('value');
  }

  if ($type == 'not_empty') {
    return !empty($right_value);
  }
  elseif ($type == 'empty') {
    return empty($right_value);
  }
  elseif ($type == '>') {
    if (!is_numeric($right_value)) return FALSE;
    if (!is_numeric($left_value)) return FALSE;
    return $left_value > $right_value;
  }
  elseif ($type == '<') {
    if (!is_numeric($left_value[$target])) return FALSE;
    if (!is_numeric($left_value)) return FALSE;
    return $left_value < $left_value[$target];
  }
  elseif ($type == '>=') {
    if (!is_numeric($left_value[$target])) return FALSE;
    if (!is_numeric($left_value)) return FALSE;
    return $left_value >= $left_value[$target];
  }
  elseif ($type == '<=') {
    if (!is_numeric($left_value[$target])) return FALSE;
    if (!is_numeric($left_value)) return FALSE;
    return $left_value <= $left_value[$target];
  }
  elseif ($type == '==') {
    if (!is_numeric($left_value[$target])) return FALSE;
    if (!is_numeric($left_value)) return FALSE;
    return $left_value == $left_value[$target];
  }
  elseif ($type == '!=') {
    if (!is_numeric($left_value[$target])) return FALSE;
    if (!is_numeric($left_value)) return FALSE;
    return $left_value != $left_value[$target];
  }

  return FALSE;
}

/**
 * Validates a username/uid stored in a form_state field.
 *
 * This is intended to be used directly from a hook_*_validate() function.
 *
 * @param string $form_state_field
 *   The user name or user id.
 *   This is usually the form state field.
 *
 * @return bool|int
 *   Returns the user id on success, FALSE otherwise.
 */
function mcneese_management_validate_user(&$form_state_field) {
  if (empty($form_state_field)) {
    return FALSE;
  }

  $user_id = NULL;
  $matches = array();

  if (cf_is_integer($form_state_field)) {
    $matches[1] = $form_state_field;
    $matched = TRUE;
  }
  else {
    $matched = preg_match('/ \[uid:(\d+)]\s*$/i', $form_state_field, $matches);
  }

  if ($matched) {
    // check to see if the user exists.
    $query = db_select('users', 'u');
    $query->fields('u');
    $query->condition('u.uid', $matches[1]);
    $query->countQuery();

    $result = $query->execute()->fetchField();

    if ($result === FALSE) {
      return FALSE;
    }

    $user_id = $matches[1];
  }
  else {

    // if a username was specified but no id, then try getting the uid.
    $query = db_select('users', 'u');
    $query->fields('u', array('uid'));
    $query->condition('u.name', $form_state_field);

    $result = $query->execute()->fetchField();

    if ($result === FALSE) {
      return FALSE;
    }

    $user_id = $result;
    $form_state_field .= ' [uid:' . $user_id . ']';
  }

  return $user_id;
}

/**
 * Loads Template information for the specified node ids.
 *
 * @param array $nids
 *   An array of node ids.
 *   If $taxonomy_id is specified, then this may be left empty to load all
 *   available nodes for that taxonomy_id.
 *
 * @return array
 *   An array of template data.
 */
function mcneese_management_template_load_node_data($nids) {
  if (!is_array($nids)){
    if (class_exists('cf_error')) {
      cf_error::invalid_array('nids');
    }
    return array();
  }

  if (empty($nids)) return array();

  try {
    $query = db_select('mcneese_management_template_node', 'mmtn');
    $query->fields('mmtn');
    $query->condition('node_id', $nids, 'IN');

    $executed = $query->execute();
    return $executed->fetchAll();
  }
  catch (Exception $e) {
    if (class_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }

  return array();
}

/**
 * @} End of '@defgroup mcneese_management Content Management'.
 */
