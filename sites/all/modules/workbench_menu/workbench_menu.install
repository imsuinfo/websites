<?php

/**
 * @file
 * Install file for workbench_menu module.
 */

/**
 * Implementation of hook_schema().
 */
function workbench_menu_schema() {
  $schema = array();

  $t = get_t();

  $schema['workbench_menus'] = array(
    'description' => $t("Menus defined in the workbench module."),
    'fields' => array(
      'id' => array(
        'description' => $t("The primary key used to represent a menu."),
        'type' => 'serial',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'access_id' => array(
        'description' => $t("The workbench access id from {workbench_access}.access_id, which may be non-numeric."),
        'type' => 'varchar',
        'length' => 80,
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'description' => $t("The base path in which this menu listens on."),
        'type' => 'varchar',
        'length' => 127,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => $t("Menu weight."),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'show_parents' => array(
        'description' => $t("A boolean defining whether or not the parents should be visible."),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TRUE,
      ),
      'hidden' => array(
        'description' => $t("A boolean defining whether or not this menu should be automatically visible."),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'breadcrumb_name' => array(
        'description' => $t("An optional custom breadcrumb name to use instead of the taxonomy term name."),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'access_id' => array('access_id'),
    ),
    'foreign keys' => array(
      'access_id' => array(
        'table' => 'workbench_access',
        'columns' => array('access_id' => 'access_id'),
      ),
    ),
  );

  foreach (array('expand', 'item_type') as $name) {
    cf_db_options_create_options_schema('workbench_menu', $name, $schema);

    $schema['workbench_menu_' . $name . 's'] = array(
      'description' => $t("Menu properties of type $name"),
      'fields' => array(
        'item_id' => array(
          'description' => $t("The workbench menu id from {workbench_menu}.id."),
          'type' => 'int',
          'size' => 'big',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
        $name . '_id' => array(
          'description' => $t("The options id from {" . 'workbench_menu_options_' . $name . "}.id."),
          'type' => 'int',
          'size' => 'big',
          'unsigned' => TRUE,
          'not null' => TRUE,
        ),
      ),
      'foreign keys' => array(
        'menu_id' => array(
          'table' => 'workbench_menus',
          'columns' => array('menu_id' => 'id'),
        ),
        $name . '_id' => array(
          'table' => 'workbench_menu_options_' . $name,
          'columns' => array($name . '_id' => 'id'),
        ),
      ),
    );
  }

  $schema['workbench_menu_items'] = array(
    'description' => $t("Menus items defined in the workbench module."),
    'fields' => array(
      'id' => array(
        'description' => $t("The primary key used to represent a menu item."),
        'type' => 'serial',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'menu_id' => array(
        'description' => $t("The workbench menu id from {workbench_menu}.id."),
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'parent_id' => array(
        'description' => $t("The workbench menu parent id from {workbench_menu_items}.id."),
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'human_name' => array(
        'description' => $t("This is the human-friendly name used to represent the menu item."),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => '',
      ),
      'parent_id' => array(
        'description' => $t("The workbench menu parent id from {workbench_menu_items}.id."),
        'type' => 'int',
        'size' => 'big',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => $t("Menu item weight within menu."),
        'type' => 'int',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => 0,
      ),
      'active_path' => array(
        'description' => $t("This is the path in which this menu item belongs on."),
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'default' => '',
      ),
      'properties' => array(
        'description' => $t("Stores additional data whose content is directly dependent on the item type."),
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
    'foreign keys' => array(
      'menu_id' => array(
        'table' => 'workbench_menus',
        'columns' => array('menu_id' => 'id'),
      ),
    ),
  );

  // workaround mysql's violation of the SQL standard in a way that does not break standards-compliant databases.
  // @see https://dev.mysql.com/doc/refman/5.6/en/data-type-defaults.html
  // @see https://bugs.mysql.com/bug.php?id=25520
  // @see https://drupal.org/node/1401782
  // @see https://drupal.org/node/143881
  if (db_driver() == 'mysql') {
    unset($schema['workbench_menus']['fields']['breadcrumb_name']['default']);
    unset($schema['workbench_menu_items']['fields']['human_name']['default']);
    unset($schema['workbench_menu_items']['fields']['active_path']['default']);
    unset($schema['workbench_menu_items']['fields']['properties']['default']);
  }

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function workbench_menu_install() {
  $t = get_t();

  try {
    $expand = array();

    $expand[] = array(
      'machine_name' => 'expand_always',
      'human_name' => $t("Always Expand"),
      'description' => $t("The menu item will always be expanded."),
    );

    $expand[] = array(
      'machine_name' => 'expand_auto',
      'human_name' => $t("Auto Expand"),
      'description' => $t("The menu item will expanded, unless told otherwise."),
    );

    $expand[] = array(
      'machine_name' => 'expand_never',
      'human_name' => $t("Never Expand"),
      'description' => $t("The menu item will never be expanded."),
    );

    cf_db_options_add_options('workbench_menu', 'expand', $expand);


    $item_type = array();

    $item_type[] = array(
      'machine_name' => 'item_node',
      'human_name' => $t("Node"),
      'description' => $t("Links to an internal node path found on this website."),
    );

    $item_type[] = array(
      'machine_name' => 'item_link',
      'human_name' => $t("Link"),
      'description' => $t("Links to a path found on this or some other website."),
    );

    $item_type[] = array(
      'machine_name' => 'item_label',
      'human_name' => $t("Label"),
      'description' => $t("Displays text that does not a link to anything."),
    );

    $item_type[] = array(
      'machine_name' => 'item_file',
      'human_name' => $t("File"),
      'description' => $t("Links to a file available on this website."),
    );

    $item_type[] = array(
      'machine_name' => 'item_menu',
      'human_name' => $t("Menu"),
      'description' => $t("Represents and loads another menu."),
    );

    $item_type[] = array(
      'machine_name' => 'item_menu_item',
      'human_name' => $t("Menu Item"),
      'description' => $t("Represents and loads a menu item from another menu."),
    );

    cf_db_options_add_options('workbench_menu', 'item_type', $item_type);
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }
}

/**
 * Implementation of hook_enable().
 */
function workbench_menu_enable() {
  if (variable_get('workbench_access', 'taxonomy') != 'taxonomy') {
    return;
  }

  workbench_access_reset_tree();
  $wa = workbench_access_get_active_tree();

  try {
    foreach ($wa['active'] as $access_id => &$value) {
      if (!is_numeric($access_id)) continue;

      $query = db_select('workbench_menus', 'wm');
      $query->fields('wm');
      $query->condition('wm.access_id', $access_id);

      $records = (array) $query->execute()->fetchAll();

      if (empty($records)) {
        $query = db_insert('workbench_menus');
        $query->fields(array('access_id' => $access_id, 'path' => ''));
        $query->execute();
      }
    }
  }
  catch (Exception $e) {
    if (module_exists('cf_error')) {
      cf_error::on_query_execution($e);
    }

    throw $e;
  }
}
