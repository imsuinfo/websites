<?php


define('LDAP_FEEDS_FETCHER_SIZELIMIT', 50);
/**
 * Implementation of hook_feeds_plugins().
 */
function ldap_feeds_feeds_plugins() {

  $path = drupal_get_path('module', 'ldap_feeds');
  $info = array();

  $info['FeedsLdapQueryFetcher'] = array(
    'name' => 'LDAP Query Fetcher',
    'description' => 'DOES NOT WORK.  Included for development purposes only.  Fetch content from ldap query',
    'handler' => array(
      'parent' => 'FeedsFetcher', // This is the key name, not the class name.
      'class' => 'FeedsLdapQueryFetcher',
      'file' => 'FeedsLdapQueryFetcher.inc',
      'path' => $path,
    ),
  );

  $info['FeedsLdapEntryParser'] = array(
    'name'        => t('LDAP Entry Parser for Feeds'),
    'description' => t('DOES NOT WORK.  Included for development purposes only.  Parse an LDAP Entry Array'),
    'handler'     => array(
      'parent' => 'FeedsParser',
      'class'  => 'FeedsLdapEntryParser',
      'file'   => 'FeedsLdapEntryParser.inc',
      'path'   => $path,
    ),
  );


  return $info;

  /**
   * this feed would be specific to drupal ldap authenticated or otherwise ldap identified users
   * with the main use case being user profile or other user data synching from ldap to drupal
   * it would use the FeedsLdapEntryParse.
   */

  /**
  $info['FeedsLdapDrupalUserFetcher'] = array(
    'name' => 'LDAP Drupal User Fetcher',
    'description' => 'Fetch LDAP data associated with LDAP Authenticated users',
    'handler' => array(
      'parent' => 'FeedsFetcher', // This is the key name, not the class name.
      'class' => 'FeedsDrupalUserFetcher',
      'file' => 'FeedsLdapDrupalUserFetcher.inc',
      'path' => $path,
    ),
  );
  **/

//dpm($info);


}

/**
 * Implements hook_enable().
 *
 * Clear Feed's plugin cache so that this plugin shows up.
 */
function ldap_feeds_enable() {
  cache_clear_all('plugins:feeds:plugins', 'cache');
}
