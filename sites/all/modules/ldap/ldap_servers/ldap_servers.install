<?php
// $Id: ldap_servers.install,v 1.5.2.1 2011/02/08 06:01:00 johnbarclay Exp $

/**
 * @file
 * Install, update and uninstall functions for the LDAP API module.
 */


/**
 * Implements hook_install().
 */
function ldap_servers_install() {
  variable_set('ldap_servers_encryption', LDAP_SERVERS_ENC_TYPE_CLEARTEXT);
  variable_set('ldap_servers_require_ssl_for_credentails', 0);

  if (! ($key = variable_get('ldap_servers_encrypt_key', NULL))) {
    require_once('ldap_servers.encryption.inc');
    $key = ldap_servers_random_salt(10);
    variable_set('ldap_servers_encrypt_key', $key);
  }

}

/**
 * Implements hook_uninstall().
 */
function ldap_servers_uninstall() {
  variable_del('ldap_servers_encryption');
  variable_del('ldap_servers_require_ssl_for_credentails');
  variable_del('ldap_servers_encrypt_key');

}
/**
 * Implements hook_requirements().
 */
function ldap_servers_requirements($phase) {
  $requirements = array();
  $requirements['ldap_extension_loaded']['title'] = t('LDAP Extension Loaded');
  if (extension_loaded('ldap')) {
    $requirements['ldap_extension_loaded']['value'] = t('Passed');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_OK;
  }
  else {
    $requirements['ldap_extension_loaded']['value'] = t('Failed');
    $requirements['ldap_extension_loaded']['severity'] = REQUIREMENT_ERROR;
    $requirements['ldap_extension_loaded']['description'] = t('No LDAP Extension is loaded for PHP, so LDAP will not work properly.');
  }

  if (db_table_exists('ldapauth')) {
    $requirements['ldap_servers_ldap_integration']['title'] = t('LDAP Integration LDAP Auth to LDAP Servers Upgrade Concern');
    $requirements['ldap_servers_ldap_integration']['severity'] = REQUIREMENT_WARNING;
    $requirements['ldap_servers_ldap_integration']['value'] = NULL;
    $requirements['ldap_servers_ldap_integration']['description'] = t('Upgrade from Drupal 6 LDAP Auth to Drupal 7
      LDAP Servers is not automatic.  LDAP Servers will need to be configured by hand.
      See http://drupal.org/node/1023016. This message will go away when the ldapauth database table is removed.');
  }
  // check that ldapauth not installed.
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function ldap_servers_schema() {
  $schema['ldap_servers'] = array(
    'export' => array(
      'key' => 'sid',
      'key name' => 'Server ID',
      'primary key' => 'numeric_sid',
      'identifier' => 'ldap_servers_conf',
      'api' => array(
        'owner' => 'ldap_servers',
        'api' => 'ldap_servers',
        'minimum_version' => 1,
        'current_version' => 1,
        ),
      ),
    'fields' => array(
      'sid' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
      ),
     'numeric_sid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table.  Only used internally.',
        'no export' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'ldap_type' =>  array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
      ),
      'address' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'port' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 389,
      ),
      'tls' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'bind_method' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'basedn' => array(
        'type' => 'text',
        'serialize' => TRUE,
      ),
      'binddn' => array(
        'type' => 'varchar',
        'length' => 511,
      ),
      'bindpw' => array(
        'type' => 'varchar',
        'length' => 255,
        'no export' => variable_get('ldap_servers_encryption' , LDAP_SERVERS_ENC_TYPE_CLEARTEXT) == LDAP_SERVERS_ENC_TYPE_CLEARTEXT ? TRUE : FALSE,
      ),
      'user_dn_expression' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'user_attr' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'mail_attr' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),

      'ldap_to_drupal_user' =>  array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),

     'testing_drupal_username' =>  array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),

      'weight' =>  array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('numeric_sid'),
    'unique keys' => array('name' => array('name')),
  );

  return $schema;

}

function ldap_servers_update_7100() {

  db_change_field('ldap_servers', 'type', 'ldap_type', array(
    'type' => 'varchar',
    'length' => 20,
    'not null' => FALSE
  ));

  return t('ldap_servers table field "type" renamed to "ldap_type"');

}

