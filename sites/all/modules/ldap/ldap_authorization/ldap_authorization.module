<?php
// $Id: ldap_authorization.module,v 1.1.4.3 2011/02/08 20:05:41 johnbarclay Exp $

/**
 * @file
 * ldap authorization module
 *
 * @todo add caching
 * @todo support exportables
 * @todo unit testing
 * @todo delete confirm form
 * @todo fix ldap authorization  menu such that breadcrumbs appear on test form, update form, delete confirm form
 * @todo fix delete server
 
 */

define('LDAP_AUTHORIZATION_PROJECT_TAG', 'ldap_authorization');
define('LDAP_AUTHORIZATION_USER_LDAP_NOT_FOUND', 101);
define('LDAP_AUTHORIZATION_USER_NOT_LDAP_AUTHENTICATED', 102);
define('LDAP_AUTHORIZATION_MAP_NOT_CONF_FOR_LOGON', 103);
define('LDAP_AUTHORIZATION_NO_LDAP_SERVERS', 'ldap_authorization_no_ldap_servers');

/**
 * Implementation of hook_menu().
 */
function ldap_authorization_menu() {
$menu_offset = 4;
 $items['admin/config/people/ldap/authorization'] = array(
    'title' => t('4. Authorization'),
    'description' => t('Map User LDAP properties to Authorizations'),
    'page callback' => 'ldap_authorizations_admin_index',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'file' => 'ldap_authorization.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );

  $items['admin/config/people/ldap/authorization/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
 $items['admin/config/people/ldap/authorization/update'] = array(
    'title' => t('update'),
    'description' => t('Update an ldap authorization mapping'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_authorization_admin_form', $menu_offset + 2, 'update', $menu_offset + 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK + MENU_LINKS_TO_PARENT + MENU_IS_LOCAL_ACTION,
    'weight' => 3,
    'file' => 'ldap_authorization.admin.inc',
  );

 $items['admin/config/people/ldap/authorization/delete'] = array(
    'title' => t('delete'),
    'description' => t('Delete an ldap authorization mapping'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_authorization_admin_form', $menu_offset + 2, 'delete', $menu_offset + 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK + MENU_LINKS_TO_PARENT + MENU_IS_LOCAL_ACTION,
    'weight' => 3,
    'file' => 'ldap_authorization.admin.inc',
  );


  $items['admin/config/people/ldap/authorization/test'] = array(
    'title' => t('test'),
    'description' => t('Test an ldap authorization mapping'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ldap_authorization_mapping_test_form', $menu_offset + 2, 'test', $menu_offset + 3),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK + MENU_LINKS_TO_PARENT + MENU_IS_LOCAL_ACTION,
    'weight' => 3,
    'file' => 'ldap_authorization.admin.mapping_test.inc',
  );


  $consumers = ldap_authorization_get_consumers(NULL, TRUE);
  foreach ($consumers as $consumer_type => $consumer) {
    $items['admin/config/people/ldap/authorization/add/'. $consumer_type] = array(
      'title' => t('Add !name Mapping', array('!name' => $consumer['consumer_name'])),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ldap_authorization_admin_form', NULL, 'add', $consumer_type),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK + MENU_IS_LOCAL_ACTION,
      'weight' => 4,
      'file' => 'ldap_authorization.admin.inc',
    );
  }
  return $items;
}

/**
 * Implements hook_user_login() login operation.
 */
function ldap_authorization_user_login(&$edit, $user) {
  ldap_authorizations_user_authorizations($user, 'set', NULL, 'logon');
}

/**
 * Invokes hook_ldap_authorization_maps_alter() in every module.
 *
 * We cannot use module_invoke() for this, because the arguments need to
 * be passed by reference.
 */
function ldap_authorization_maps_alter_invoke(&$user, &$user_ldap_entry, &$ldap_server, &$ldap_authz_map_config, &$proposed_ldap_authorizations, $op) {
  foreach (module_implements('ldap_authorization_maps_alter') as $module) {
    $function = $module . '_ldap_authorization_maps_alter';
    $function($user, $user_ldap_entry, $ldap_server, $ldap_authz_map_config, $proposed_ldap_authorizations,  $op);
  }
}
  

/**
 * implements hook_ldap_authorization_maps_alter to suggest authorization ids to grant (drupal roles in this case)
 *
 * @param object $user drupal user object
 *
 * @param array $user_ldap_entry is ldap data from ldap entry which drupal user is mapped to
 *
 * @param object $ldap_server
 *
 * @param array $ldap_authz_map_config is the particular ldap authorization mapping in use.
 *
 * @param array $authz_ids.  any new authorization ids (drupal user role names in this case) in form array('rolename1', 'rolename2',....)
 *
 * @param string $op = 'set' or 'query'  
 * 
 */
function ldap_authorization_ldap_authorization_maps_alter(&$user, &$user_ldap_entry, &$ldap_server, &$ldap_authz_map_config, &$authz_ids, $op) {
  require_once('ldap_authorization.inc');
  _ldap_authorization_ldap_authorization_maps_alter($user, $user_ldap_entry, $ldap_server, $ldap_authz_map_config, $authz_ids,  $op);
}


function ldap_authorization_theme() {
  return array(
    'ldap_authorization_test_results' => array(
      'variables' => array('data' => NULL),
      'render element' => 'element',
      'file' => 'ldap_authorization.theme.inc'
    ),
    'ldap_authorization_admin_index' => array(
      'variables' => array('mappings' => NULL, 'consumers' => NULL),
      'render element' => 'element',
      'file' => 'ldap_authorization.theme.inc'
    ),   
  );
}

/**
 *
 * @param <type> $param of form 'mapping_id' => <mapping_id> or 'consumer_type' => <consumer_type>
 * @return consumer object
 */
function ldap_authorization_get_consumer_object($param) {

  
    extract($param);
    $consumers = ldap_authorization_get_consumers(NULL, TRUE);

    if (@$mapping_id) {
      require_once('LdapAuthorizationMappingAdmin.class.php');
      $mappings = LdapAuthorizationMappingAdmin::getMappings($mapping_id);
      $consumer_type = $mappings[$mapping_id]->consumerType;
    }
    if (@$consumer_type) {
      $consumer = $consumers[$consumer_type];
      require_once(drupal_get_path('module', $consumer['consumer_module']) . '/' . $consumer['consumer_class_file']);
      $class = $consumer['consumer_class_name'];
      $consumer = new $class();
      return $consumer;
    } else {
      return FALSE;
    }

}
/*
 *  return authorization mappings
 *
 * @param $mapping_id id of mapping
 * @param $consumer_type
 * @param boolean $flatten. if only on element in array, return sub array.
 *
 * @return array of mapping configuration keyed on mapping_id
 */
function ldap_authorizations_mappings($mapping_id = null, $consumer_type = NULL, $flatten = FALSE) {
  require_once('LdapAuthorizationMappingAdmin.class.php');
  return LdapAuthorizationMappingAdmin::getMappings($mapping_id, $consumer_type, $flatten);
}

function ldap_authorization_get_consumers($consumer_type = NULL, $reset = FALSE) {
  static $consumers;
  if ($reset || !is_array($consumers)) {
    $consumers = module_invoke_all('ldap_authorization_consumer');
  }
  return ($consumer_type) ? $consumers[$consumer_type] : $consumers;

}


/**
 * @rationale need not be called from hook_user, so this function separated out
 * so it can be called from a batch synchronization process for example
 */    
function ldap_authorizations_user_authorizations(&$user, $op = 'query', $mapping_id = NULL, $context = NULL) {
  require_once('ldap_authorization.inc');
  $new_authorizations = _ldap_authorizations_user_authorizations($user, $op, $mapping_id, $context);
  return $new_authorizations;
}

function ldap_authorization_help($path, $arg) {
  
  $authorization_help = t('LDAP authorization allows LDAP data such as group memberships, 
    user attributes, etc to determine user authorization (drupal roles, organic group memberships,
    etc.  Without additional modules, it only works with Drupal roles.
    More detailed help is available on drupal.org at !helplink.',
          array(
            '!helplink' => l(LDAP_SERVERS_DRUPAL_HELP_URL, LDAP_SERVERS_DRUPAL_HELP_URL),
          ));
  
  switch ($path) {
    case 'admin/config/people/ldap/authorization':
      $output = '<p>'. $authorization_help.'</p>';
      return $output;

    case 'admin/help#ldap_authorization':
      $output = '<p>'. $authorization_help .'</p>';
      return $output;
  }
}