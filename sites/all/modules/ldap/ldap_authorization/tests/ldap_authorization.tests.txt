LDAP Authorization Tests (LDAP_authorz)

==============================================
Admin Interface Tests (AdminInterface)

LDAP_authorz.AdminInterface.create -- result: create new ldap_authorization table record
LDAP_authorz.AdminInterface.update -- result: update ldap_authorization table record
LDAP_authorz.AdminInterface.delete -- delete: remove ldap_authorization table record

==============================================
Derive drupal authorization mapping from attribute in users DN (DeriveFromDN)
(II.A. in admin/config/people/ldap/authorization/add/drupal_role)

Simpletest: ldap_authorization/tests/ldap_authorization.test testDeriveFromDN() function

LDAP_authorz.DeriveFromDN.nomatch  -- user authenticates and has no ou match in ldap object
LDAP_authorz.DeriveFromDN.onematch  -- single match.  provide match to authorization child module.
LDAP_authorz.DeriveFromDN.manymatch  -- many matches on dn attribute.  mulitple roles mapped.
LDAP_authorz.DeriveFromDN.caseinsensitive  -- single match. attribute different case


==============================================
Derive drupal authorization mapping from LDAP attributes  (DeriveFromAttr)

Simpletest: ldap_authorization/tests/ldap_authorization.test  testDeriveFromAttr() function

LDAP_authorz.DeriveFromAttr.nomatch  -- nothing should happen
LDAP_authorz.DeriveFromAttr.onematch  -- single match.  provide match to authorization child module.
LDAP_authorz.DeriveFromAttr.manymatch  -- what should happen?  multiple roles mapped
LDAP_authorz.DeriveFromAttr.caseinsensitive   -- single match. attribute different case

-- should add tests for multiple attributes.

==============================================
Derive roles exist as LDAP entries where a multivalued attribute contains the members' CNs  (DeriveFromEntry)

Simpletest: ldap_authorization/tests/ldap_authorization.test  testDeriveFromEntry() function

LDAP_authorz.DeriveFromEntry.nomatch  -- nothing should happen
LDAP_authorz.DeriveFromEntry.onematch  -- single match.  provide match to authorization child module.
LDAP_authorz.DeriveFromEntry.manymatch

==============================================

LDAP_authorz.Flags.enable (I) - when disabled, no errors should be thrown, nor authorization provided
LDAP_authorz.Flags.onlyLdapAuthenticated (I) - create normal user and apply authorization query
LDAP_authorz.Flags.applyOnLogon  (IV.B) - execute logon and check that roles are applied
LDAP_authorz.Flags.allowManualCall (IV.B) - execute manual call and check that roles are applied
LDAP_authorz.Flags.revokeRoles (IV.C) - select this option, grant user role not deserved, and execute manual call
LDAP_authorz.Flags.regrantRoles IV.C) - select this option, execute manual call to get deserved roles, remove a role, execute manual call to get deserved roles, make sure role regranted
LDAP_authorz.Flags.createRoles IV.C) - select this option, delete some roles or make sure they don't exist.  manually execute.  check role created and granted to user


Flags tests above should also probably be done for user logins since account creation and user object changes are made that might cause authorization to behave differently.
