<?php
// $Id:$


/**
 * @file test stub
 *
 */
require_once(drupal_get_path('module', 'ldap_servers') . '/tests/LdapTestFunctions.class.php');
require_once(drupal_get_path('module','ldap_authorization') . '/LdapAuthorizationConsumerConfAdmin.class.php');

class LdapAuthorizationTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'LDAP Authorization Tests',
      'description' => 'Test ldap authorization.  Requires ldap_authorization_drupal_roles
         since ldap authorization does nothing without a consumer type such as drupal roles.',
      'group' => 'LDAP Authorization'
    );
  }

  public $module_name = 'ldap_authorization';
  public $testFunctions;

  function setUp() {
    parent::setUp(array('ldap_authentication', 'ldap_authorization', 'ldap_authorization_drupal_role')); // don't need any real servers, configured, just ldap_servers code base
    variable_set('ldap_simpletest', 1);
    variable_set('ldap_help_watchdog_detail', 0);
  }


  function tearDown(){
    parent::tearDown();
    variable_del('ldap_help_watchdog_detail');
    variable_del('ldap_simpletest');
  }


  /**
   * prepTestData create an ldap_authorization configuration and stores fake ldap server configuration.
   *
   * @param string $testid the name of the test.  used to determine which configuration file to include
   * @return object consumer configuration object (class = LdapAuthorizationConsumerConfAdmin)
   *
   */
  function prepTestData($testid) {
    $this->testFunctions = new LdapTestFunctions();

    // get authorization/consumer configuration data
    include(drupal_get_path('module','ldap_authorization') . '/tests/ldap_authorization_test_data.'. $testid . '.inc');
    $consumer_conf = $test_data['ldap_authorization_conf']['consumer_conf'];

    // create fake ldap server configuration instance
    include(drupal_get_path('module','ldap_authorization') . '/tests/LdapServerTestData.' . $consumer_conf['sid']. '.inc');
    $this->testFunctions->prepTestServers($consumer_conf['sid'],  $test_data['server']);

    //debug($test_data['server']);
    // create consumer authorization configuration.
    $consumer_obj = ldap_authorization_get_consumer_object($consumer_conf['consumerType']);
    $consumer_conf_admin = new LdapAuthorizationConsumerConfAdmin($consumer_obj, TRUE);
    foreach ($consumer_conf as $property_name => $property_value) {
      $consumer_conf_admin->{$property_name} = $property_value;
    }
    $consumer_conf_admin->save();
    return $consumer_conf_admin;
  }


  function removeTestData($testid) {
    include(drupal_get_path('module','ldap_authorization') . '/tests/ldap_authorization_test_data.'. $testid . '.inc');
    $consumer_conf = $test_data['ldap_authorization_conf']['consumer_conf'];
    $consumer_obj = ldap_authorization_get_consumer_object($consumer_conf['consumerType']);
    $consumer_conf_admin = new LdapAuthorizationConsumerConfAdmin($consumer_obj);
    $this->testFunctions->removeTestServers($consumer_conf['sid']);
    return $consumer_conf_admin->delete();
  }


  /**
   * difficult to test install and uninstall since setUp does module enabling and installing.
   */
  function testInstall() {
    $testid = $this->module_name . ': setup success';
    // just to give warning if setup doesn't succeed.  may want to take these out at some point.
    $setup_success = (
        module_exists('ldap_authentication') &&
        module_exists('ldap_servers') &&
        module_exists('ldap_authorization') &&
        module_exists('ldap_authorization_drupal_role') &&
        (variable_get('ldap_simpletest', 0) == 1)
      );
    $this->assertTrue($setup_success, ' ldap_authorizations setup successful', $testid);
  }


  /**
   *  most functions in .module file are considered api functions, so they
   *  should continue to exist.  These tests are simply testing for careless refactoring
   *  without supporting old functions
   */

  function testAPIs() {
    $testid = $this->module_name . ': test for api functions';
    $api_functions = array(
      'ldap_authorization_get_consumer_object' => array(1, 1),
      'ldap_authorization_get_consumers'  => array(3, 0),
      'ldap_authorizations_user_authorizations'  => array(4,1),
     );

    foreach ($api_functions as $api_function_name => $param_count) {
      $reflector = new ReflectionFunction($api_function_name);
      $this->assertTrue(
          function_exists($api_function_name) &&
          $param_count[1] == $reflector->getNumberOfRequiredParameters() &&
          $param_count[0] == $reflector->getNumberOfParameters()
          , ' api function '. $api_function_name . ' parameters and required parameters count unchanged', $testid);
    }
  }

  function testDeriveFromDN() {
    $test_id = 'DeriveFromDN';
    $conf_id = 'DeriveFromDN';
    $consumer_conf_admin = $this->prepTestData($conf_id);


    /**
     * test:  DeriveFromDN.nomatch no matches on dn attribute.
     *
     * cn=unkool,ou=lost,dc=ad,dc=myuniveristy,dc=edu
     *
     * should not match any mappings
     */

    $user = $this->drupalCreateUser(array());
    $unkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'unkool', 'mail' =>  'unkool@nowhere.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($unkool, 'query');  // just see if the correct ones are derived.
    $this->assertTrue(count($new_authorizations) == 0, 'user account unkool tested for granting no drupal roles ', $test_id . '.nomatch');



    /**
     * test:  DeriveFromDN.onematch  matches on one dn attribute.
     *
     * cn=jkool,ou=guest accounts,dc=ad,dc=myuniveristy,dc=edu
     *
     * should match on 'guest accounts' which maps to 'guests'
     */

    $user = $this->drupalCreateUser(array());
    $jkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
    $correct_roles = (bool)(isset($new_authorizations['drupal_role']) && in_array('guests', $new_authorizations['drupal_role']));
    $this->assertTrue($correct_roles, 'user account jkool tested for granting drupal_role "guests"', $test_id . '.onematch');


    /**
     * test:  DeriveFromDN.manymatch many matches on dn attribute.
     *
     * cn=verykool,ou=special guests,ou=guest accounts,dc=ad,dc=myuniveristy,dc=edu
     *
     * should match on 'special guests' and 'guest account' which map to 'special guests' and 'guests' drupal roles
     *
     */

    $user = $this->drupalCreateUser(array());
    $verykool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'verykool', 'mail' =>  'verykool@myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($verykool, 'query');  // just see if the correct ones are derived.
    $correct_roles = (bool)(isset($new_authorizations['drupal_role']) &&
      in_array('guests', $new_authorizations['drupal_role']) &&
      in_array('special guests', $new_authorizations['drupal_role'])
      );

    $this->assertTrue($correct_roles, 'user account verykool tested for granting "guests" and "special guests" drupal roles ', $test_id . '.manymatch');
    $this->assertTrue($correct_roles, 'user account verykool tested for case insensitivity ', $test_id . '.caseinsensitive');

    $delete_result = $this->removeTestData($conf_id);

  }


  function testDeriveFromAttr() {
    $test_id = 'DeriveFromAttr';
    $conf_id = 'DeriveFromAttr';
    $consumer_conf_admin = $this->prepTestData($conf_id);

    /**
     * test:  DeriveFromAttr.nomatch no matches on dn attribute.
     *
     * should not match any mappings
     */

    $user = $this->drupalCreateUser(array());
    $unkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'unkool', 'mail' =>  'unkool@nowhere.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($unkool, 'query');  // just see if the correct ones are derived.
    $this->assertTrue(count($new_authorizations) == 0, 'user account unkool tested for granting no drupal roles ', $test_id . '.nomatch');


    /**
     * test:  DeriveFromAttr.onematch  matches on one dn attribute.
     *
     * should match on 'cn=SYSadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu' which maps to 'sysadmins'
     */

    $user = $this->drupalCreateUser(array());
    $jkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
    $correct_roles = (bool)(isset($new_authorizations['drupal_role']) && in_array('sysadmins', $new_authorizations['drupal_role']));
    $this->assertTrue($correct_roles, 'user account jkool tested for granting drupal_role "sysadmins"', $test_id . '.onematch');


    /**
     * test:  DeriveFromAttr.manymatch many matches on dn attribute.
     *
     * cn=verykool,ou=special guests,ou=guest accounts,dc=ad,dc=myuniveristy,dc=edu
     *
     * should match on 'cn=SYSadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu' and 'cn=netadmins,ou=it,dc=ad,dc=myuniveristy,dc=edu'
     *   which map to 'sysadmins' and 'netadmins' drupal roles
     *
     */

    $user = $this->drupalCreateUser(array());
    $verykool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'verykool', 'mail' =>  'verykool@myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($verykool, 'query');  // just see if the correct ones are derived.
    $correct_roles = (bool)(isset($new_authorizations['drupal_role']) &&
      in_array('netadmins', $new_authorizations['drupal_role']) &&
      in_array('sysadmins', $new_authorizations['drupal_role'])
      );
    $this->assertTrue($correct_roles, 'user account verykool tested for granting "netadmins" and "sysadmins" drupal roles ', $test_id . '.manymatch');
    $this->assertTrue($correct_roles, 'user account verykool tested for case insensitivity ', $test_id . '.caseinsensitive');

    $delete_result = $this->removeTestData($conf_id);

  }


  function testDeriveFromEntry() {
    $test_id = 'DeriveFromEntry';
    $conf_id = 'DeriveFromEntry';
    $consumer_conf_admin = $this->prepTestData($conf_id);

    /**
     * test:  DeriveFromEntry.nomatch no matches on dn attribute.
     *
     * should not match any mappings
     */

    $user = $this->drupalCreateUser(array());
    $unkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'unkool', 'mail' =>  'unkool@nowhere.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($unkool, 'query');  // just see if the correct ones are derived.
    $this->assertTrue(count($new_authorizations) == 0, 'user account unkool tested for granting no drupal roles ', $test_id . '.nomatch');


    /**
     * test:  DeriveFromEntry.onematch  matches on one dn attribute.
     *
     */

    $user = $this->drupalCreateUser(array());
    $jkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
    $correct_roles = (bool)(isset($new_authorizations['drupal_role']) && in_array('content editors', $new_authorizations['drupal_role']));
    $this->assertTrue($correct_roles, 'user account jkool tested for granting drupal_role "content editors"', $test_id . '.onematch');


    /**
     * test:  DeriveFromEntry.manymatch many matches on dn attribute.
     */

    $user = $this->drupalCreateUser(array());
    $verykool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'verykool', 'mail' =>  'verykool@myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($verykool, 'query');  // just see if the correct ones are derived.
    $correct_roles = (bool)(isset($new_authorizations['drupal_role']) &&
      in_array('content editors', $new_authorizations['drupal_role']) &&
      in_array('content approvers', $new_authorizations['drupal_role'])
      );
    $this->assertTrue($correct_roles, 'user account verykool tested for granting "content editors" and "content approvers" drupal roles ', $test_id . '.manymatch');

    $delete_result = $this->removeTestData($conf_id);

  }


function testFlags() {
    $test_id = 'Flags';
    $conf_id = 'Flags';
    $consumer_conf_admin = $this->prepTestData($conf_id);

    /**
     * test:  LDAP_authorz.Flags.enable
     */
    $user = $this->drupalCreateUser(array());
    $jkool = $this->testFunctions->drupalLdapUpdateUser(array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'), TRUE, $user);
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
    $roles1 = $new_authorizations['drupal_role'];

    $consumer_conf_admin->status = 0;
    $consumer_conf_admin->save();

    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
    $roles2 = isset($new_authorizations['drupal_role']) ? $new_authorizations['drupal_role'] : array();
    $this->assertTrue((count($roles1) == 1 && count($roles2) == 0), 'disable consumer configuration disallows authorizations.', $test_id . '.enable');


    /**
     * LDAP_authorz.Flags.onlyLdapAuthenticated (I) - create normal user and apply authorization query
     */
    $consumer_conf_admin->onlyApplyToLdapAuthenticated = 1;
    $consumer_conf_admin->status = 1;
    $consumer_conf_admin->save();

    // remove authmap for jkool then test
    $jkool = user_save($user, array('name' => 'jkool', 'mail' =>  'jkool@guests.myuniversity.edu'));
    user_set_authmaps($jkool, array('authname_ldap_authentication' => NULL));
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'query');  // just see if the correct ones are derived.
    $roles = isset($new_authorizations['drupal_role']) ? $new_authorizations['drupal_role'] : array();
    $this->assertTrue((count($roles) == 0), ' only apply to ldap authenticated grants no roles for non ldap user.', $test_id . '.enable');
    user_set_authmaps($jkool, array('authname_ldap_authentication' => 1));

    /**
     * LDAP_authorz.Flags.applyOnLogon  (IV.B) - execute logon and check that roles are applied
     */



     /**
     * LDAP_authorz.Flags.revokeRoles (IV.C) - select this option, grant user role not deserved, and execute manual call
     */

    // set correct roles
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'set');
    $consumer_conf_admin->onlyApplyToLdapAuthenticated = 0;
    $consumer_conf_admin->revokeLdapProvisioned = 1;
    $consumer_conf_admin->save();

    // add an underserved, ldap granted drupal role
    $jkool = user_load($jkool->uid);
    $data = array(
      'roles' =>  array(3 => 'administrator'),
      'data' => array('ldap_authorizations' =>
        array(
          'drupal_role' =>
          array(
            'administrator' =>
            array('date_granted' => 1304216778),
          ),
        ),
      ),
    );
    $jkool = user_save($jkool, $data);
    $was_set = isset($jkool->roles[3]);
    // apply correct authorizations.  should remove the administrator role.
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'set', 'drupal_role', 'logon');
    $jkool = user_load($jkool->uid);
    $this->assertTrue(($was_set && !isset($jkool->roles[3])), ' revoke ldap granted roles when no longer deserved.', $test_id . '.revokeRoles');


     /**
     * LDAP_authorz.Flags.regrantRoles IV.C) - select this option, execute manual call to get deserved roles, remove a role, execute manual call to get deserved roles, make sure role regranted
     */


     /**
     * LDAP_authorz.Flags.createRoles IV.C) - select this option, delete some roles or make sure they don't exist.  manually execute.  check role created and granted to user
     */

    // take roles away from user
    $jkool = user_load($jkool->uid);
    $data = array(
      'roles' =>  array(),
      'data' => array('ldap_authorizations' => array()),
      );
    $jkool = user_save($jkool, $data);

    $consumer_conf_admin->createConsumers = 1;
    $consumer_conf_admin->save();

    // make sure role doesn't exist
    if (in_array('guests', array_values(user_roles()))) {
      user_role_delete('guests');
    }
    $guest_role_deleted = !in_array('guests', array_values(user_roles()));

    // set authorizations for user.  this should create role
    list($new_authorizations, $notifications) = ldap_authorizations_user_authorizations($jkool, 'set', 'drupal_role', 'logon');

    $jkool = user_load($jkool->uid);
    $guest_role_recreated = in_array('guests', array_values(user_roles()));
    $roles_by_name = array_flip(user_roles());
    $jkool_granted_guest = isset($jkool->roles[$roles_by_name['guests']]);
    $this->assertTrue(($guest_role_deleted && $guest_role_recreated && $jkool_granted_guest), ' create consumers (e.g. roles)', $test_id . '.createRoles');


}

/**
  function testAuthorizationForm() {
    // test add authorization form validation and actual populated of db with ldap authorization form
    // test update of that authorization
    // test delete of that authorization
    // test permissions on those forms (add, edit, delete) and the index
  }


  function testMappingAndFiltering() {

  }


  function testMoreSettings() {

    // toggle for when a user logs on obeyed
    // revoke
    // regrant
    // revoke II
    // create drupal roles that do not exist.
    // enable this authorization mapping obeyed
    // only apply to ldap authenticated users


  }
  **/



}
