<?php

/**
 * Reasoning behind this implementation:
 *   Drupal fails to provided the ability to "extend" functionality of a field instance as far as I have been able to tell.
 *   The current design of the field api does not allow for adding/altering fields.
 *   With exception of only a single function: hook_field_info_alter().
 *   Anything can be added there, but this does not provide any ability to create, read, update, delete, or present anything in the field.
 *
 *   see:
 *   - http://drupal.org/node/1014708
 *   - http://api.drupal.org/api/drupal/modules--field--field.api.php/7
 *   - http://api.drupal.org/api/drupal/modules--field--field.api.php/group/field_types/7
 *   - http://api.drupal.org/api/drupal/modules--field--field.api.php/function/hook_field_info_alter/7
 *   - http://api.drupal.org/api/drupal/modules--field_ui--field_ui.api.php/function/hook_field_instance_settings_form/7
 */

/**
 * Implements hook_form_FORM_ID_alter() for field_ui_field_edit_form.
 */
function quail_api_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id){
  if (!cf_has_array_key('#instance', $form, array(__FUNCTION__)) || !cf_has_array_key('instance', $form, array(__FUNCTION__))){
    return;
  }

  $current_values = &$form['#instance'];
  $instance_form = &$form['instance'];

  if (!is_array($current_values)){
    cf_error_invalid_array(__FUNCTION__, 'form[#instance]', WATCHDOG_ERROR);
    return;
  }

  if (!is_array($instance_form)){
    cf_error_invalid_array(__FUNCTION__, 'form[instance]', WATCHDOG_ERROR);
    return;
  }

  if (isset($current_values['widget']['type'])){
    if ($current_values['widget']['type'] != 'text_textarea_with_summary' && $current_values['widget']['type'] != 'text_textarea'){
      return;
    }
  }
  else {
    return;
  }

  $current_values = &$form['#instance'];
  $instance_form = &$form['instance'];

  $instance_form['field_accessibility_validation'] = array(
    '#type' => 'fieldset',
    '#title' => t("Accessiblity Validation"),
    '#description' => t("Provides options for enabled and disabled accessibility validation on text stored in this field."),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => TRUE,
  );

  $instance_form['field_accessibility_validation']['quail_enabled'] = array(
    '#type' => 'select',
    '#title' => t("Accessibility Validation"),
    '#default_value' => isset($current_values['field_accessibility_validation']['quail_enabled']) ? $current_values['field_accessibility_validation']['quail_enabled'] : 'disabled',
    '#options' => array(
      'disabled' => t("Disabled"),
      'optional' => t("Enabled (optional)"),
      'required' => t("Enabled (required)"),
    ),
    '#description' => t("Choose if accessibility validation should be enabled for this field and if the field is required to pass accessibility validation."),
  );

  $instance_form['field_accessibility_validation']['quail_standards'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Accessibility Standards"),
    '#default_value' => isset($current_values['field_accessibility_validation']['quail_standards']) ? $current_values['field_accessibility_validation']['quail_standards'] : array(),
    '#options' => quail_api_get_standards_list(),
    '#description' => t("Choose which accessiblity standards to validate against. It is strongly suggested that only 1 standard should be used because many of the validation tests are performed by more than one standard."),
  );
}
