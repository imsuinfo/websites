<?php

/**
 * @file
 * Module file for the phplot api project.
 */

/**
 * A feature that accepts no arguments.
 */
define('PHPLOT_API_FEATURE_NONE', 0);

/**
 * A feature that can be applied only once.
 */
define('PHPLOT_API_FEATURE_SINGLE', 1);

/**
 * A feature that can be called multiple times.
 */
define('PHPLOT_API_FEATURE_MULTIPLE', 2);


/**
 * Returns the expected path to the phplot library.
 *
 * @param array $function_history
 *   (optional) An array of function names, ie:
 *   array('0' => 'my_function_name').
 */
function phplot_api_library_path($function_history = array()) {
  cf_error_append_history($function_history, __FUNCTION__);

  $library_path = libraries_get_path('phplot');

  return $library_path . '/phplot.php';
}

/**
 * Loads the quail library.
 *
 * @param array $function_history
 *   (optional) An array of function names, ie:
 *   array('0' => 'my_function_name').
 */
function phplot_api_include_library($function_history = array()) {
  static $loaded_phplot_api_library_includes = FALSE;

  if ($loaded_phplot_api_library_includes) return TRUE;
  $loaded_phplot_api_library_includes = TRUE;

  cf_error_append_history($function_history, __FUNCTION__);

  $library_path = libraries_get_path('phplot');

  $result = require_once phplot_api_library_path($function_history);

  return $result;
}

/**
 * Implements hook_theme().
 */
function phplot_api_theme($existing, $type, $theme, $path) {
  $themes = array();

  return $themes;
}

/**
 * Returns an array of plots that are supported.
 *
 * The description and available plots come from:
 * - phplot.sourceforge.net/phplotdocs/conc-plottypes.html
 *
 * @param string|null plot_type
 *   (optional) A machine name representing of the plot to load.
 *   When defined, the return value to only contain the plot that matches the
 *   given machine name.
 *   When undefined, all plots will be loaded into the plots array.
 * @param array $function_history
 *   (optional) An array of function names, ie:
 *   array('0' => 'my_function_name').
 *
 * @return array
 *   An array of supported plots.
 *   The array keys are the machine names for each display level.
 */
function phplot_api_get_plots($plot_type = NULL, $function_history = array()) {
  static $plot_settings = NULL;

  if (isset($plot_settings)) {
     if (!is_null($plot_type)) {
      if (isset($plot_settings[$plot_type])) {
        return $plot_settings[$plot_type];
      }

      return array();
    }

    return $plot_settings;
  }

  cf_error_append_history($function_history, __FUNCTION__);

  $plot_settings = array();

  $plot_settings['area'] = array(
    'human_name' => t("Area"),
    'module' => 'phplot_api',
    'description' => t(
      "Filled areas between lines. Also known as cumulative line plot or component line plot."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['bars'] = array(
    'human_name' => t("Bar"),
    'module' => 'phplot_api',
    'description' => t(
      "Filled bars with optional 3-D look. Multiple datasets are offset."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array('text-data-yx'),
  );

  $plot_settings['bubbles'] = array(
    'human_name' => t("Bubbles"),
    'module' => 'phplot_api',
    'description' => t(
      "A scatter-point plot using bubbles (filled circles), with the bubble size proportional to a Z value."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array('data-data-xyz'),
  );

  $plot_settings['candlesticks'] = array(
    'human_name' => t("Candlesticks"),
    'module' => 'phplot_api',
    'description' => t(
      "An Open/High/Low/Close (OHLC) financial plot using filled and unfilled candlesticks."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['candlesticks2'] = array(
    'human_name' => t("Candlesticks 2"),
    'module' => 'phplot_api',
    'description' => t(
      "An Open/High/Low/Close (OHLC) financial plot using filled candlesticks."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['linepoints'] = array(
    'human_name' => t("Line Points"),
    'module' => 'phplot_api',
    'description' => t(
      "Lines between points, with a marker at each point, and optional error bars."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['lines'] = array(
    'human_name' => t("Lines"),
    'module' => 'phplot_api',
    'description' => t(
      "Straight lines between data points, with optional error bars."
    ),
    'defaults' => array('area_world' => array(NULL, 0, NULL, NULL)),
    'features' => array(),
    'data_types' => array('data-data-error'),
  );

  $plot_settings['ohlc'] = array(
    'human_name' => t("OHLC"),
    'module' => 'phplot_api',
    'description' => t(
      "A basic Open/High/Low/Close (OHLC) financial plot using lines and ticks."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['pie'] = array(
    'human_name' => t("Pie"),
    'module' => 'phplot_api',
    'description' => t(
      "Pie chart with or without 3-D affects."
    ),
    'defaults' => array(),
    'features' => array('label_scale_position' => PHPLOT_API_FEATURE_SINGLE,),
    'data_types' => array('text-data-single'),
  );

  $plot_settings['points'] = array(
    'human_name' => t("Points"),
    'module' => 'phplot_api',
    'description' => t(
      "Draws a marker at each data point, with optional error bars."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array('data-data-error'),
  );

  $plot_settings['squared'] = array(
    'human_name' => t("Squared"),
    'module' => 'phplot_api',
    'description' => t(
      "Stepped lines"
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['stackedarea'] = array(
    'human_name' => t("Stacked Area"),
    'module' => 'phplot_api',
    'description' => t(
      "Filled areas between lines, with multiple data sets accumulated."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array(),
  );

  $plot_settings['stackedbars'] = array(
    'human_name' => t("Stacked Bars"),
    'module' => 'phplot_api',
    'description' => t(
      "Filled bars with optional 3-D look. Multiple data sets are accumulated and the sum is graphed."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array('text-data-yx'),
  );

  $plot_settings['thinbarline'] = array(
    'human_name' => t("Thin Bar Line"),
    'module' => 'phplot_api',
    'description' => t(
      "Vertical lines from the X axis to the value, or horizontal lines from the Y axis to the value. Also known as impulse."
    ),
    'defaults' => array(),
    'features' => array(),
    'data_types' => array('text-data-yx', 'data-data-yx'),
  );


  // assign globally shared values
  foreach ($plot_settings as $key => &$value) {
    $value['features']['background_color'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_border_colors'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_colors'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_label_angle_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_label_position_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_label_type_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_label_angle_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_label_position_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_label_type_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_type'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['data_values'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['height'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['image_border_color'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['image_border_type'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['image_border_width'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['label_color'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['label_type'] = PHPLOT_API_FEATURE_MULTIPLE;
    $value['features']['legend'] = PHPLOT_API_FEATURE_MULTIPLE;
    $value['features']['legend_pixels'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['legend_position'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['legend_reverse'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['legend_style'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['legend_use_shapes'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['legend_world'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['margins_pixels'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['plot_area_world'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['plot_area_background_image'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['plot_area_pixels'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['plot_area_background_draw'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['plot_background_color'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['precision_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['precision_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['shading'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['title'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['title_color'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['title_font_size'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['ttf_path'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['ttf_default'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['ttf_font'] = PHPLOT_API_FEATURE_MULTIPLE;
    $value['features']['tick_color'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_length'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_anchor_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_crossing_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_increment_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_label_position_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_length_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_position_x'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_anchor_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_crossing_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_increment_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_label_position_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_length_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['tick_position_y'] = PHPLOT_API_FEATURE_SINGLE;
    $value['features']['width'] = PHPLOT_API_FEATURE_SINGLE;

    $value['data_types'][] = 'data-data';
    $value['data_types'][] = 'text-data';
  }

  $other_arguments = array();
  $other_arguments['function_history'] = $function_history;

  drupal_alter('phplot_api_get_plots', $plot_settings, $plot_type, $other_arguments);

  if (!is_null($plot_type)) {
    if (isset($plot_settings[$plot_type])) {
      return $plot_settings[$plot_type];
    }

    return array();
  }

  return $plot_settings;
}

/**
 * Returns a list of plot types.
 *
 * This is only a list of the machine_name and human_name of the select lists.
 * Use this for populating select lists, radio buttons, and check boxes.
 *
 * @param array|null plot_settings
 *   (optional) Providing a valid array of plots as returned by
 *   phplot_api_get_plots() and it will be properly converted into a plots list.
 * @param array $function_history
 *   (optional) An array of function names, ie:
 *   array('0' => 'my_function_name').
 *
 * @return array
 *   An array of plots that are supported by this module or extending modules.
 *   The array keys are the plots machine name and the array value is the human
 *   name.
 *
 * @see phplot_api_get_plots()
 */
function phplot_api_get_plots_list($plot_settings = NULL, $function_history = array()) {
  cf_error_append_history($function_history, __FUNCTION__);

  if (is_null($plot_settings)) {
    $plot_settings = phplot_api_get_plots(NULL, $function_history);
  }

  $plots_list = array();

  foreach ($plot_settings as $machine_name => $value) {
    if (isset($value['human_name'])) {
      $plots_list[$machine_name] = $value['human_name'];
    }
  }

  return $plots_list;
}
