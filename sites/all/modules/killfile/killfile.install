<?php

/**
 * Implementation of hook_uninstall().
 *
 * Having this empty function ensures that RDF/RSS will properly uninstall.
 * See "Best Practices" from: http://drupal.org/node/622174
 */
function killfile_uninstall(){
  return;
}

/**
 * Implementation of hook_schema().
 */
function killfile_schema() {
  return array(
    'killfile_nodes' => array(
      'description' => st("Nodes that have been killfiled."),
      'fields' => array(
        'nid' => array(
          'description' => st("The node's ID from {node}.nid, serving as the primary key."),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'vid' => array(
          'description' => st("The node's version ID from {node}.vid. For information only."),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'uid' => array(
          'description' => st("The user ID from {users}.uid, of the user who killfiled the node."),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0,
        ),
        'timestamp' => array(
          'description' => st("The Unix timestamp indicating when the node was killfiled."),
          'type' => 'int',
          'unsigned' => TRUE,
          'not null' => TRUE,
          'default' => 0
        ),
      ),
      'primary key' => array('nid'),
      'foreign keys' => array(
        'nid' => array(
          'table' => 'node',
          'columns' => array('nid' => 'nid'),
        ),
      ),
    ),
    // NOTE: any/all node_type-specific settings will be added to this table
    'killfile_node_types' => array(
      'description' => st("Content type specific settings for killfile."),
      'fields' => array(
        'type' => array(
          'description' => st("The machine-readable name of the node type that has killfile enabled."),
          'type' => 'varchar',
          'length' => 32,
          'not null' => TRUE,
        ),
        'publish_on_undelete' => array(
          'description' => st("A boolean that designates whether or not to auto-publish killfiled content during an undelete process."),
          'type' => 'int',
          'size' => 'tiny',
          'not null' => TRUE,
          'default' => TRUE,
        ),
      ),
      'primary key' => array('type'),
      'foreign keys' => array(
        'type' => array(
          'table' => 'node_type',
          'columns' => array('type' => 'type'),
        ),
      ),
    ),
  );
}

/**
 * Migrate commands from old killfile to new killfile.
 */
function migrate_killfile_nodes_to_separate_tables() {
  $sql_migrate = "
    create table node_deleted as select * from node;

    alter table node_deleted alter nid set not null;
    alter table node_deleted alter type set not null;
    alter table node_deleted alter language set not null;
    alter table node_deleted alter title set not null;
    alter table node_deleted alter uid set not null;
    alter table node_deleted alter status set not null;
    alter table node_deleted alter created set not null;
    alter table node_deleted alter changed set not null;
    alter table node_deleted alter comment set not null;
    alter table node_deleted alter promote set not null;
    alter table node_deleted alter sticky set not null;
    alter table node_deleted alter tnid set not null;
    alter table node_deleted alter translate set not null;
    alter table node_deleted alter type set default ''::character varying;
    alter table node_deleted alter language set default ''::character varying;
    alter table node_deleted alter title set default ''::character varying;
    alter table node_deleted alter uid set default 0;
    alter table node_deleted alter status set default 1;
    alter table node_deleted alter created set default 0;
    alter table node_deleted alter changed set default 0;
    alter table node_deleted alter comment set default 0;
    alter table node_deleted alter promote set default 0;
    alter table node_deleted alter sticky set default 0;
    alter table node_deleted alter tnid set default 0;
    alter table node_deleted alter translate set default 0;

    alter table node_deleted add primary key (nid);
    alter table node_deleted add constraint node_deleted_vid_key unique (vid);
    alter table node_deleted add constraint node_nid_check CHECK (nid >= 0);
    alter table node_deleted add constraint node_tnid_check CHECK (tnid >= 0);
    alter table node_deleted add constraint node_vid_check CHECK (vid >= 0);

    delete from node_deleted where not nid in (select nid from killfile_nodes);
    delete from node where vid in (select nid from killfile_nodes);

    alter table node_deleted owner to APPROPRIATE_USER_NAME ;



    create table node_revision_deleted as select * from node_revision;

    alter table node_revision_deleted alter nid set not null;
    alter table node_revision_deleted alter title set not null;
    alter table node_revision_deleted alter uid set not null;
    alter table node_revision_deleted alter log set not null;
    alter table node_revision_deleted alter title set not null;
    alter table node_revision_deleted alter timestamp set not null;
    alter table node_revision_deleted alter status set not null;
    alter table node_revision_deleted alter comment set not null;
    alter table node_revision_deleted alter promote set not null;
    alter table node_revision_deleted alter sticky set not null;
    alter table node_revision_deleted alter uid set default 0;
    alter table node_revision_deleted alter title set default ''::character varying;
    alter table node_revision_deleted alter timestamp set default 0;
    alter table node_revision_deleted alter status set default 1;
    alter table node_revision_deleted alter comment set default 0;
    alter table node_revision_deleted alter promote set default 0;
    alter table node_revision_deleted alter sticky set default 0;

    alter table node_revision_deleted add primary key (nid);
    alter table node_revision_deleted add constraint node_revision_deleted_vid_key unique (vid);
    alter table node_revision_deleted add constraint node_nid_check CHECK (nid >= 0);
    alter table node_revision_deleted add constraint node_vid_check CHECK (vid >= 0);

    delete from node_revision_deleted where not nid in (select nid from killfile_nodes);
    delete from node_revision where nid in (select nid from killfile_nodes);

    alter table node_revision_deleted owner to APPROPRIATE_USER_NAME ;
  ";

  db_query($sql_migrate);
}
