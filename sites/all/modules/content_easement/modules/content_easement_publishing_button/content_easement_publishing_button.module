<?php

/**
 * Implements hook_help().
 */
function content_easement_publishing_button_help($path, $arg = NULL) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (function_exists('cf_version_exists')) {
    if (cf_is_empty_or_non_string('path', $path, WATCHDOG_ERROR)){
      return;
    }
  }
  else {
    if (cf_is_empty_or_non_string($function_history, 'path', $path, WATCHDOG_ERROR)){
      return;
    }
  }

  switch ($path) {
    case 'admin/help#content_easement_publishing_button':
      $help = t("Provides an unpublish/publish button for convenience and user-friendliness.");
      $help .= "<br>\n";
      $help .= t("Provides additional access control such that non-admins can see the publish and unpublished buttons.");

      return "<p>" . $help . "</p>";
  }
}

/**
 * Implements hook_content_easement_permission_alter().
 */
function content_easement_publishing_button_content_easement_permission_alter(&$permissions) {
  $permissions['use publish button'] = array(
    'title' => t("Use Publish Button"),
    'description' => t("Specify whether or not a particular user or role can see and use the publish button for a given node."),
  );

  $permissions['use unpublish button'] = array(
    'title' => t("Use Unpublish Button"),
    'description' => t("Specify whether or not a particular user or role can see and use the unpublish button for a given node."),
  );
}

/**
 * Implements hook_form_alter().
 */
function content_easement_publishing_button_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (function_exists('cf_version_exists')) {
    if (cf_is_empty_or_non_string('form_id', $form_id, WATCHDOG_ERROR)){
      return;
    }
  }
  else {
    if (cf_is_empty_or_non_string($function_history, 'form_id', $form_id, WATCHDOG_ERROR)){
      return;
    }
  }

  if (array_key_exists('type', $form) && cf_has_array_key('#value', $form['type'])){
    if (!array_key_exists('#node', $form) || !is_object($form['#node'])){
      return;
    }

    $node_type_settings_objects = content_easement_publishing_button_load_node_type_settings(array($form['type']['#value']));
    $buttons_enabled = 0;

    if (!empty($node_type_settings_objects)){
      $node_type_settings_object = $node_type_settings_objects['0'];
      $buttons_enabled = $node_type_settings_object->enabled;
    }

    // alter the node edit form
    if ($form['type']['#value'] . '_node_form' == $form_id){
      if ($form['#node']->status == NODE_NOT_PUBLISHED){
        if ($buttons_enabled == 3 || $buttons_enabled == 1){
          if (user_access('use publish button')) {
            $form['actions']['publish'] = array(
              '#type' => 'submit',
              '#value' => t("Publish"),
              '#weight' => 16,
              '#submit' => array('content_easement_publishing_button_publish_submit'),
            );
          }
        }
      }
      else {
        if ($buttons_enabled == 3 || $buttons_enabled == 2){
          if (user_access('use unpublish button')) {
            $form['actions']['unpublish'] = array(
              '#type' => 'submit',
              '#value' => t("Unpublish"),
              '#weight' => 16,
              '#submit' => array('content_easement_publishing_button_unpublish_submit'),
            );
          }
        }
      }
    }
  }
}

/**
 * Button submit function: handle the 'publish' button on the node form.
 */
function content_easement_publishing_button_publish_submit($form, &$form_state) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!array_key_exists('#node', $form)){
    cf_error_missing_array_key($function_history, 'form', '#node');
    return;
  }

  if (!is_object($form['#node'])){
    cf_error_invalid_object($function_history, 'form[\'#node\']');
    return;
  }

  if (user_access('use publish button')) {
    if ($form['#node']->status != NODE_PUBLISHED){
      $form['#node']->status = NODE_PUBLISHED;
      node_save($form['#node']);
    }
  }
}

/**
 * Button submit function: handle the 'unpublish' button on the node form.
 */
function content_easement_publishing_button_unpublish_submit($form, &$form_state) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!array_key_exists('#node', $form)){
    cf_error_missing_array_key($function_history, 'form', '#node');
    return;
  }

  if (!is_object($form['#node'])){
    cf_error_invalid_object($function_history, 'form[\'#node\']');
    return;
  }

  if (user_access('use unpublish button')) {
    if ($form['#node']->status != NODE_NOT_PUBLISHED){
      $form['#node']->status = NODE_NOT_PUBLISHED;
      node_save($form['#node']);
    }
  }
}

/**
 * Loads the node type settings table data for the given node type.
 * @todo add caching support to the results of this check.
 *
 * @param $node_types
 *   An array of node type strings or node objects
 * @param $keyed (optional)
 *   A string matching one of the following: 'type'
 *   When this is NULL, the default behavior is to return the array exactly as it was returned by the database call.
 *   When this is a valid string, the key names of the returned array will use the specified key name.
 *
 * @return
 *   A prepared statement object, already executed.
 */
function content_easement_publishing_button_load_node_type_settings($node_types, $keyed = NULL){
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (count($node_types) == 0){
    return array();
  }

  $query = db_select('content_easement_publishing_button_node_types', 'cepbnt');

  $query->fields('cepbnt');
  $query->orderBy('cepbnt.type', 'ASC');

  $or = db_or();

  foreach ($node_types as $node_type){
    if (is_object($node_type)){
      $or->condition('type', $node_type->type, '=');
    }
    else {
      $or->condition('type', $node_type, '=');
    }
  }

  $query->condition($or);

  if ($keyed === 'type'){
    $records = $query->execute();
    $results = array();

    foreach ($records as $record){
      if (!is_object($record)) continue;

      $results[$record->$keyed] = $record;
    }

    return $results;
  }

  return $query->execute()->fetchAll();
}

/**
 * Implements hook_form_FORM_ID_alter() for the node type form.
 */
function content_easement_publishing_button_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  $default_enabled = 'disabled';

  if (!empty($form['#node_type']->type)){
    $node_type_settings_objects = content_easement_publishing_button_load_node_type_settings(array($form['#node_type']));

    if (!empty($node_type_settings_objects)){
      $node_type_settings_object = $node_type_settings_objects['0'];

      if ($node_type_settings_object->enabled == 1){
        $default_enabled = 'publish_only';
      }
      else if ($node_type_settings_object->enabled == 2){
        $default_enabled = 'unpublish_only';
      }
      else if ($node_type_settings_object->enabled == 3){
        $default_enabled = 'publish_unpublish';
      }
    }
  }

  if (!isset($form['content_easement']) || !is_array($form['content_easement'])){
    $form['content_easement'] = array(
      '#type' => 'fieldset',
      '#title' => t("Easement Settings"),
      '#group' => 'additional_settings',
      '#collapsible' => FALSE,
    );
  }

  $form['content_easement']['publishing_button_enabled'] = array(
    '#type' => 'select',
    '#title' => t("Publishing Button"),
    '#default_value' => $default_enabled,
    '#options' => array(
      'disabled' => t("Disabled"),
      'publish_only' => t("Publish Only"),
      'unpublish_only' => t("Unpublish Only"),
      'publish_unpublish' => t("Publish and Unpublish"),
    ),
    '#description' => t("Choose if publish and unpublish buttons will be provided for this content type."),
  );

  $form['#submit'][] = 'content_easement_publishing_button_node_type_form_submit';
}

/**
 * Handles submitting the accessible content specific node type settings into the database.
 *
 * @param $form
 *   A form array
 * @param $form_state
 *   A form state
 */
function content_easement_publishing_button_node_type_form_submit($form, &$form_state) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (function_exists('cf_version_exists')) {
    if (cf_is_empty_or_non_string('form_state[values][type]', $form_state['values']['type'], WATCHDOG_ERROR)){
      return;
    }
  }
  else {
    if (cf_is_empty_or_non_string($function_history, 'form_state[values][type]', $form_state['values']['type'], WATCHDOG_ERROR)){
      return;
    }
  }

  $node_type_settings_objects = content_easement_publishing_button_load_node_type_settings(array($form_state['values']['type']), $function_history);
  $node_type_settings_object = FALSE;

  if (!empty($node_type_settings_objects)){
    $node_type_settings_object = $node_type_settings_objects['0'];
  }

  $columns = array('enabled');
  $record = array();
  $record['type'] = $form_state['values']['type'];
  $record['enabled'] = 0;

  if (isset($form_state['values']['publishing_button_enabled'])){
    if ($form_state['values']['publishing_button_enabled'] === 'publish_only'){
      $record['enabled'] = 1;
    }
    else if ($form_state['values']['publishing_button_enabled'] === 'unpublish_only'){
      $record['enabled'] = 2;
    }
    else if ($form_state['values']['publishing_button_enabled'] === 'publish_unpublish'){
      $record['enabled'] = 3;
    }
  }

  if (is_object($node_type_settings_object)){
    $primary_keys = array('type');
    $results = drupal_write_record('content_easement_publishing_button_node_types', $record, $primary_keys);
  }
  else {
    $results = drupal_write_record('content_easement_publishing_button_node_types', $record);
  }
}

/**
 * Implements hook_content_easement_node_type_delete().
 */
function content_easement_publishing_button_content_easement_node_type_delete($information, $type_data) {
  db_delete('content_easement_publishing_button_node_types')->condition('type', $information->type)->execute();
}
