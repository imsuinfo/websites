<?php

/**
 * Implements hook_help().
 */
function content_easement_field_ui_help($path, $arg = NULL) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (function_exists('cf_version_exists')) {
    if (cf_is_empty_or_non_string('path', $path)){
      return;
    }
  }
  else {
    if (cf_is_empty_or_non_string($function_history, 'path', $path)){
      return;
    }
  }

  switch ($path) {
    case 'admin/structure/easement/types':
      $help = "Manage node types provides you with the ability to create forms.";
      $help .= " These forms are referred to as 'node types'.";
      $help .= " A submitted form is referred to as a 'node'.";

      return "<p>" . t($help) . "</p>";
    case 'admin/structure/easement/types/manage/%/fields':
      $help = "Manage fields allows you to add structure to your node type.";
      $help .= " The order of the fields can be altered by dragging the fields.";
      $help .= " You can also change the order by alterting the row weights, such that the smallest number will be topmost and the largest number will be bottommost.";

      return "<p>" . t($help) . "</p>";
    case 'admin/structure/easement/types/manage/%/display':
      $help = "Manage display allows you to control how fields are displayed on individual nodes.";
      $help .= " The order of the fields can be altered by dragging the fields.";
      $help .= " You can also change the order by alterting the row weights, such that the smallest number will be topmost and the largest number will be bottommost.";

      return "<p>" . t($help) . "</p>";
  }
}

/**
 * Implements hook_content_easement_init_overlay_matches_alter().
 */
function content_easement_field_ui_content_easement_init_overlay_matches_alter(&$parent_matches, &$child_matches) {
  $child_matches[] = '/manage/.*';
}

/**
 * Implements hook_menu().
 */
function content_easement_field_ui_menu() {
  $items = array();

  // Ensure the following is not executed until field_bundles is working and
  // tables are updated. Needed to avoid errors on initial installation.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }

  // Create tabs for all possible bundles.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    // Only support the node entity type at this time.
    if ($entity_type != 'node') continue;

    if ($entity_info['fieldable']) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        if (isset($bundle_info['admin'])) {
          // Extract path information from the bundle.
          $path = $bundle_info['admin']['path'];

          // Only support the paths: 'admin/structure/types/manage' paths
          if (preg_match('@^admin/structure/types/manage/.*$@', $path) == 0){
            continue;
          }

          // Replace the given path with one that works for content easement
          $path = preg_replace('@^admin/structure/types/manage/@', 'admin/structure/easement/types/manage/', $path);

          // Different bundles can appear on the same path (e.g. %node_type and
          // %comment_node_type). To allow field_ui_menu_load() to extract the
          // actual bundle object from the translated menu router path
          // arguments, we need to identify the argument position of the bundle
          // name string ('bundle argument') and pass that position to the menu
          // loader. The position needs to be casted into a string; otherwise it
          // would be replaced with the bundle name string.
          if (isset($bundle_info['admin']['bundle argument'])) {
            $bundle_arg = $bundle_info['admin']['bundle argument'] + 1;
            $bundle_pos = (string) $bundle_arg;
          }
          else {
            $bundle_arg = $bundle_name;
            $bundle_pos = '0';
          }

          // This is the position of the %field_ui_menu placeholder in the
          // items below.
          $field_position = count(explode('/', $path)) + 1;

          // Extract access information, providing defaults.
          $access = array(
            'access callback' => 'content_easement_access',
            'access arguments' => array(5),
          );

          $items["$path/fields"] = array(
            'title' => "Manage Fields",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_field_overview_form', $entity_type, $bundle_arg),
            'type' => MENU_LOCAL_TASK,
            'weight' => 1,
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          $items["$path/fields/%field_ui_menu"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title callback' => 'field_ui_menu_title',
            'title arguments' => array($field_position),
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_field_edit_form', $field_position),
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          $items["$path/fields/%field_ui_menu/edit"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => "Edit",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_field_edit_form', $field_position),
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          $items["$path/fields/%field_ui_menu/field-settings"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => "Field Settings",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_field_settings_form', $field_position),
            'type' => MENU_LOCAL_TASK,
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          $items["$path/fields/%field_ui_menu/widget-type"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => "Widget Type",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_widget_type_form', $field_position),
            'type' => MENU_LOCAL_TASK,
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          $items["$path/fields/%field_ui_menu/delete"] = array(
            'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
            'title' => "Delete",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_field_delete_form', $field_position),
            'type' => MENU_LOCAL_TASK,
            'weight' => 10,
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          // 'Manage display' tab.
          $items["$path/display"] = array(
            'title' => "Manage Display",
            'page callback' => 'drupal_get_form',
            'page arguments' => array('field_ui_display_overview_form', $entity_type, $bundle_arg, 'default'),
            'type' => MENU_LOCAL_TASK,
            'weight' => 2,
            'file' => 'field_ui.admin.inc',
            'file path' => drupal_get_path('module', 'field_ui'),
          ) + $access;

          if (module_exists('field_group')){
            $group_position = count(explode('/', $path)) + 1;

            $items["$path/groups/%field_group_menu/delete"] = array(
              'load arguments' => array($entity_type, $bundle_arg, $bundle_pos, '%map'),
              'title' => "Delete",
              'page callback' => 'drupal_get_form',
              'page arguments' => array('field_group_delete_form', $group_position),
              'type' => MENU_CALLBACK,
              'file' => 'field_group.field_ui.inc',
              'file path' => drupal_get_path('module', 'field_group'),
            ) + $access;
          }

          // View modes secondary tabs.
          // The same base $path for the menu item (with a placeholder) can be
          // used for all bundles of a given entity type; but depending on
          // administrator settings, each bundle has a different set of view
          // modes available for customisation. So we define menu items for all
          // view modes, and use an access callback to determine which ones are
          // actually visible for a given bundle.
          $weight = 0;
          $view_modes = array('default' => array('label' => t("Default"))) + $entity_info['view modes'];

          foreach ($view_modes as $view_mode => $view_mode_info) {
            $items["$path/display/$view_mode"] = array(
              'title' => $view_mode_info['label'],
              'page arguments' => array('field_ui_display_overview_form', $entity_type, $bundle_arg, $view_mode),
              // The access callback needs to check both the current 'custom
              // display' setting for the view mode, and the overall access
              // rules for the bundle admin pages.
              'access callback' => '_field_ui_view_mode_menu_access',
              'access arguments' => array_merge(array($entity_type, $bundle_arg, $view_mode, $access['access callback']), $access['access arguments']),
              'type' => ($view_mode == 'default' ? MENU_DEFAULT_LOCAL_TASK : MENU_LOCAL_TASK),
              'weight' => ($view_mode == 'default' ? -10 : $weight++),
              'file' => 'field_ui.admin.inc',
              'file path' => drupal_get_path('module', 'field_ui'),
            );
          }
        }
      }
    }
  }

  return $items;
}

/**
 * Add a cancel buttons to improve user experience.
 */
function content_easement_field_ui_add_cancel_button(&$form, $link_path, $weight = 100, $function_history = array()) {
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!is_string($link_path)){
    cf_error_not_string($function_history, 'link_path');
    return;
  }

  if (!is_numeric($weight)){
    cf_error_not_numeric($function_history, 'weight');
    return;
  }

  $form['actions']['cancel'] = array(
    '#type' => 'link',
    '#title' => t("Cancel"),
    '#href' =>  $link_path,
    '#weight' => $weight,
  );
}

/**
 * Alter the field ui field overview form and make it more user-friendly.
 */
function content_easement_field_ui_form_field_ui_field_overview_form_alter(&$form, &$form_state, $form_id){
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    $form = cf_page_not_accessible($form_state);
    return;
  }

  if (!isset($form['#id'])) $form['#id'] = '';

  if (function_exists('cf_version_exists')) {
    if (cf_is_not_form_state('form_state', $form_state, WATCHDOG_ERROR)){
      $form = cf_page_not_accessible($form_state, $form['#id']);
      return;
    }
  }
  else {
    if (cf_is_not_form_state($function_history, 'form_state', $form_state, WATCHDOG_ERROR)){
      $form = cf_page_not_accessible($form_state, $form['#id']);
      return;
    }
  }

  $is_content_easement_page = FALSE;

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 1){
    $is_content_easement_page = TRUE;

    $node_type_object = content_easement_field_ui_overview_form_process_easement_types($form, $form_state, $form_id);

    if ($node_type_object === FALSE){
      return;
    }

    content_easement_field_ui_add_cancel_button($form, 'admin/structure/easement/types', 100, $function_history);
  }

  if (!array_key_exists('additional_settings', $form)){
    $form['additional_settings'] = array(
      '#type' => 'vertical_tabs',
    );
  }

  if (cf_has_array_key('_add_new_field', $form['fields'])){
    if ($is_content_easement_page){
      $form['fields']['_add_new_field']['label']['#type'] = 'hidden';
      $form['fields']['_add_new_field']['label']['#value'] = '';

      $form['fields']['_add_new_field']['field_name']['#type'] = 'hidden';
      $form['fields']['_add_new_field']['field_name']['#value'] = '';
    }

    $form['fields']['_add_new_field']['#attributes'] = array('style' => 'display: none;');

    $form['new_field'] = array(
      '#type' => 'fieldset',
      '#title' => t("Add New Field"),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['new_field']['description'] = array(
      '#type' => 'item',
      '#title' => t("Here you may add a new field to the form"),
      '#description' => t("When adding a new field, you must select the field-type and the widget-type of that field."),
    );

    foreach ($form['fields']['_add_new_field'] as $key => $value){
      if ($key == 'weight' || $key == 'parent_wrapper') continue;
      if (preg_match('/^#/i', $key) == 1) continue;

      $form['new_field'][$key] = array();

      foreach ($value as $subkey => $subvalue){
        if ($subkey == '#prefix' || $subkey == '#suffix') continue;

        $form['new_field'][$key][$subkey] = &$form['fields']['_add_new_field'][$key][$subkey];
      }
    }
  }

  if (cf_has_array_key('_add_existing_field', $form['fields'])){
    if ($is_content_easement_page){
      $form['fields']['_add_existing_field']['label']['#type'] = 'hidden';
      $form['fields']['_add_existing_field']['label']['#value'] = '';
    }

    $form['fields']['_add_existing_field']['label']['#prefix'] = '<div class="label-input"><div class="add-new-placeholder">' . t("Share existing field") .'</div>';

    $form['fields']['_add_existing_field']['#attributes'] = array('style' => 'display: none;');

    $form['share_field'] = array(
      '#type' => 'fieldset',
      '#title' => t("Share Existing Field"),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['share_field']['description'] = array(
      '#type' => 'item',
      '#title' => t("Here you may share a field from a different form"),
      '#description' => t("Sharing fields is for advanced use only.") . "<br>\n" .
                        t("Sharing fields allows for forms to have fields that share the same database column."),
    );

    foreach ($form['fields']['_add_existing_field'] as $key => $value){
      if ($key == 'weight' || $key == 'parent_wrapper') continue;
      if (preg_match('/^#/i', $key) == 1) continue;

      $form['share_field'][$key] = array();

      foreach ($value as $subkey => $subvalue){
        if ($subkey == '#prefix' || $subkey == '#suffix') continue;

        $form['share_field'][$key][$subkey] = &$form['fields']['_add_existing_field'][$key][$subkey];
      }
    }
  }

  if ($is_content_easement_page && module_exists('content_easement_category')){
    $query = content_easement_category_get_type_mappings(array('type_id' => $node_type_object->id), $function_history);

    if (is_object($query)){
      $node_type_category_object = $query->execute()->fetchObject();

      if (!is_object($node_type_category_object) && !user_access('create catagoryless node types')){
        cf_error_invalid_object($function_history, 'node_type_category_object');
        return cf_page_not_accessible($form_state, $form['#id']);
      }
    }
    else {
      cf_error_invalid_object($function_history, 'query');
      return cf_page_not_accessible($form_state, $form['#id']);
    }

    $form['easement_settings']['category'] = array(
      '#type' => 'hidden',
      '#value' => is_object($node_type_category_object) ? $node_type_category_object->category_id : '',
    );

    if (cf_has_array_key('_add_existing_field', $form['fields']) && is_object($node_type_category_object)){
      if (is_array($form['fields']['_add_existing_field']['field_name']['#options'])){
        foreach (array_keys($form['fields']['_add_existing_field']['field_name']['#options']) as $key){
          if (preg_match('/^field_' . $node_type_category_object->machine_name . '_\d+$/', $key) == 0){
            unset($form['fields']['_add_existing_field']['field_name']['#options'][$key]);
          }
        }

        if (empty($form['fields']['_add_existing_field']['field_name']['#options'])){
          unset($form['fields']['_add_existing_field']);
          unset($form['share_field']);
        }
      }
      else {
        unset($form['fields']['_add_existing_field']);
        unset($form['share_field']);
      }
    }
  }

  if (module_exists('field_group')){
    if ($is_content_easement_page){
      $form['fields']['_add_new_group']['label']['#type'] = 'hidden';
      $form['fields']['_add_new_group']['label']['#value'] = '';

      $form['fields']['_add_new_group']['group_name']['#type'] = 'hidden';
      $form['fields']['_add_new_group']['group_name']['#value'] = '';
    }

    $form['fields']['_add_new_group']['#attributes'] = array('style' => 'display: none;');

    $form['add_group'] = array(
      '#type' => 'fieldset',
      '#title' => t("Add New Group"),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['add_group']['description'] = array(
      '#type' => 'item',
      '#title' => t("Here you may add a new group to the form"),
      '#description' => t("Field groups are different types of groups used for grouping individual fields in very specific ways.") . "<br>\n" .
                        t("The most commonly used field group types are fieldsets and vertical tabs."),
    );

    foreach ($form['fields']['_add_new_group'] as $key => $value){
      if ($key == 'weight' || $key == 'parent_wrapper') continue;
      if (preg_match('/^#/i', $key) == 1) continue;

      $form['add_group'][$key] = array();

      if ($key == 'format' && isset($value['type'])){
        foreach ($value['type'] as $subkey => $subvalue){
          $form['add_group'][$key][$subkey] = &$form['fields']['_add_new_group'][$key]['type'][$subkey];
        }
      }
      else {
        foreach ($value as $subkey => $subvalue){
          if ($subkey == '#prefix' || $subkey == '#suffix') continue;

          // Note: for some reason if group_name is a reference, then the data will not make it to the validation proccess
          if ($key == 'group_name'){
            $form['add_group'][$key][$subkey] = $form['fields']['_add_new_group'][$key][$subkey];
          }
          else {
            $form['add_group'][$key][$subkey] = &$form['fields']['_add_new_group'][$key][$subkey];
          }
        }
      }
    }

    $form['add_group']['format']['#description'] = t("The type of group to create.");
    $form['add_group']['format']['#empty_option'] = t("- Select a group type -");
    $form['add_group']['format']['#default_value'] = '';

    // ensure that the content easement field group field ui validation happens first to guarantee that the field names are properly generated
    if (in_array('field_group_field_overview_validate', $form['#validate'])){
      $form['#validate'][array_search('field_group_field_overview_validate', $form['#validate'], TRUE)] = 'content_easement_field_ui_field_group_field_overview_validate';
    }
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'content_easement_field_ui') . '/includes/field_ui.js';

  // ensure that the content easement field ui validation happens first to guarantee that the field names are properly generated
  if (in_array('field_ui_field_overview_form_validate', $form['#validate'])){
    $form['#validate'][array_search('field_ui_field_overview_form_validate', $form['#validate'], TRUE)] = 'content_easement_field_ui_field_overview_form_validate';
  }

  if ($is_content_easement_page){
    $form['#submit'][] = 'content_easement_field_ui_field_overview_form_submit';
  }
}

/**
 * Validate handler for the content easmeent field overview form.
 */
function content_easement_field_ui_field_overview_form_validate($form, &$form_state) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_exists, 'form');
    form_set_error('', "Unrecoverable error: 'invalid form paramter', unable to continue.");
    return;
  }

  if (function_exists('cf_version_exists')) {
    if (cf_is_not_form_state('form_state', $form_state)){
      form_set_error('', "Unrecoverable error: 'invalid form_state parameter', unable to continue.");
      return;
    }
  }
  else {
    if (cf_is_not_form_state($function_history, 'form_state', $form_state)){
      form_set_error('', "Unrecoverable error: 'invalid form_state parameter', unable to continue.");
      return;
    }
  }

  if (array_key_exists('easement_settings', $form)){
    if (!empty($form_state['values']['fields']['_add_new_field']['type'])) {
      if (isset($form_state['build_info']['args']['1']->type)){
        $node_type = $form_state['build_info']['args']['1']->type;
      }
      else {
        form_set_error('', "Unrecoverable error: 'node type is missing', unable to continue.");
        return;
      }

      $field_name  = content_easement_field_ui_generate_machine_name($node_type);

      if (!$field_name){
        form_set_error('', "Unrecoverable error: 'failed to load content easement category type id', unable to continue.");
      }

      $form_state['values']['fields']['_add_new_field']['label'] = $form_state['values']['fields']['_add_new_field']['type'] . ' field';
      $form_state['values']['fields']['_add_new_field']['field_name'] = $field_name;
    }
    else if (!empty($form_state['values']['fields']['_add_existing_field']['field_name'])) {
      // extract the label
      $matches = array();
      $field_name = $form_state['values']['fields']['_add_existing_field']['field_name'];

      if (preg_match('@.*: ' . $field_name . ' \((.*)\)$@i', $form['fields']['_add_existing_field']['field_name']['#options'][$field_name], $matches) == 1){
        $form_state['values']['fields']['_add_existing_field']['label'] = $matches['1'];
      }
    }
  }
  else {
    // for reasons unknown all fields expect the label field end up with the data in the proper location, this fixes the data for the label field
    if (isset($form_state['values']['new_field']['label'])){
      $form_state['values']['fields']['_add_new_field']['label'] = $form_state['values']['new_field']['label'];
    }
    else if (isset($form_state['values']['share_field']['label'])){
      $form_state['values']['fields']['_add_existing_field']['label'] = $form_state['values']['share_field']['label'];
    }
  }

  field_ui_field_overview_form_validate($form, $form_state);
}

/**
 * Validate handler for the content easmeent field overview form.
 */
function content_easement_field_ui_field_group_field_overview_validate($form, &$form_state) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    form_set_error('', "Unrecoverable error: 'invalid form paramter', unable to continue.");
    return;
  }

  if (function_exists('cf_version_exists')) {
    if (cf_is_not_form_state('form_state', $form_state)){
      form_set_error('', "Unrecoverable error: 'invalid form_state parameter', unable to continue.");
      return;
    }
  }
  else {
    if (cf_is_not_form_state($function_history, 'form_state', $form_state)){
      form_set_error('', "Unrecoverable error: 'invalid form_state parameter', unable to continue.");
      return;
    }
  }

  if (array_key_exists('easement_settings', $form)){
    if (!empty($form_state['values']['fields']['_add_new_field']['type']) || !empty($form_state['values']['fields']['_add_existing_field']['field_name'])) {
      return;
    }

    if (!empty($form_state['values']['add_group']['format'])){
      if (isset($form_state['build_info']['args']['1']->type)){
        $node_type = $form_state['build_info']['args']['1']->type;
      }
      else {
        form_set_error('', "Unrecoverable error: 'node type is missing', unable to continue.");
        return;
      }

      $group_name = content_easement_field_ui_generate_machine_name($node_type);

      if (!$group_name){
        form_set_error('', "Unrecoverable error: 'failed to load content easement category type id', unable to continue.");
      }

      $form_state['values']['fields']['_add_new_group']['label'] = $form_state['values']['add_group']['format'] . ' group';
      $form_state['values']['fields']['_add_new_group']['group_name'] = $group_name;
      $form_state['values']['fields']['_add_new_group']['format']['type'] = $form_state['values']['add_group']['format'];
    }
  }
  else {
    if (!empty($form_state['values']['fields']['_add_new_field']['type']) || !empty($form_state['values']['fields']['_add_existing_field']['field_name'])) {
      return;
    }

    if (!empty($form_state['values']['add_group']['format'])){
      $form_state['values']['fields']['_add_new_group']['label'] = $form_state['values']['add_group']['label'];
      $form_state['values']['fields']['_add_new_group']['group_name'] = $form_state['values']['add_group']['group_name'];
      $form_state['values']['fields']['_add_new_group']['format']['type'] = $form_state['values']['add_group']['format'];
    }
  }

  field_group_field_overview_validate($form, $form_state);
}

/**
 * Submit handler for the content easmeent field overview form.
 */
function content_easement_field_ui_field_overview_form_submit($form, &$form_state) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (function_exists('cf_version_exists')) {
    if (cf_is_not_form_state('form_state', $form_state)){
      return;
    }
  }
  else {
    if (cf_is_not_form_state($function_history, 'form_state', $form_state)){
      return;
    }
  }

  if (is_array($form_state['redirect'])){
    foreach ($form_state['redirect'] as $key => $path){
      if (is_string($form_state['redirect'][$key])) {
        $form_state['redirect'][$key] = preg_replace('@^admin/structure/types/@i', 'admin/structure/easement/types/', $path);
      }
      else if (is_array($form_state['redirect'][$key])) {
        if (isset($form_state['redirect'][$key]['path'])){
          $form_state['redirect'][$key]['path'] = preg_replace('@^admin/structure/types/@i', 'admin/structure/easement/types/', $form_state['redirect'][$key]['path']);
        }

        if (is_array($form_state['redirect'][$key]['query']) && is_array($form_state['redirect'][$key]['query']['destinations'])){
          foreach ($form_state['redirect'][$key]['query']['destinations'] as $subkey => $subpath){
            $form_state['redirect'][$key]['query']['destinations'][$subkey] = preg_replace('@^admin/structure/types/@i', 'admin/structure/easement/types/', $subpath);
          }
        }
      }
    }
  }
  else {
    if (isset($form_state['build_info']['args']['1']->type)){
      if (isset($form_state['input']['form_id']) && $form_state['input']['form_id'] == 'field_ui_display_overview_form'){
        $form_state['redirect'] = 'admin/structure/easement/types/manage/' . $form_state['build_info']['args']['1']->type . '/display';
      }
      else {
        $form_state['redirect'] = 'admin/structure/easement/types/manage/' . $form_state['build_info']['args']['1']->type . '/fields';
      }
    }
    else {
      $form_state['redirect'] = 'admin/structure/easement/types';
    }
  }
}

/**
 * Add a cancel buttons to improve user experience.
 */
function content_easement_field_ui_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 0 || !isset($form['#instance']['bundle'])){
    return;
  }

  content_easement_field_ui_add_cancel_button($form, 'admin/structure/easement/types/manage/' . $form['#instance']['bundle'] . '/fields', 100, $function_history);

  $form['#submit'][] = 'content_easement_field_ui_form_submit';
}

/**
 * Add a cancel buttons to improve user experience.
 */
function content_easement_field_ui_form_field_ui_field_settings_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 0 || !isset($form['#bundle'])){
    return;
  }

  content_easement_field_ui_add_cancel_button($form, 'admin/structure/easement/types/manage/' . $form['#bundle'] . '/fields', 100, $function_history);

  $form['#submit'][] = 'content_easement_field_ui_form_submit';
}

/**
 * Add a cancel buttons to improve user experience.
 */
function content_easement_field_ui_form_field_ui_widget_type_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 0 || !isset($form['#bundle'])){
    return;
  }

  content_easement_field_ui_add_cancel_button($form, 'admin/structure/easement/types/manage/' . $form['#bundle'] . '/fields', 100, $function_history);

  $form['#submit'][] = 'content_easement_field_ui_form_submit';
}

/**
 * Add a cancel buttons to improve user experience.
 */
function content_easement_field_ui_form_field_ui_field_delete_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 0 || !isset($form['bundle']['#value'])){
    return;
  }

  content_easement_field_ui_add_cancel_button($form, 'admin/structure/easement/types/manage/' . $form['bundle']['#value'] . '/fields', 100, $function_history);

  $form['#submit'][] = 'content_easement_field_ui_form_submit';
}

/**
 * Alter the display overview to handle field group changes as well as add cancel button if applicable.
 */
function content_easement_field_ui_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    $form = cf_page_not_accessible($form_state);
    return;
  }

  if (!isset($form['#id'])) $form['#id'] = '';

  if (cf_is_not_form_state($function_history, 'form_state', $form_state)){
    $form = cf_page_not_accessible($form_state, $form['#id']);
    return;
  }

  $is_content_easement_page = FALSE;
  $field_group_exists = module_exists('field_group');

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 1){
    $is_content_easement_page = TRUE;

    $node_type_object = content_easement_field_ui_overview_form_process_easement_types($form, $form_state, $form_id);

    if ($node_type_object === FALSE){
      return;
    }

    content_easement_field_ui_add_cancel_button($form, 'admin/structure/easement/types', 100, $function_history);

    if ($field_group_exists){
      $form['fields']['_add_new_group']['label']['#type'] = 'hidden';
      $form['fields']['_add_new_group']['label']['#value'] = '';

      $form['fields']['_add_new_group']['group_name']['#type'] = 'hidden';
      $form['fields']['_add_new_group']['group_name']['#value'] = '';
    }
  }

  if (!array_key_exists('additional_settings', $form)){
    $form['additional_settings'] = array(
      '#type' => 'vertical_tabs',
    );
  }

  if ($field_group_exists){
    $form['fields']['_add_new_group']['#attributes'] = array('style' => 'display: none;');

    $form['add_group'] = array(
      '#type' => 'fieldset',
      '#title' => t("Add New Group"),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
      '#group' => 'additional_settings',
    );

    $form['add_group']['description'] = array(
      '#type' => 'item',
      '#title' => t("Here you may add a new group to the form"),
      '#description' => t("Field groups are different types of groups used for grouping individual fields in very specific ways.") . "<br>\n" .
                        t("The most commonly used field group types are fieldsets and vertical tabs."),
    );

    foreach ($form['fields']['_add_new_group'] as $key => $value){
      if ($key == 'weight' || $key == 'parent_wrapper') continue;
      if (preg_match('/^#/i', $key) == 1) continue;

      $form['add_group'][$key] = array();

      if ($key == 'format' && isset($value['type'])){
        foreach ($value['type'] as $subkey => $subvalue){
          $form['add_group'][$key][$subkey] = &$form['fields']['_add_new_group'][$key]['type'][$subkey];
        }
      }
      else {
        foreach ($value as $subkey => $subvalue){
          if ($subkey == '#prefix' || $subkey == '#suffix') continue;

          // Note: for some reason if group_name is a reference, then the data will not make it to the validation proccess
          if ($key == 'group_name'){
            $form['add_group'][$key][$subkey] = $form['fields']['_add_new_group'][$key][$subkey];
          }
          else {
            $form['add_group'][$key][$subkey] = &$form['fields']['_add_new_group'][$key][$subkey];
          }
        }
      }
    }

    $form['add_group']['format']['#description'] = t("The type of group to create.");
    $form['add_group']['format']['#empty_option'] = t("- Select a group type -");
    $form['add_group']['format']['#default_value'] = '';
  }

  if (!array_key_exists('#submit', $form) || !is_array($form['#submit'])){
    $form['#submit'] = array();
  }

  if (!array_key_exists('#validate', $form) || !is_array($form['#validate'])){
    $form['#validate'] = array();
  }

  if ($field_group_exists){
    // ensure that the content easement field group field ui validation happens first to guarantee that the field names are properly generated
    if (in_array('field_group_field_overview_validate', $form['#validate'])){
      $form['#validate'][array_search('field_group_field_overview_validate', $form['#validate'], TRUE)] = 'content_easement_field_ui_field_group_field_overview_validate';
    }
  }

  if ($is_content_easement_page){
    $form['#submit'][] = 'content_easement_field_ui_field_overview_form_submit';
  }
}

/**
 * Add a cancel buttons to improve user experience.
 */
function content_easement_field_ui_form_field_group_delete_form_alter(&$form, &$form_state, $form_id) {
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    return;
  }

  if (!isset($_GET['q']) || preg_match('@^admin/structure/easement/types(/.*)$@', $_GET['q']) == 0){
    return;
  }

  if (!isset($form_state['build_info']['args']['0']) || !is_object($form_state['build_info']['args']['0'])){
    return;
  }

  foreach ($form['#redirect'] as $key => $value){
    $form['#redirect'][$key] = preg_replace('@^admin/structure/types/@i', 'admin/structure/easement/types/', $value);
  }

  if (isset($form['actions']['cancel']['#href'])){
    $form['actions']['cancel']['#href'] = preg_replace('@^admin/structure/types/@i', 'admin/structure/easement/types/', $value);
  }

  if (isset($form['actions']['cancel']['#options']) && is_array($form['actions']['cancel']['#options'])){
    foreach ($form['actions']['cancel']['#options'] as $key => $value){
      $form['actions']['cancel']['#options'][$key] = preg_replace('@^admin/structure/types/@i', 'admin/structure/easement/types/', $value);
    }
  }
}

/**
 * Ensure that the form redirects go back to the content easement management pages and not the content type management pages during a form submit.
 */
function content_easement_field_ui_form_submit($form, &$form_state) {
  $destinations = !empty($_REQUEST['destinations']) ? $_REQUEST['destinations'] : array();

  if (empty($destinations)) {
    if (isset($form['actions']['cancel']['#href'])){
      $form_state['redirect'] = $form['actions']['cancel']['#href'];
    }
    else {
      $form_state['redirect'] = 'admin/structure/easement/types';
    }
  }
  else {
    unset($_REQUEST['destinations']);
    $form_state['redirect'] = field_ui_get_destinations($destinations);
  }
}

/**
 * Ensure that the form redirects go to the content easement field ui management pages and not the content type field ui management pages after form submit.
 */
function content_easement_field_ui_content_easement_types_validate_alter($form, &$form_state, $type_data){
  // prevent 'save_continue' from redirecting to the content type form by modifying the value if it exists
  if ($form_state['clicked_button']['#parents'][0] === 'save_continue'){
    $form_state['clicked_button']['#parents'][0] = 'save_continue_content_easement';
  }
}

/**
 * Ensure that the form redirects go to the content easement field ui management pages and not the content type field ui management pages after form submit.
 */
function content_easement_field_ui_content_easement_types_submit_alter($form, &$form_state, $type_data){
  if ($form_state['clicked_button']['#parents'][0] === 'save_continue_content_easement'){
    $form_state['redirect'] = 'admin/structure/easement/types/manage/' . $form_state['values']['type'] . '/fields';
  }
}

/**
 * Converts the machine name into an appropriate name for the given node type.
 * This name is unique down to the microsecond.
 */
function content_easement_field_ui_generate_machine_name($node_type){
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  $machine_name  = '_' . preg_replace('/\./', '', microtime(TRUE));

  if (module_exists('content_easement_category')){
    $type_id = content_easement_get_type_id($node_type);

    if ($type_id === FALSE){
      return FALSE;
    }

    $category_types_object = content_easement_category_get_categories(array('id' => $type_id), $function_history);
    $category = NULL;

    if (is_object($category_types_object)){
      $category = $category_types_object->execute()->fetchObject();
    }

    if (is_object($category)){
      $machine_name = $category->machine_name . $machine_name;
    }
  }

  return $machine_name;
}

/**
 * This handles adding the content easement group alterations to the passed form.
 * This is provided for the field overview and display overview alter functions.
 */
function content_easement_field_ui_overview_form_process_easement_types(&$form, &$form_state, $form_id){
  $function_history = array();
  cf_error_append_history($function_history, __FUNCTION__);

  if (!is_array($form)){
    cf_error_invalid_array($function_history, 'form');
    $form = cf_page_not_accessible($form_state);
    return FALSE;
  }

  if (!isset($form['#id'])) $form['#id'] = '';

  if (cf_is_not_form_state($function_history, 'form_state', $form_state)){
    $form = cf_page_not_accessible($form_state, $form['#id']);
    return FALSE;
  }

  // This form is called by more than just the manage node form, so make sure only do things for the node manage form
  if (!isset($form_state['build_info']['args']['0']) || !is_string($form_state['build_info']['args']['0']) || $form_state['build_info']['args']['0'] != 'node'){
    return FALSE;
  }

  if (!isset($form_state['build_info']['args']['1']) || !is_object($form_state['build_info']['args']['1'])){
    cf_error_invalid_object($function_history, 'form_state[\'build_info\'][\'args\'][\'1\']');
    $form = cf_page_not_accessible($form_state, $form['#id']);
    return FALSE;
  }

  $query = content_easement_get_types($function_history);

  if (is_object($query)){
    $query->condition('nt.type', strtolower($form_state['build_info']['args']['1']->type), '=');
    $node_type_object = $query->execute()->fetchObject();

    if (!is_object($node_type_object)){
      cf_error_invalid_object($function_history, 'node_type_object', WATCHDOG_WARNING);
      $form = cf_page_not_accessible($form_state, $form['#id']);
      return FALSE;
    }
  }
  else {
    cf_error_invalid_object($function_exists, 'query');
    $form = cf_page_not_accessible($form_state, $form['#id']);
    return FALSE;
  }

  if (is_array($form['fields'])){
    global $base_url;
    $base_path = base_path();

    foreach ($form['fields'] as $key => $value){
      if ($key == '_add_new_field' || $key == '_add_existing_field') continue;

      if (module_exists('field_group')){
        if ($key == '_add_new_group') continue;

        if (cf_has_array_key('#row_type', $value) && $value['#row_type'] == 'group'){
          if (cf_has_array_key('delete', $value, $function_history) && cf_has_array_key('#markup', $value['delete'], $function_history)){
            $form['fields'][$key]['delete']['#markup'] = preg_replace('@"' . $base_path . 'admin/structure/types/manage/@', '"' . $base_path . 'admin/structure/easement/types/manage/', $form['fields'][$key]['delete']['#markup']);
          }

          if (cf_has_array_key('settings_edit', $value, $function_history) && cf_has_array_key('#suffix', $value['settings_edit'], $function_history)){
            $form['fields'][$key]['settings_edit']['#suffix'] = preg_replace('@"' . $base_path . 'admin/structure/types/manage/@', '"' . $base_path . 'admin/structure/easement/types/manage/', $form['fields'][$key]['settings_edit']['#suffix']);
          }

          continue;
        }
      }

      if (cf_has_array_key('edit', $value, $function_history) && cf_has_array_key('#href', $value['edit'], $function_history)){
        $form['fields'][$key]['edit']['#href'] = preg_replace('@^admin/structure/types/manage/@', 'admin/structure/easement/types/manage/', $form['fields'][$key]['edit']['#href']);
      }

      if (cf_has_array_key('delete', $value, $function_history) && cf_has_array_key('#href', $value['delete'], $function_history)){
        $form['fields'][$key]['delete']['#href'] = preg_replace('@^admin/structure/types/manage/@', 'admin/structure/easement/types/manage/', $form['fields'][$key]['delete']['#href']);
      }
    }
  }

  $form['easement_settings'] = array(
    '#type' => 'hidden',
    '#value' => '',
  );

  $form['easement_settings']['type'] = array(
    '#type' => 'hidden',
    '#value' => $node_type_object->type,
  );

  $form['easement_settings']['id'] = array(
    '#type' => 'hidden',
    '#value' => $node_type_object->id,
  );

  return $node_type_object;
}
