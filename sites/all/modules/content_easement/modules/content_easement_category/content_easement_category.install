<?php

/**
 * Implementation of hook_schema().
 */
function content_easement_category_schema() {
  $schema = array();

  $schema['content_easement_categories'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'description' => "A numerical primary key that uniquely represents this category. Foreign keys should point to this.",
        'not null' => TRUE,
        'unsigned' => TRUE,
        'size' => 'big',
      ),
      'human_name' => array(
        'type' => 'varchar',
        'description' => "The name of this privileged content type as presented to to users.",
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'machine_name' => array(
        'type' => 'varchar',
        'description' => "The internal name is used as a prefix for all fields created underneath this group. Can be used as a regex to easily associate fields with their primary/original content type. This is intentionally left small to prevent the generated field names from becoming too large.",
        'length' => 10,
        'not null' => TRUE,
        'default' => '',
      ),
      'create_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to create node types under this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'read_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to read node types under this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'update_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to update node types under this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'delete_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to delete node types under this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'node_create_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to create nodes for content of this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'node_read_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to read nodes for content of this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'node_update_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to update nodes for content of this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'node_delete_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to delete nodes for content of this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'node_view_unpublished_id' => array(
        'type' => 'int',
        'description' => "The id of the role that is authorized to view unpublished nodes for content of this content easement category.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'big',
        'default' => 0,
      ),
      'node_anonymous_crud' => array(
        'type' => 'int',
        'description' => "Anonymous is not treated as a normal user and therefore this represents the CRUD for content of this content easement category for anonymous.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
      'node_exclusive_crud' => array(
        'type' => 'int',
        'description' => "When these CRUD values are set to TRUE, then the node access id defined in the table will be exclusive. Example, if a the read value from this crud is set to TRUE and the node_read_id is set to 5, all users who are not in group 5 will be explicitly denied read access to this node.",
        'not null' => FALSE,
        'unsigned' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
    ),
    'primary keys' => array('id'),
    'unique keys' => array(
      'machine_name' => array('machine_name')
    ),
  );

  $schema['content_easement_categories_type_mappings'] = array(
    'fields' => array(
      'type_id' => array(
        'type' => 'int',
        'description' => "A numerical primary key that uniquely represents the node type.",
        'not null' => TRUE,
        'unsigned' => TRUE,
        'size' => 'big'
      ),
      'category_id' => array(
        'type' => 'int',
        'description' => "A numerical primary key that uniquely represents the category.",
        'not null' => TRUE,
        'unsigned' => TRUE,
        'size' => 'big',
      ),
    ),
    'primary key' => array('type_id'),
    'foreign keys' => array(
      'type' => array(
        'table' => 'content_easement_types',
        'columns' => array('id' => 'id'),
      ),
      'category' => array(
        'table' => 'content_easement_categories',
        'columns' => array('id' => 'id'),
      ),
    ),
  );

  return $schema;
}
