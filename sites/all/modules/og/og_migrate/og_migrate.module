<?php

/**
 * @file
 * Migrate and upgrade Organic groups data.
 */

/**
 * Migrate plugin not executed.
 */
define('OG_MIGRATE_NOT_EXECUTED', 0);

/**
 * Migrate plugin executed successfully.
 */
define('OG_MIGRATE_EXECUTED', 1);

/**
 * Migrate plugin failed execution.
 */
define('OG_MIGRATE_FAILED', 2);

/**
 * Implements hook_menu().
 */
function og_migrate_menu() {
  $items['admin/config/group/group-migrate'] = array(
    'title' => 'Organic groups migrate',
    'description' => 'Migrate Organic groups data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_migrate_admin'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function og_migrate_ctools_plugin_directory($module, $type) {
  // Safety: go away if CTools is not at an appropriate version.
  if (!module_invoke('ctools', 'api_version', OG_MIGRATE_REQUIRED_CTOOLS_API)) {
    return;
  }
  if ($module == 'og_migrate' && $type == 'og_migrate') {
    return 'plugins/og_migrate';
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function og_migrate_ctools_plugin_type() {
  return array(
    'og_migrate' => array(
      'process' => 'og_migrate_process',
    ),
  );
}

/**
 * Implements hook_help().
 */
function og_migrate_help($path, $arg) {
  if ($path != 'admin/config/group/group-migrate' && $path != 'batch' && strpos($path, '#') === FALSE
      && user_access('access administration pages') && og_needs_migrate()) {
    if ($path == 'admin/reports/status') {
      $message = t('Organic groups or one of its modules needs to migrate data.');
    }
    else {
      $message = t('Organic groups or one of its modules needs to <a href="@url">migrate data</a>.', array('@url' => url('admin/config/group/group-migrate')));
    }
    drupal_set_message($message, 'error');
  }
}

/**
 * Implements hook_init().
 */
function og_migrate_init() {
  $item = menu_get_item();
  if ($item['path'] == 'batch') {
   // Load all the plugins, so it will work in the batch.
   og_migrate_get_plugins();
  }
  elseif (!og_needs_migrate() && user_access('access administration pages') && flood_is_allowed('og_migrate_warning', 1)) {
    flood_register_event('og_migrate_warning');
    drupal_set_message(t('Organic groups migrate should be disabled when not in use.'), 'status');
  }
  og_migrate_register_plugins();
}

/**
 * Register plugins that are not in the database yet.
 */
function og_migrate_register_plugins() {
  $names = array();
  foreach (og_migrate_get_plugins() as $name => $plugin) {
    $names[$name] = $name;
  }

  $query = db_select('og_migrate', 'ogm');
  $result = $query->fields('ogm', array('plugin'))
    ->execute()
    ->fetchAll();

  foreach ($result as $row) {
    unset($names[$row->plugin]);
  }

  if ($names) {
    foreach ($names as $name) {
      og_migrate_write_record($name, OG_MIGRATE_NOT_EXECUTED);
    }
  }
}

/**
 * Write a plugin to the database along with its status.
 *
 * @param $name
 *   The plugin name.
 * @param $status
 *   The plugin status. Defaults to OG_MIGRATE_EXECUTED
 */
function og_migrate_write_record($name, $status = OG_MIGRATE_EXECUTED) {
  // Delete the previous record.
  db_delete('og_migrate')
    ->condition('plugin', $name)
        ->execute();

  // Insert the record.
  $object = new stdClass();
  $object->plugin = $name;
  $object->status = $status;
  drupal_write_record('og_migrate', $object);

}

/**
 * CTools callback; Process the og-migrate plugins.
 */
function og_migrate_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
    'dependency' => array(),
    'access callback' => TRUE,
  );
}

/**
 * Get a certain organic groups migrate plugin.
 *
 * @param $plugin_name
 *   The plugin name.
 */
function og_migrate_get_plugin($plugin_name) {
  ctools_include('plugins');
  return ctools_get_plugins('og_migrate', 'og_migrate', $plugin_name);
}

/**
 * Get all organic groups migrate plugins.
 */
function og_migrate_get_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('og_migrate', 'og_migrate');
}


/**
 * Get all the plugins after executing their access callback functions.
 *
 * @return
 *   Array with plugins. If no plugins are valid, return empty array.
 */
function og_migrate_get_accessibale_plugins() {
  $plugins = array();
  foreach (og_migrate_get_plugins() as $name => $plugin) {
    if ($plugin['access callback'] === TRUE || call_user_func($plugin['access callback'])) {
      $plugins[$name] = $plugin;
    }
  }

  return $plugins;
}

/**
 * Access callback for og_update_7000() related migration items.
 */
function og_migrate_7000_access() {
  return db_table_exists('d6_og');

}

/**
 * Migration overview.
 */
function og_migrate_admin() {
  $form = array();

  $plugins = og_migrate_get_accessibale_plugins();

  if ($plugins) {
    $header = array(
      'name' => t('Name'),
      'description' => t('Description'),
      'status' => t('Status'),
    );

    $query = db_select('og_migrate', 'ogm');
    $result = $query->fields('ogm', array('plugin', 'status'))
      ->execute()
      ->fetchAll();

    $status_map = og_migrate_status();
    $status = array();
    foreach ($result as $row) {
      $status[$row->plugin] = $row->status;
    }

    $options = array();
    foreach ($plugins as $name => $plugin) {
      $options[$plugin['migrate callback']] = array(
        'name' => filter_xss($plugin['name']),
        'description' => filter_xss($plugin['description']),
        'status' => $status_map[$status[$name]],
      );
    }

    $form['migrate'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Migrate'));
  }
  else {
    $form['no-options'] = array('#markup' => t('There are no migration options.'));
  }

  return $form;
}

/**
 * Submit handler.
 *
 * TODO: Add dependency tree.
 */
function og_migrate_admin_submit($form, &$form_state) {
  if ($callbacks = array_filter($form_state['values']['migrate'])) {
    $operations = array();
    foreach ($callbacks as $callback) {
      $operations[] = array($callback, array());
    }

    og_migrate_batch($operations);
  }
}


/**
 * Helper function to create a batch.
 */
function og_migrate_batch($operations) {
  // Add the executed plugins information.
  // Get an array keyed with the plugin callback and the plugin name as the
  // value.
  $plugins_callbacks = array();
  foreach (og_migrate_get_plugins() as $name => $plugin) {
    $plugins_callbacks[$plugin['migrate callback']] = $name;
  }

  $plugins = array();
  foreach ($operations as $operation) {
    $callback = $operation[0];
    $plugins[] = $plugins_callbacks[$callback];
  }

  $batch = array(
    'title' => t('Migrating Organic groups data'),
    'operations' => $operations,
    'finished' => 'og_migrate_finished',
    'init_message' => t("Organic groups migration is starting."),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Organic groups migration has encountered an error.'),
    // This is our own key, used to retrieve the list of plugins that were
    // called.
    'og_migrate_plugins' => $plugins,
  );

  batch_set($batch);
}

/**
 * Create group, group-audience and group description fields.
 *
 * Helper function to help upgrade form Drupal 6.
 */
function og_migrate_create_fields() {
  foreach (node_type_get_types() as $type) {
    // check if the variable exists.
    if ($type_usage = variable_get('og_content_type_usage_' . $type->type)) {
      switch ($type_usage) {
        case 'group':
          $content_type['group'][] = $type->type;
          break;

        case 'group_post_standard':
        case 'group_post_wiki':
          // The type of the group content is now determined via the
          // group permissions. We only care about adding the group content
          // fields to the node.
          $content_type['group content'][] = $type->type;
          break;

      }
    }
  }

  if ($content_type) {

    // Add group and group content fields to content types.
    $fields = array(
      'group' => OG_GROUP_FIELD,
      'group content' => OG_AUDIENCE_FIELD,
    );
    foreach ($fields as $key => $field_name) {
      foreach ($content_type[$key] as $type) {
        og_create_field($field_name, 'node', $type);

        if ($key == 'group') {

          if (!field_info_field('og_description')) {
            $field = array(
              'field_name' => 'og_description',
              'type' => 'text',
              'entity_types' => array('node'),
              'cardinality' => 1,
            );
            $field = field_create_field($field);
          }

          if (!field_info_instance('node', 'og_description', $type)) {
            // Create the "description" field for the bundle.
            $instance = array(
              'field_name' => 'og_description',
              'bundle' => $type,
              'entity_type' => 'node',
              'label' => t('Group description'),
              'description' => t('This is description of the group.'),
            );
            field_create_instance($instance);
          }
        }
      }
    }
  }
}

/**
 * Batch finish callback.
 */
function og_migrate_finished($success, $results, $operations) {
  $batch = batch_get();
  $plugins = $batch['sets'][0]['og_migrate_plugins'];
  if ($success) {
    $message = format_plural(count($results), 'One post processed.', '@count posts processed.');
    $status = OG_MIGRATE_EXECUTED;
  }
  else {
    $message = t('Finished with an error.');
    $status = OG_MIGRATE_FAILED;
  }
  drupal_set_message($message);

  // TODO: This is not correct, as if there will be an error then all we be set
  // to failed.
  // Set the status in the database.
  foreach ($plugins as $plugin) {
    og_migrate_write_record($plugin, $status);
  }

  if (!empty($results)) {
    foreach ($results as $result) {
      // TODO: add results.
      // $items[] = t('Loaded node %title.', array('%title' => $result));
    }
    // Providing data for the redirected page is done through $_SESSION.
    //$_SESSION['og_migrate_results'] = $items;
  }
}

/**
 * Map the status to human readable name.
 */
function og_migrate_status() {
  return array(
    OG_MIGRATE_NOT_EXECUTED => t('Not executed'),
    OG_MIGRATE_EXECUTED => t('Executed successfully'),
    OG_MIGRATE_FAILED => t('Executed but failed'),
  );
}