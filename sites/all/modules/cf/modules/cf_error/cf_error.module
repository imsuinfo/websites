<?php
// $Id: cf_error.module,v 1.1 2010/12/06 19:04:19 thekevinday Exp $

/**
 * This provides a common solution for reporting variables as invalid to the watchdog system.
 *
 * Why:
 *   Many drupal modules lack validation of parameter arguments.
 *   Checking these arguments is important for both integrity and security.
 *   Silently failing on these arguments will only hide the problem.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $why
 *   the specific reason for this watchdog report.
 * @param $variables
 *   (optional) locale safe parameter handling for all text found in the 'why' parameter.
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 *
 */
function cf_error_invalid_variable($function_name, $argument_name, $why, array $variables = array(), $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  $variables_array = array_merge($variables, array('%argument_name' =>  $argument_name, '%function_history' => print_r($function_history, TRUE), '%why' => $why));

  // TODO: report only if a global variable is defined to say report
  // TODO: report function history only if a global variable is defined to say report function history
  // TODO: also reporting drupal_set_message($error_message, 'error'); based on current user error message settings
  watchdog('bad variable', "The argument '%argument_name' is invalid or has a problem, reason: %why, function history: %function_history", $variables_array, $severity);
}

/**
 * Reports that a given argument is supposed to be a string but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_error_not_string($function_name, $argument_name, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  cf_error_invalid_variable(__FUNCTION__, $argument_name, "Must be a string.", array(), WATCHDOG_ERROR, $function_history);
}

/**
 * Reports that a given argument is supposed to be non-empty string but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_error_empty_string($function_name, $argument_name, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  cf_error_invalid_variable(__FUNCTION__, $argument_name, "Must not be an empty string.", array(), WATCHDOG_ERROR, $function_history);
}

/**
 * Reports that a given argument is supposed to be an array but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_error_invalid_array($function_name, $argument_name, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  cf_error_invalid_variable(__FUNCTION__, $argument_name, "Not a valid array.", array(), WATCHDOG_ERROR, $function_history);
}

/**
 * Reports that a given argument is supposed to be an object but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_error_invalid_object($function_name, $argument_name, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  cf_error_invalid_variable(__FUNCTION__, $argument_name, "Not a valid object.", array(), WATCHDOG_ERROR, $function_history);
}

/**
 * Reports that a given argument is supposed to be have a specific key within its array but does not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $key_name
 *   name of the array key that is missing
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_error_missing_array_key($function_name, $argument_name, $key_name, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  if ($key_name == ''){
    return cf_error_empty_string(__FUNCTION__, 'key_name', WATCHDOG_ERROR, $function_history);
  }

  cf_error_invalid_variable(__FUNCTION__, $argument_name, "The array key '%key_name' is missing.", array('%key_name' => $key_name), WATCHDOG_ERROR, $function_history);
}

/**
 * Reports that a given argument is supposed to be numeric but is not.
 *
 * Why:
 *   See reason from cf_error_invalid_variable() function.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_error_not_numeric($function_name, $argument_name, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  cf_error_invalid_variable(__FUNCTION__, $argument_name, "Not a numeric value.", array(), WATCHDOG_ERROR, $function_history);
}

/**
 * Checks if a string is empty or not and returns TRUE when empty or not a string and FALSE otherwise.
 * When there is an error returns TRUE.
 * The purpose is to validate if a string is not empty.
 * When that variable is empty then this is considered an error.
 * This handles reporting if the string is empty
 *
 * Why:
 *   Checking that a string is empty may also require a check to see if a variable is a string.
 *   This provides a way to do that two step process in 1 step.
 *   Do not use this for any other purpose.
 *
 * @param $function_name
 *   a string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $variable
 *   the argument that is to be validated
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_is_empty_or_non_string($function_name, $argument_name, $variable, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  if (!is_string($variable)){
    cf_error_not_string(__FUNCTION__, $argument_name, $severity, $function_history);

    return TRUE;
  }

  if ($variable == ''){
    cf_error_empty_string(__FUNCTION__, $argument_name, $severity, $function_history);

    return TRUE;
  }

  return FALSE;
}

/**
 * Checks if the argument is an array with all of the default form_state array keys as defined by form_state_defaults().
 * This helps ensure that this argument is a valid form state.
 * This handles reporting if the form state is invalid.
 *
 * Why:
 *   Checking if the form_state is valid on every function call can quickly clutter up the code, reducing readability.
 *   form state is common enough to have its own cf error checking function.
 *
 * @param $function_name
 *   string that represents the name of the calling function.
 * @param $argument_name
 *   the variable name of the argument in question.
 * @param $variable
 *   the argument that is to be validated
 * @param $severity
 *   (optional) this is passed directly to watchdog and represents the severity of the report.
 * @param $function_history
 *   (optional) array of function names, ie: array('0' => 'my_function_name')
 */
function cf_is_not_form_state($function_name, $argument_name, $variable, $severity = WATCHDOG_WARNING, array $function_history = array()){
  // append calling function name
  $function_history[] = $function_name;

  if ($function_name == ''){
    cf_error_empty_string(__FUNCTION__, 'function_name', WATCHDOG_WARNING, $function_history);
  }

  if ($argument_name == ''){
    cf_error_empty_string(__FUNCTION__, 'argument_name', WATCHDOG_WARNING, $function_history);
  }

  if (!is_array($variable)){
    cf_error_invalid_array(__FUNCTION__, 'argument_name', $variable, $severity, $function_history);
    return TRUE;
  }

  foreach (array_keys(form_state_defaults()) as $key){
    if (!array_key_exists($key, $variable)){
      cf_error_missing_array_key(__FUNCTION__, $argument_name, $key, $severity, $function_history);

      return TRUE;
    }
  }

  return FALSE;
}
?>
