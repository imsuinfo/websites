<?php

/**
 * @file
 * Tests that duplicate classes, interfaces, and groups work.
 */

module_load_include('php', 'api', 'tests/api_test_case');

/**
 * Tests that duplicate classes, interfaces, and groups work.
 */
class ApiDuplicatesTestCase extends ApiWebPagesBaseTest {
  public static function getInfo() {
    return array(
      'name' => 'Duplicates',
      'description' => 'Tests that duplicate classes, interfaces, and groups work.',
      'group' => 'API module',
    );
  }

  function setUp() {
    $this->baseSetUp();

    // Set up a files branch, but do not exclude the usual directories.
    $this->branch_info = $this->setUpBranchUI('', TRUE, array('excluded' => ''));

    // We don't need the PHP branch for this test, so for speed, remove it.
    $this->removePHPBranch();

    // Parse the code.
    $this->resetBranchesAndCache();
    api_update_all_branches();
    $this->processApiParseQueue();
  }

  /**
   * Tests that duplicate classes, interfaces, and groups work.
   */
  function testDuplicates() {
    // Verify that both Sample classes and interfaces are listed.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes');
    $this->assertLink('Sample', 0, 'Sample is present once');
    $this->assertLink('Sample', 1, 'Sample is present twice');
    $this->assertLink('SampleInterface', 0, 'SampleInterface is present once');
    $this->assertLink('SampleInterface', 1, 'SampleInterface is present twice');

    // Visit both the Sample pages and verify they show the interface they
    // implement, and that each links to the other one.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/class/Sample');
    $this->assertLinkURLSubstring('Multiple interfaces named SampleInterface', 'api/search/' . $this->branch_info['branch_name'] . '/SampleInterface', 'SampleInterfaces link shown', 'SampleInterfaces link goes to right place');
    $this->assertLinkURLSubstring($this->branch_info['branch_name'] . ' to_exclude/excluded.php', 'excluded.php/class/Sample', 'Link to other version exists', 'Link to other version goes to right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/to_exclude!excluded.php/class/Sample');
    $this->assertLinkURLSubstring('Multiple interfaces named SampleInterface', 'api/search/' . $this->branch_info['branch_name'] . '/SampleInterface', 'SampleInterfaces link shown', 'SampleInterfaces link goes to right place');
    $this->assertLinkURLSubstring($this->branch_info['branch_name'] . ' classes.php', 'api/' . $this->branch_info['project'] . '/classes.php/class/Sample', 'Link to other version exists', 'Link to other version goes to right place');

    // Visit both the SampleInterface pages and verify they show the class that
    // implements them, and that each links to the other one.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/classes.php/interface/SampleInterface');
    $this->assertLink('Sample', 0, 'Link to Sample class exists');
    $this->assertLink('Sample', 1, 'Second link to Sample class exists');
    $this->assertLinkURLSubstring($this->branch_info['branch_name'] . ' to_exclude/excluded.php', 'excluded.php/interface/SampleInterface', 'Link to other version exists', 'Link to other version goes to right place');
    $this->drupalGet('api/' . $this->branch_info['project'] . '/to_exclude!excluded.php/interface/SampleInterface');
    $this->assertLink('Sample', 0, 'Link to Sample class exists');
    $this->assertLink('Sample', 1, 'Second link to Sample class exists');
    $this->assertLinkURLSubstring($this->branch_info['branch_name'] . ' classes.php', 'api/' . $this->branch_info['project'] . '/classes.php/interface/SampleInterface', 'Link to other version exists', 'Link to other version goes to right place');

    // Verify that the group is listed only once, and verify that all the
    // members are shown.
    $this->drupalGet('api/' . $this->branch_info['project'] . '/groups');
    $this->assertLinkCount('Samples', 1, 'Exactly one link to sample group exists');
    $this->clickLink('Samples');
    $this->assertLink('Sample', 0, 'Sample class is on topic page');
    $this->assertLink('SampleInterface', 0, 'Sample interface is on topic page');
    $this->assertLink('sample_function', 0, 'Sample function is on topic page');
    $this->assertLink('sample_insubdir_function', 0, 'Sample subdir function is on topic page');
    $this->assertLink('SAMPLE_CONSTANT', 0, 'Sample constant is on topic page');
    $this->assertLink('$sample_global', 0, 'Sample global is on topic page');

    // Verify that the watchdog message about duplicate group definitions was
    // logged.
    $this->drupalGet('admin/reports/dblog');
    $this->assertRaw('Duplicate @defgroup in', 'Duplicate defgroup message is in log');
  }

  /**
   * Asserts that the count of links with the given label is correct.
   *
   * @param $label
   *   Label to search for.
   * @param $count
   *   Count to assert.
   * @param $message
   *   Message to display.
   */
  function assertLinkCount($label, $count, $message) {
    $links = $this->xpath('//a[normalize-space(text())=:label]', array(':label' => $label));
    $this->assertEqual(count($links), $count, $message);
  }

}
