<?php

/**
 * Implements hook_features_api().
 */
function node_export_features_features_api() {
  return array(
    'node_export_features' => array(
      'name' => t('Node export'),
      'feature_source' => TRUE,
      'default_hook' => 'node_export_features_default',
      'default_file' => FEATURES_DEFAULTS_INCLUDED,
    ),
  );
}

/**
 * Implements hook_features_export_options().
 */
function node_export_features_features_export_options() {
  $options = array();

  $types = node_type_get_names();

  $query = 'SELECT n.nid, n.title, n.type, n.uuid
    FROM {node} n ';

  $ommited_types = array_filter(variable_get('node_export_omitted', array()));
  if (!empty($ommited_types)) {
    $exclude = "'" . implode("', '", $ommited_types) . "'";
    $query .= ' WHERE n.type NOT IN (' . $exclude . ') ';
  }

  $result = db_query($query);

  $query .= ' ORDER BY n.type, n.title ASC';
  foreach ($result as $node) {
    $options[$node->uuid] = t('@type: @title', array(
      '@type' => $types[$node->type],
      '@title' => $node->title,
    ));
  }

  return $options;

}

/**
 * Implements hook_features_export().
 */
function node_export_features_features_export($data, &$export, $module_name = '') {
  $pipe = array();

  $export['dependencies']['module'] = 'node_export_features';

  foreach ($data as $uuid) {
    $node = node_load(uuid_node_find($uuid));

    $export['features']['node_export_features'][$uuid] = $uuid;
    $pipe['node'][$node->type] = $node->type;
  }

  return $pipe;

}

/**
 * Implements hook_features_export_render().
 */
function node_export_features_features_export_render($module, $data, $export = NULL) {
  foreach ($data as $uuid) {
    $original_nodes[] = node_load(uuid_node_find($uuid));
  }
  $nodes = array();

  foreach ($original_nodes as $original_node) {
    if (!node_export_access_export($original_node)) {
      // Halt exporting.
      t("You do not have permission to perform a Node export on one or more of these nodes.  No nodes exported.");
      return FALSE;
    }

    $node = node_export_prepare_node($original_node);

    // Let other modules do special fixing up.
    drupal_alter('node_export_node', $node, $original_node);

    $nodes[] = $node;
  }

  $format = 'features';
  drupal_alter('node_export', $nodes, $format);

  $node_export_code = '  $nodes = ' . features_var_export($nodes, '  ') . ';';
  $node_export_code .= PHP_EOL . '  return $nodes;';
  return array('node_export_features_default' => $node_export_code);
}

/**
 * Implements hook_feature_revert().
 */
function node_export_features_features_revert($module = NULL) {
  node_export_features_features_rebuild($module);
}

/**
 * Implements hook_feature_rebuild().
 */
function node_export_features_features_rebuild($module) {
  $nodes = features_get_default('node_export_features', $module);
  if (!empty($nodes)) {
    module_load_include('inc', 'node', 'node.pages');

    $format = 'features';

    $nodes = node_export_restore_recursion($nodes);

    $types_exist = node_export_import_types_check($nodes);
    if ($types_exist !== TRUE) {
      // There was a problem with the content types check.
      t(
        'Error encountered during import.  Node types unknown on this site: %t.  No nodes imported.',
        array('%t' => implode(", ", $types_exist))
      );
      return FALSE;
    }

    if (!node_export_access_import_nodes($nodes)) {
      // There was a problem with permissions.
      t(
        'You do not have permission to perform a Node export: import on one or more of these nodes.  No nodes imported.'
      );
      return FALSE;
    }

    // Let other modules do special fixing up.
    drupal_alter('node_export_import', $nodes, $format);

    foreach ($nodes as $data) {
      $original_node = (object)$data;
      node_object_prepare($node);

      $node = node_export_node_clone($original_node);

      // Let other modules do special fixing up.
      drupal_alter('node_export_node_import', $node, $original_node);

      // @todo - find out what node_submit() was for, and if it's a good idea to use consistently throughout node export?
      //$node = node_submit($node);
      node_export_save($node);
      $new_nodes[] = $node;
    }
    drupal_alter('node_export_after_import', $new_nodes, $format);

    // Clear the page and block caches.
    cache_clear_all();
  }
}

