<?php

/**
 * @file
 * Module file for the node accessibility statistics project.
 */

/**
 * Implements hook_help().
 */
function node_accessibility_workbench_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#node_accessibility_workbench":
      $output .= '<p>' . t("This module alters the workbench moderation moderation pages, adding revision-specific accessibility links.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu_alter().
 */
function node_accessibility_workbench_menu_alter(&$items) {
  // provide a failsafe way to prevent menu override conflicts
  $alter_menu = variable_get('node_accessibility_alter_revision_menu', TRUE);

  if ($alter_menu){
    $items['node/%node/moderation']['page callback'] = 'node_accessibility_workbench_moderation_overview';
  }
}

/**
 * Display a node's moderation history.
 *
 * @param $node
 *   The node being acted upon.
 *
 * @return
 *   A themed table of data and links for node moderation actions.
 *
 * @see workbench_moderation_node_history_view()
 */
function node_accessibility_workbench_moderation_overview($node) {
  global $user;

  // Page title.
  drupal_set_title(t('History of %title', array('%title' => $node->title)), PASS_THROUGH);

  // Alert if there is no live node
  if (!isset($node->workbench_moderation['published'])) {
    drupal_set_message(t('Currently there is no published revision of this node.'), 'warning');
  }

  // Get all of the node revisions, each with its most recent moderation.
  $query = db_select('node', 'n');
  $query->leftJoin('node_revision', 'r', 'n.nid = r.nid');
  $query->leftJoin('users', 'u', 'r.uid = u.uid');
  $query->leftJoin('workbench_moderation_node_history', 'm', 'r.vid = m.vid');
  $query->addField('n', 'vid', 'live_revision');
  $query->condition('n.nid', $node->nid)
    ->orderBy('r.vid', 'DESC')
    ->fields('r', array('nid', 'vid', 'title', 'log', 'uid', 'timestamp'))
    ->fields('u', array('name'))
    ->fields('m');

  $revisions = $query->execute()
    ->fetchAllAssoc('vid');

  // Build the table rows.
  $rows = array();
  foreach ($revisions as $revision) {
    $row = array(
      'data' => array(
        'vid' => '',
        'info' => '',
        'revision' => '',
        'moderation' => '',
      ),
      'class' => array('revision'),
    );

    // Add row classes.
    if ($revision->vid == $node->workbench_moderation['current']->vid) {
      $row['class'][] = 'current-revision';
    }
    if (isset($node->workbench_moderation['published']) && $revision->vid == $node->workbench_moderation['published']->vid) {
      $row['class'][] = 'published-revision';
    }
    else {
      $row['class'][] = 'unpublished-revision';
    }

    // Add row data.
    $row['data']['vid'] = $revision->vid;
    $row['data']['info'] .= '<div class="revision-title">' . check_plain($revision->title) . '</div>';
    $row['data']['info'] .= '<div class="revision-log description">' . filter_xss($revision->log) . '</div>';
    $row['data']['info'] .= '<div class="revision-user description">' . t('Revised by !user', array('!user' => theme('username', array('account' => $revision)))) . '</div>';

    // Revision operations.
    $revision_operations = array();

    // Loading the node at the specific revision using node_load() is too slow
    // when there are many revisions, thus we fake it by cloning the original
    // node and changing the 'vid' and the 'my_revision' elements required for
    // granting access to the revision operations (view, update/revert, delete).
    $node_revision = clone $node;
    $node_revision->vid = $revision->vid;
    $node_revision->workbench_moderation['my_revision'] = $revision;

    // View operation.
    if (_workbench_moderation_revision_access($node_revision, 'view')) {
      // Link to the node page if this is the published revision.
      if (isset($node->workbench_moderation['published']) && $revision->vid == $node->workbench_moderation['published']->vid) {
        $url = "node/{$revision->nid}";
      }
      // The special case "current-revision" link handles routing for the
      // current unpublished revision.
      elseif ($revision->vid == $node->workbench_moderation['current']->vid) {
        $url = "node/{$revision->nid}/current-revision";
      }
      // Otherwise, link to the normal revision view page.
      else {
        $url = "node/{$revision->nid}/revisions/{$revision->vid}/view";
      }
      $revision_operations['view'] = l(t('View'), $url);
    }

    $revision_operations['accessibility'] = l(t("accessibility"), 'node/' . $node->nid . '/accessibility/' . $revision->vid . '/revision');

    // Revert operation.
    if (_workbench_moderation_revision_access($node_revision, 'update')) {
      $revision_operations['revert'] = l(t('Revert'), "node/{$revision->nid}/revisions/{$revision->vid}/revert");
    }

    // Delete operation.
    if (_workbench_moderation_revision_access($node_revision, 'delete')) {
      $revision_operations['delete'] = l(t('Delete'), "node/{$revision->nid}/revisions/{$revision->vid}/delete");
    }

    // Get the moderation history of this revision.
    $query = db_select('workbench_moderation_node_history', 'm');
    $query->leftJoin('users', 'u', 'm.uid = u.uid');
    $query->condition('m.vid', $revision->vid)
      ->orderBy('m.stamp', 'DESC')
      ->orderBy('m.hid', 'DESC')
      ->fields('m')
      ->fields('u', array('name'));

    $moderations = $query->execute()
      ->fetchAllAssoc('hid');

    // Make sure it's an array.
    if (empty($moderations)) {
      $moderations = array();
      if ($revision->vid == $node->workbench_moderation['current']->vid) {
        $moderations = array($node->workbench_moderation['current']);
      }
    }

    // If this is the current revision, provide moderation links.
    if (!empty($node->workbench_moderation['published']) && $revision->vid == $node->workbench_moderation['published']->vid) {
      $row['data']['moderation'] = '<div class="moderation-state"><strong>' . t('This is the published revision.') . '</strong></div>';
      // Provide an unpublish link.
      $next_states = workbench_moderation_states_next(workbench_moderation_state_published(), $user, $node);
      if (!empty($next_states)) {
        $attributes = array();
        $attributes['class'] = array('moderation-action-unpublish');
        $row['data']['revision'] .= '<div class="moderation-actions">' . l(t('Unpublish'), "node/{$revision->nid}/moderation/{$revision->live_revision}/unpublish", array('attributes' => $attributes)) . '</div>';
      }
    }
    elseif ($revision->vid == $node->workbench_moderation['current']->vid) {
      $node_current = workbench_moderation_node_current_load($node);
      $row['data']['moderation'] = '<div class="moderation-state"><strong>' . t('This is the current revision. The current state is %state.', array('%state' => workbench_moderation_state_label($node->workbench_moderation['current']->state))) . '</strong></div>';
      $moderate_form = drupal_get_form('workbench_moderation_moderate_form', $node_current);
      $row['data']['revision'] .= '<div class="moderation-actions"><div class="moderation-action-set-state">' . t('Set moderation state:') . '</div>' . t(' !moderation-actions-form', array('!moderation-actions-form' => drupal_render($moderate_form))) . '</div>';
    }

    $row['data']['revision'] .= '<div class="revision-actions">' . implode(' | ', array_filter($revision_operations)) . '</div>';

    // Build a table of the moderation history.
    $moderation_rows = array();
    $items = array();
    foreach ($moderations as $moderation) {
      if ($moderation->from_state) {
        $items[] = t('From %from_state --> %to_state on %date by !user',
          array(
            '%from_state' => workbench_moderation_state_label($moderation->from_state),
            '%to_state' => workbench_moderation_state_label($moderation->state),
            '%date' => format_date($moderation->stamp, 'short'),
            '!user' => theme('username', array('account' => $moderation)),
          )
        );
      }
      else {
        $items[] = t('Created as %to_state on %date by !user',
          array(
            '%to_state' => workbench_moderation_state_label($moderation->state),
            '%date' => format_date($moderation->stamp, 'short'),
            '!user' => theme('username', array('account' => $moderation)),
          )
        );
      }
    }

    if (empty($items)) {
      $row['data']['moderation'] = format_date($revision->timestamp, 'short');
    }
    else {
      $row['data']['moderation'] .= theme('item_list', array('items' => $items));
    }

    $rows[] = $row;
  }

  // Set the table header.
  $header = array(t('Revision'), t('Title'), t('Actions'), t('Moderation Log'));

  // Return properly styled output.
  return array(
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'workbench_moderation') . '/css/workbench_moderation.css',
      ),
    ),
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );
}
