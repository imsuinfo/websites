<?php

/**
 * @file
 * 
 * This module provides an autocomplete widget that presents the matched terms 
 * in a hierarchical display.  Many of the widget-related hooks are copied 
 * from the core taxonomy autocomplete widget implementation and customized 
 * where needed for ours.
 * 
 * An added benefit of this module is that it returns actual TIDs instead of 
 * just the term names, assuring that the correct term has been selected in 
 * the event that a hierarchy has replicated terms.
 */

/**
 * Implements hook_menu
 */
function term_ref_autocomplete_menu() {
  $items = array();

  // AJAX endpoint for autocompletion  
  $items['term_ref_autocomplete/autocomplete'] = array(
    'title' => 'Autocomplete taxonomy',
    'page callback' => 'term_ref_autocomplete_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'term_ref_autocomplete.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_library
 * 
 * Note we include the core autocomplete.js since our code builds on top of it
 */
function term_ref_autocomplete_library() {
  $libraries = array();
  $base_path = drupal_get_path('module', 'term_ref_autocomplete'); 
  
  $libraries['term_ref_autocomplete'] = array(
    'title' => 'Hierarchical Term Reference Autocomplete',
    'version' => '1.0.0',
    'js' => array(
      'misc/autocomplete.js' => array('group' => JS_DEFAULT),
      $base_path . '/theme/term_ref_autocomplete.js' => array('scope' => 'footer'),
    ),
    'css' => array(
      $base_path . '/theme/term_ref_autocomplete.css' => array(),
    ),
  );
  
  return $libraries;
}

/**
 * Implements hook_theme
 */
function term_ref_autocomplete_theme($existing, $type, $theme, $path) {
  $items = array(
    'term_ref_autocomplete_field' => array(
      'render element' => 'element',
    ),
  );
  
  return $items;
}

/**
 * Implements hook_element_info
 */
function term_ref_autocomplete_element_info() {
  $types['term_ref_autocomplete_field'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path' => FALSE,
    '#process' => array('ajax_process_form'),
    '#theme' => 'term_ref_autocomplete_field',
    '#theme_wrappers' => array('form_element'),
  );

  return $types;  
}

/**
 * Implements theme callback for term_ref_autocomplete 
 */
function theme_term_ref_autocomplete_field(&$variables) {
  //dpm($variables);
  $element = $variables['element'];
  $element['#attributes']['type'] = 'text';
  element_set_attributes($element, array('id', 'name', 'value', 'size', 'maxlength'));
  _form_set_class($element, array('form-text'));

  $extra = '';
  if ($element['#autocomplete_path'] && drupal_valid_path($element['#autocomplete_path'])) {
    drupal_add_library('term_ref_autocomplete', 'term_ref_autocomplete');
  
    $element['#attributes']['class'][] = 'form-autocomplete';
    $element['#attributes']['class'][] = 'fluid';

    $attributes = array();
    $attributes['type'] = 'hidden';
    $attributes['id'] = $element['#attributes']['id'] . '-autocomplete';
    $attributes['value'] = url($element['#autocomplete_path'], array('absolute' => TRUE));
    $attributes['disabled'] = 'disabled';
    $attributes['class'][] = 'htrac-autocomplete';
    $extra .= '<input' . drupal_attributes($attributes) . ' />';
  }

  $output = '<input' . drupal_attributes($element['#attributes']) . ' />';

  return $output . $extra;
}

/**
 * Implements hook_field_widget_info().
 */
function term_ref_autocomplete_field_widget_info() {
  return array(
    'term_ref_autocomplete_widget' => array(
      'label' => t('Hierarchical autocomplete term reference'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 60,
        'autocomplete_path' => 'term_ref_autocomplete/autocomplete',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form() for widget
 */
function term_ref_autocomplete_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $tags = array();
  foreach ($items as $item) {
    $tmp_tag = '';
    if (isset($item['taxonomy_term'])) {
      $tmp_tag = $item['taxonomy_term'];
    }
    else {
      $term = taxonomy_term_load($item['tid']);
      if (!empty($term->name)) {
        $tmp_tag = $term->name;
      }
    }
    
    if (!empty($tmp_tag)) {
      if (strpos($tmp_tag, ',') !== FALSE || strpos($tmp_tag, '"') !== FALSE) {
        $tmp_tag = '"' . str_replace('"', '""', $tmp_tag) . '"';
      }      
      $tags[$item['tid']] = $tmp_tag . ' [tid:' . $item['tid'] . ']';
    }
  }
  
  $el_base = $element;

  // Provide a display field, which is the text input field that drives the autocomplete function
  $element['names'] = $el_base + array(
    '#type' => 'term_ref_autocomplete_field',
    '#default_value' => implode(', ', $tags),
    '#autocomplete_path' => $instance['widget']['settings']['autocomplete_path'] . '/' . $field['field_name'],
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 1024,
    '#element_validate' => array('term_ref_autocomplete_taxonomy_autocomplete_validate'),
  );

  // HACK: force a default value for workbench access users when there is only 1 workbench_access field.
  if (module_exists('workbench_access') && isset($form['#node']) && property_exists($form['#node'], 'type')) {
    $type = $form['#node']->type;
    $fields = workbench_access_get_assigned_fields($type);
    $form_fields = array();
    foreach ($fields as $field => $info) {
      if (!empty($info['instance_info']['workbench_access_field'])) {
        $form_fields[] = $field;
      }
    }
    if (count($form_fields) == 1 && empty($element['names']['#default_value'])) {
      $user_data = workbench_access_active_options();

      global $user;

      if (!property_exists($user, 'workbench_access')) {
        $user = user_load($user->uid);
      }

      $sections = (array) $user->workbench_access;
      $sections = array_keys($sections);

      $element['names']['#description'] .= ' ' . t("See <a href='!url' title='My Sections' target='_blank'>My Sections</a> for a list of possible values.", array('!url' => url('admin/workbench/sections')));

      if (count($sections) == 1) {
        foreach ($user_data as $key => $tmp_tag) {
          if (strpos($tmp_tag, ',') !== FALSE || strpos($tmp_tag, '"') !== FALSE) {
            $tmp_tag = '"' . str_replace('"', '""', $tmp_tag) . '"';
          }

          $element['names']['#default_value'][] = $tmp_tag . ' [tid:' . $key . ']';
          break;
        }
      }
    }
  }

  return $element;
}

/**
 * Form element validate handler for widget used as taxonomy term autocomplete element.
 */
function term_ref_autocomplete_taxonomy_autocomplete_validate($element, &$form_state) {
  $values = array();
  $value_ref = NULL;

  // See if this is a field collection
  if ('field_collection_item' == $element['#entity_type'] && !empty($element['#field_parents'])) {  
    $value_ref = &$form_state['values'][$element['#bundle']][$element['#language']][$element['#field_parents'][2]][$element['#field_name']][$element['#language']];
  }
    
  // Otherwise we're dealing with a normal field
  else {
    $value_ref = &$form_state['values'][$element['#field_name']][$element['#language']];
  }
  
  $named_tags = _term_ref_autocomplete_parse_input_named($value_ref['names']);
  $tids = array_keys($named_tags);
  if (empty($tids)) {
    if (!empty($value_ref['names'])) {
      form_set_error($element['#field_name'], t('No valid terms have been specified!'));
      drupal_set_message("value ref = " . print_r($value_ref, TRUE));
    }
  }
  else {
    if (module_exists('workbench_access')) {
      global $user;

      if (!isset($user->workbench_access)) {
        workbench_access_user_load_data($user);
      }

      $tree = workbench_access_get_user_tree($user);
      $invalid_terms = array();
      $valid_terms = array();
      foreach ($tids as $tid) {
        if (isset($tree[$tid])) {
          $valid_terms[] = $tid;
        }
        else {
          $invalid_terms[] = check_plain($named_tags[$tid] . ' [' . $tid . ']');
        }
      }

      if (!empty($terms)) {
        form_set_error($element['#field_name'], t('You may not assign this content to: !terms', array('!terms' => implode(', ', $terms))));
      }
      else {
        $terms = taxonomy_term_load_multiple($valid_terms);

        // These need to be stored in a zero-indexed array as nested arrays instead of objects
        foreach ($terms as $term) {
          $values[] = (array)$term;
        }
      }
    }
    else {
      $terms = taxonomy_term_load_multiple($tids);
    
      // These need to be stored in a zero-indexed array as nested arrays instead of objects
      foreach ($terms as $term) {
        $values[] = (array)$term;
      }
    }
  }
  
  // Overwrite the field value here.  This cleans up the 'names' and 'tids' element columns used to get here
  $value_ref = $values;
}

/**
 * Parses the input coming from the form element, either via AJAX calls or element validation and returns array of term IDs
 */
function _term_ref_autocomplete_parse_input($value) {
  $tags = array();
  preg_match_all('/\[\s*tid\s*:\s*(\d+)\s*\]/', $value, $matches);
  if (!empty($matches[1])) {
    $tags = $matches[1];
  }
  
  return $tags;
}

/**
 * Parses the input coming from the form element, either via AJAX calls or element validation and returns array of term IDs
 *
 * This also returns the name of the term with the tid.
 */
function _term_ref_autocomplete_parse_input_named($value) {
  $tags = array();
  $matched = preg_match_all('/([^,]+)\[\s*tid\s*:\s*(\d+)\s*\]/', $value, $matches);

  $i = 0;
  for (; $i < $matched; $i++) {
    $tags[$matches[2][$i]] = $matches[1][$i];
  }

  return $tags;
}
